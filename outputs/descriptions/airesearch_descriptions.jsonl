{
    "function_id": "ai_research-1",
    "snippet": "def conduct_literature_search(query: str, databases: List[str]) -> List[str]:\n    \"\"\"\n    Conducts a literature search on AI papers from academic databases.\n\n    Parameters:\n        query (str): The search query.\n        databases (List[str]): A list of academic databases to search.\n\n    Returns:\n        List[str]: A list of paper titles that match the search query.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def conduct_literature_search(query: str, databases: List[str]) -> List[str]:\\n    \\\"\\\"\\\"\\n    Conducts a literature search on AI papers from academic databases.\\n\\n    Parameters:\\n        query (str): The search query.\\n        databases (List[str]): A list of academic databases to search.\\n\\n    Returns:\\n        List[str]: A list of paper titles that match the search query.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"conduct_literature_search\",\n        \"description\": \"Conducts a literature search on AI papers from academic databases.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"query\": {\n                    \"type\": \"string\",\n                    \"description\": \"The search query.\"\n                },\n                \"databases\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of academic databases to search.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"query\", \"databases\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"A list of paper titles that match the search query.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def conduct_literature_search(query: str, databases: List[str]) -> List[str]:\n    \"\"\"\n    Conducts a literature search on AI papers from academic databases.\n\n    Parameters:\n        query (str): The search query.\n        databases (List[str]): A list of academic databases to search.\n\n    Returns:\n        List[str]: A list of paper titles that match the search query.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "conduct_literature_search",
            "description": "Conducts a literature search on AI papers from academic databases.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "The search query."
                    },
                    "databases": {
                        "type": "array",
                        "description": "A list of academic databases to search.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "query",
                    "databases"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of paper titles that match the search query."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def conduct_literature_search(query: str, databases: List[str]) -> List[str]:\n    \"\"\"\n    Conducts a literature search on AI papers from academic databases.\n\n    Parameters:\n        query (str): The search query.\n        databases (List[str]): A list of academic databases to search.\n\n    Returns:\n        List[str]: A list of paper titles that match the search query.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-2",
    "snippet": "def retrieve_text_from_papers(paper_list: List[str]) -> List[str]:\n    \"\"\"\n    Retrieves text from specified academic papers for analysis.\n\n    Parameters:\n        paper_list (List[str]): A list of paper names or IDs.\n\n    Returns:\n        List[str]: A list of text contents retrieved from the specified academic papers.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_text_from_papers(paper_list: List[str]) -> List[str]:\\n    \\\"\\\"\\\"\\n    Retrieves text from specified academic papers for analysis.\\n\\n    Parameters:\\n        paper_list (List[str]): A list of paper names or IDs.\\n\\n    Returns:\\n        List[str]: A list of text contents retrieved from the specified academic papers.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"retrieve_text_from_papers\",\n        \"description\": \"Retrieves text from specified academic papers for analysis.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"paper_list\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of paper names or IDs.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"paper_list\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"A list of text contents retrieved from the specified academic papers.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_text_from_papers(paper_list: List[str]) -> List[str]:\n    \"\"\"\n    Retrieves text from specified academic papers for analysis.\n\n    Parameters:\n        paper_list (List[str]): A list of paper names or IDs.\n\n    Returns:\n        List[str]: A list of text contents retrieved from the specified academic papers.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "retrieve_text_from_papers",
            "description": "Retrieves text from specified academic papers for analysis.",
            "parameters": {
                "type": "object",
                "properties": {
                    "paper_list": {
                        "type": "array",
                        "description": "A list of paper names or IDs.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "paper_list"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of text contents retrieved from the specified academic papers."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_text_from_papers(paper_list: List[str]) -> List[str]:\n    \"\"\"\n    Retrieves text from specified academic papers for analysis.\n\n    Parameters:\n        paper_list (List[str]): A list of paper names or IDs.\n\n    Returns:\n        List[str]: A list of text contents retrieved from the specified academic papers.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-3",
    "snippet": "def submit_research_papers(\n    papers: List[str],\n    server: str,\n    journals: List[str],\n) -> bool:\n    \"\"\"\n    Submits research papers or articles to preprint servers or journals.\n\n    Parameters:\n        papers (List[str]): A list of strings representing the research papers or articles.\n        server (str): The preprint server to submit the papers to.\n        journals (List[str]): A list of strings representing the journals to submit the papers to.\n\n    Returns:\n        bool: True if the papers were successfully submitted, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def submit_research_papers(\\n    papers: List[str],\\n    server: str,\\n    journals: List[str],\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Submits research papers or articles to preprint servers or journals.\\n\\n    Parameters:\\n        papers (List[str]): A list of strings representing the research papers or articles.\\n        server (str): The preprint server to submit the papers to.\\n        journals (List[str]): A list of strings representing the journals to submit the papers to.\\n\\n    Returns:\\n        bool: True if the papers were successfully submitted, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"submit_research_papers\",\n        \"description\": \"Submits research papers or articles to preprint servers or journals.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"papers\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of strings representing the research papers or articles.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"server\": {\n                    \"type\": \"string\",\n                    \"description\": \"The preprint server to submit the papers to.\"\n                },\n                \"journals\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of strings representing the journals to submit the papers to.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"papers\", \"server\", \"journals\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if the papers were successfully submitted, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def submit_research_papers(\n    papers: List[str],\n    server: str,\n    journals: List[str],\n) -> bool:\n    \"\"\"\n    Submits research papers or articles to preprint servers or journals.\n\n    Parameters:\n        papers (List[str]): A list of strings representing the research papers or articles.\n        server (str): The preprint server to submit the papers to.\n        journals (List[str]): A list of strings representing the journals to submit the papers to.\n\n    Returns:\n        bool: True if the papers were successfully submitted, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "submit_research_papers",
            "description": "Submits research papers or articles to preprint servers or journals.",
            "parameters": {
                "type": "object",
                "properties": {
                    "papers": {
                        "type": "array",
                        "description": "A list of strings representing the research papers or articles.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "server": {
                        "type": "string",
                        "description": "The preprint server to submit the papers to."
                    },
                    "journals": {
                        "type": "array",
                        "description": "A list of strings representing the journals to submit the papers to.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "papers",
                    "server",
                    "journals"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the papers were successfully submitted, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_research_papers(\n    papers: List[str],\n    server: str,\n    journals: List[str],\n) -> bool:\n    \"\"\"\n    Submits research papers or articles to preprint servers or journals.\n\n    Parameters:\n        papers (List[str]): A list of strings representing the research papers or articles.\n        server (str): The preprint server to submit the papers to.\n        journals (List[str]): A list of strings representing the journals to submit the papers to.\n\n    Returns:\n        bool: True if the papers were successfully submitted, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-4",
    "snippet": "def run_experiments_on_cloud() -> None:\n    \"\"\"\n    Runs code for machine learning experiments on cloud-based compute resources.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def run_experiments_on_cloud() -> None:\\n    \\\"\\\"\\\"\\n    Runs code for machine learning experiments on cloud-based compute resources.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"run_experiments_on_cloud\",\n        \"description\": \"Runs code for machine learning experiments on cloud-based compute resources.\",\n        \"parameters\": {},\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def run_experiments_on_cloud() -> None:\n    \"\"\"\n    Runs code for machine learning experiments on cloud-based compute resources.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "run_experiments_on_cloud",
            "description": "Runs code for machine learning experiments on cloud-based compute resources.",
            "parameters": {},
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def run_experiments_on_cloud() -> None:\n    \"\"\"\n    Runs code for machine learning experiments on cloud-based compute resources.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-5",
    "snippet": "def fetch_and_preprocess_datasets(\n    repository_url: str,\n    access_token: str,\n    dataset_names: List[str]\n) -> List[pd.DataFrame]:\n    \"\"\"\n    Fetches and preprocesses datasets from public or private repositories.\n\n    Parameters:\n        repository_url (str): The URL of the repository.\n        access_token (str): The access token for accessing private repositories.\n        dataset_names (List[str]): A list of names of datasets to fetch and preprocess.\n\n    Returns:\n        List[pd.DataFrame]: A list of pandas DataFrames containing the fetched and preprocessed datasets.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def fetch_and_preprocess_datasets(\\n    repository_url: str,\\n    access_token: str,\\n    dataset_names: List[str]\\n) -> List[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Fetches and preprocesses datasets from public or private repositories.\\n\\n    Parameters:\\n        repository_url (str): The URL of the repository.\\n        access_token (str): The access token for accessing private repositories.\\n        dataset_names (List[str]): A list of names of datasets to fetch and preprocess.\\n\\n    Returns:\\n        List[pd.DataFrame]: A list of pandas DataFrames containing the fetched and preprocessed datasets.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"fetch_and_preprocess_datasets\",\n        \"description\": \"Fetches and preprocesses datasets from public or private repositories.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"repository_url\": {\n                    \"type\": \"string\",\n                    \"description\": \"The URL of the repository.\"\n                },\n                \"access_token\": {\n                    \"type\": \"string\",\n                    \"description\": \"The access token for accessing private repositories.\"\n                },\n                \"dataset_names\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of names of datasets to fetch and preprocess.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"repository_url\", \"access_token\", \"dataset_names\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"description\": \"A pandas DataFrame containing the fetched and preprocessed dataset.\"\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def fetch_and_preprocess_datasets(\n    repository_url: str,\n    access_token: str,\n    dataset_names: List[str]\n) -> List[pd.DataFrame]:\n    \"\"\"\n    Fetches and preprocesses datasets from public or private repositories.\n\n    Parameters:\n        repository_url (str): The URL of the repository.\n        access_token (str): The access token for accessing private repositories.\n        dataset_names (List[str]): A list of names of datasets to fetch and preprocess.\n\n    Returns:\n        List[pd.DataFrame]: A list of pandas DataFrames containing the fetched and preprocessed datasets.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "fetch_and_preprocess_datasets",
            "description": "Fetches and preprocesses datasets from public or private repositories.",
            "parameters": {
                "type": "object",
                "properties": {
                    "repository_url": {
                        "type": "string",
                        "description": "The URL of the repository."
                    },
                    "access_token": {
                        "type": "string",
                        "description": "The access token for accessing private repositories."
                    },
                    "dataset_names": {
                        "type": "array",
                        "description": "A list of names of datasets to fetch and preprocess.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "repository_url",
                    "access_token",
                    "dataset_names"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "object",
                    "description": "A pandas DataFrame containing the fetched and preprocessed dataset."
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def fetch_and_preprocess_datasets(\n    repository_url: str,\n    access_token: str,\n    dataset_names: List[str]\n) -> List[pd.DataFrame]:\n    \"\"\"\n    Fetches and preprocesses datasets from public or private repositories.\n\n    Parameters:\n        repository_url (str): The URL of the repository.\n        access_token (str): The access token for accessing private repositories.\n        dataset_names (List[str]): A list of names of datasets to fetch and preprocess.\n\n    Returns:\n        List[pd.DataFrame]: A list of pandas DataFrames containing the fetched and preprocessed datasets.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-6",
    "snippet": "def hyperparameter_tuning(\n    model: Any,\n    X: Any,\n    y: Any,\n    params: Dict[str, Any],\n    scoring: str,\n    cv: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs hyperparameter tuning for machine learning models.\n\n    Parameters:\n        model (Any): The machine learning model to tune.\n        X (Any): The input features.\n        y (Any): The target variable.\n        params (Dict[str, Any]): A dictionary of hyperparameters to tune.\n        scoring (str): The scoring metric to use for evaluation.\n        cv (int): The number of cross-validation folds.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'best_params' as a key and the best hyperparameters as a value.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def hyperparameter_tuning(\\n    model: Any,\\n    X: Any,\\n    y: Any,\\n    params: Dict[str, Any],\\n    scoring: str,\\n    cv: int,\\n) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Performs hyperparameter tuning for machine learning models.\\n\\n    Parameters:\\n        model (Any): The machine learning model to tune.\\n        X (Any): The input features.\\n        y (Any): The target variable.\\n        params (Dict[str, Any]): A dictionary of hyperparameters to tune.\\n        scoring (str): The scoring metric to use for evaluation.\\n        cv (int): The number of cross-validation folds.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary with 'best_params' as a key and the best hyperparameters as a value.\\n    \\\"\\\"\\\"\\n\\n    \",\n    \"function_description\": {\n        \"name\": \"hyperparameter_tuning\",\n        \"description\": \"Performs hyperparameter tuning for machine learning models.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"model\": {\n                    \"type\": \"any\",\n                    \"description\": \"The machine learning model to tune.\"\n                },\n                \"X\": {\n                    \"type\": \"any\",\n                    \"description\": \"The input features.\"\n                },\n                \"y\": {\n                    \"type\": \"any\",\n                    \"description\": \"The target variable.\"\n                },\n                \"params\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary of hyperparameters to tune.\",\n                    \"properties\": {\n                        \"type\": \"any\"\n                    }\n                },\n                \"scoring\": {\n                    \"type\": \"string\",\n                    \"description\": \"The scoring metric to use for evaluation.\"\n                },\n                \"cv\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The number of cross-validation folds.\"\n                }\n            },\n            \"required\": [\"model\", \"X\", \"y\", \"params\", \"scoring\", \"cv\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"best_params\": {\n                    \"type\": \"any\",\n                    \"description\": \"The best hyperparameters.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def hyperparameter_tuning(\n    model: Any,\n    X: Any,\n    y: Any,\n    params: Dict[str, Any],\n    scoring: str,\n    cv: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs hyperparameter tuning for machine learning models.\n\n    Parameters:\n        model (Any): The machine learning model to tune.\n        X (Any): The input features.\n        y (Any): The target variable.\n        params (Dict[str, Any]): A dictionary of hyperparameters to tune.\n        scoring (str): The scoring metric to use for evaluation.\n        cv (int): The number of cross-validation folds.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'best_params' as a key and the best hyperparameters as a value.\n    \"\"\"\n\n    ",
        "function_description": {
            "name": "hyperparameter_tuning",
            "description": "Performs hyperparameter tuning for machine learning models.",
            "parameters": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "any",
                        "description": "The machine learning model to tune."
                    },
                    "X": {
                        "type": "any",
                        "description": "The input features."
                    },
                    "y": {
                        "type": "any",
                        "description": "The target variable."
                    },
                    "params": {
                        "type": "object",
                        "description": "A dictionary of hyperparameters to tune.",
                        "properties": {
                            "type": "any"
                        }
                    },
                    "scoring": {
                        "type": "string",
                        "description": "The scoring metric to use for evaluation."
                    },
                    "cv": {
                        "type": "integer",
                        "description": "The number of cross-validation folds."
                    }
                },
                "required": [
                    "model",
                    "X",
                    "y",
                    "params",
                    "scoring",
                    "cv"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "best_params": {
                        "type": "any",
                        "description": "The best hyperparameters."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def hyperparameter_tuning(\n    model: Any,\n    X: Any,\n    y: Any,\n    params: Dict[str, Any],\n    scoring: str,\n    cv: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs hyperparameter tuning for machine learning models.\n\n    Parameters:\n        model (Any): The machine learning model to tune.\n        X (Any): The input features.\n        y (Any): The target variable.\n        params (Dict[str, Any]): A dictionary of hyperparameters to tune.\n        scoring (str): The scoring metric to use for evaluation.\n        cv (int): The number of cross-validation folds.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'best_params' as a key and the best hyperparameters as a value.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-7",
    "snippet": "def visualize_model_performance(\n    metrics: List[str],\n    results: Dict[str, float],\n) -> None:\n    \"\"\"\n    Visualizes the model performance metrics and experimental results.\n\n    Parameters:\n        metrics (List[str]): A list of performance metrics.\n        results (Dict[str, float]): A dictionary containing experimental results.\n                                    Each key is a metric and the value is the corresponding result.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"    def visualize_model_performance(\\n    metrics: List[str],\\n    results: Dict[str, float],\\n) -> None:\\n    \\n    \\\"\\\"\\\"\\n    Visualizes the model performance metrics and experimental results.\\n\\n    Parameters:\\n        metrics (List[str]): A list of performance metrics.\\n        results (Dict[str, float]): A dictionary containing experimental results.\\n                                    Each key is a metric and the value is the corresponding result.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n    \",\n    \"function_description\": {\n        \"name\": \"visualize_model_performance\",\n        \"description\": \"Visualizes the model performance metrics and experimental results.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"metrics\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of performance metrics.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"results\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing experimental results. Each key is a metric and the value is the corresponding result.\",\n                    \"properties\": {\n                        \"metric\": {\n                            \"type\": \"float\"\n                        }\n                    }\n                }\n            },\n            \"required\": [\"metrics\", \"results\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "    def visualize_model_performance(\n    metrics: List[str],\n    results: Dict[str, float],\n) -> None:\n    \n    \"\"\"\n    Visualizes the model performance metrics and experimental results.\n\n    Parameters:\n        metrics (List[str]): A list of performance metrics.\n        results (Dict[str, float]): A dictionary containing experimental results.\n                                    Each key is a metric and the value is the corresponding result.\n\n    Returns:\n        None\n    \"\"\"\n    ",
        "function_description": {
            "name": "visualize_model_performance",
            "description": "Visualizes the model performance metrics and experimental results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "metrics": {
                        "type": "array",
                        "description": "A list of performance metrics.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "results": {
                        "type": "object",
                        "description": "A dictionary containing experimental results. Each key is a metric and the value is the corresponding result.",
                        "properties": {
                            "metric": {
                                "type": "float"
                            }
                        }
                    }
                },
                "required": [
                    "metrics",
                    "results"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def visualize_model_performance(\n    metrics: List[str],\n    results: Dict[str, float],\n) -> None:\n    \"\"\"\n    Visualizes the model performance metrics and experimental results.\n\n    Parameters:\n        metrics (List[str]): A list of performance metrics.\n        results (Dict[str, float]): A dictionary containing experimental results.\n                                    Each key is a metric and the value is the corresponding result.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-8",
    "snippet": "def sentiment_analysis_ai_technologies() -> None:\n    \"\"\"\n    Run sentiment analysis on social media posts related to AI technologies.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def sentiment_analysis_ai_technologies() -> None:\\n    \\\"\\\"\\\"\\n    Run sentiment analysis on social media posts related to AI technologies.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"sentiment_analysis_ai_technologies\",\n        \"description\": \"Run sentiment analysis on social media posts related to AI technologies.\",\n        \"parameters\": {},\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def sentiment_analysis_ai_technologies() -> None:\n    \"\"\"\n    Run sentiment analysis on social media posts related to AI technologies.\n\n    Returns:\n        None\n    \"\"\"",
        "function_description": {
            "name": "sentiment_analysis_ai_technologies",
            "description": "Run sentiment analysis on social media posts related to AI technologies.",
            "parameters": {},
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def sentiment_analysis_ai_technologies() -> None:\n    \"\"\"\n    Run sentiment analysis on social media posts related to AI technologies.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-9",
    "snippet": "def update_website_with_publications():\n    \"\"\"\n    Automatically updates a personal website or blog with new publications.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def update_website_with_publications():\\n    \\\"\\\"\\\"\\n    Automatically updates a personal website or blog with new publications.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"update_website_with_publications\",\n        \"description\": \"Automatically updates a personal website or blog with new publications.\",\n        \"parameters\": {},\n        \"returns\": {}\n    }\n}",
    "description": {
        "function_snippet": "def update_website_with_publications():\n    \"\"\"\n    Automatically updates a personal website or blog with new publications.\n    \"\"\"",
        "function_description": {
            "name": "update_website_with_publications",
            "description": "Automatically updates a personal website or blog with new publications.",
            "parameters": {},
            "returns": {}
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_website_with_publications():\n    \"\"\"\n    Automatically updates a personal website or blog with new publications.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-10",
    "snippet": "def schedule_virtual_meetings(\n    research_collaborators: List[str],\n    meeting_dates: List[str],\n    meeting_times: List[str],\n    meeting_length: int,\n) -> List[str]:\n    \"\"\"\n    Schedule and conduct virtual meetings for research collaborations.\n\n    Parameters:\n        research_collaborators (List[str]): A list of names of research collaborators.\n        meeting_dates (List[str]): A list of meeting dates in YYYY-MM-DD format.\n        meeting_times (List[str]): A list of meeting times in HH:MM format.\n        meeting_length (int): The duration of each meeting in minutes.\n\n    Returns:\n        List[str]: A list of strings describing the scheduled virtual meetings.\n    \"\"\"\n",
    "completion-content": "{\n    \"function_snippet\": \"def schedule_virtual_meetings(\\nresearch_collaborators: List[str],\\nmeeting_dates: List[str],\\nmeeting_times: List[str],\\nmeeting_length: int,\\n) -> List[str]:\\n    \\\"\\\"\\\"\\n    Schedule and conduct virtual meetings for research collaborations.\\n\\n    Parameters:\\n        research_collaborators (List[str]): A list of names of research collaborators.\\n        meeting_dates (List[str]): A list of meeting dates in YYYY-MM-DD format.\\n        meeting_times (List[str]): A list of meeting times in HH:MM format.\\n        meeting_length (int): The duration of each meeting in minutes.\\n\\n    Returns:\\n        List[str]: A list of strings describing the scheduled virtual meetings.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"schedule_virtual_meetings\",\n        \"description\": \"Schedule and conduct virtual meetings for research collaborations.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"research_collaborators\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of names of research collaborators.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"meeting_dates\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of meeting dates in YYYY-MM-DD format.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"meeting_times\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of meeting times in HH:MM format.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"meeting_length\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The duration of each meeting in minutes.\"\n                }\n            },\n            \"required\": [\"research_collaborators\", \"meeting_dates\", \"meeting_times\", \"meeting_length\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"A list of strings describing the scheduled virtual meetings.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def schedule_virtual_meetings(\nresearch_collaborators: List[str],\nmeeting_dates: List[str],\nmeeting_times: List[str],\nmeeting_length: int,\n) -> List[str]:\n    \"\"\"\n    Schedule and conduct virtual meetings for research collaborations.\n\n    Parameters:\n        research_collaborators (List[str]): A list of names of research collaborators.\n        meeting_dates (List[str]): A list of meeting dates in YYYY-MM-DD format.\n        meeting_times (List[str]): A list of meeting times in HH:MM format.\n        meeting_length (int): The duration of each meeting in minutes.\n\n    Returns:\n        List[str]: A list of strings describing the scheduled virtual meetings.\n    \"\"\"",
        "function_description": {
            "name": "schedule_virtual_meetings",
            "description": "Schedule and conduct virtual meetings for research collaborations.",
            "parameters": {
                "type": "object",
                "properties": {
                    "research_collaborators": {
                        "type": "array",
                        "description": "A list of names of research collaborators.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_dates": {
                        "type": "array",
                        "description": "A list of meeting dates in YYYY-MM-DD format.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_times": {
                        "type": "array",
                        "description": "A list of meeting times in HH:MM format.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_length": {
                        "type": "integer",
                        "description": "The duration of each meeting in minutes."
                    }
                },
                "required": [
                    "research_collaborators",
                    "meeting_dates",
                    "meeting_times",
                    "meeting_length"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of strings describing the scheduled virtual meetings."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_virtual_meetings(\n    research_collaborators: List[str],\n    meeting_dates: List[str],\n    meeting_times: List[str],\n    meeting_length: int,\n) -> List[str]:\n    \"\"\"\n    Schedule and conduct virtual meetings for research collaborations.\n\n    Parameters:\n        research_collaborators (List[str]): A list of names of research collaborators.\n        meeting_dates (List[str]): A list of meeting dates in YYYY-MM-DD format.\n        meeting_times (List[str]): A list of meeting times in HH:MM format.\n        meeting_length (int): The duration of each meeting in minutes.\n\n    Returns:\n        List[str]: A list of strings describing the scheduled virtual meetings.\n    \"\"\"\n",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-11",
    "snippet": "def retrieve_real_time_analytics_or_citations(\n    work_id: str,\n    analytics_type: str\n) -> List[Dict[str, Union[str, int]]]:\n    \"\"\"\n    Retrieves real-time analytics or citations for published works.\n\n    Parameters:\n        work_id (str): The unique identifier of the published work.\n        analytics_type (str): The type of analytics or citations to retrieve.\n\n    Returns:\n        List[Dict[str, Union[str, int]]]: A list of dictionaries containing the requested analytics or citations.\n        Each dictionary should have specific keys depending on the analytics_type.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_real_time_analytics_or_citations(\\n    work_id: str,\\n    analytics_type: str\\n) -> List[Dict[str, Union[str, int]]]:\\n    \\\"\\\"\\\"\\n    Retrieves real-time analytics or citations for published works.\\n\\n    Parameters:\\n        work_id (str): The unique identifier of the published work.\\n        analytics_type (str): The type of analytics or citations to retrieve.\\n\\n    Returns:\\n        List[Dict[str, Union[str, int]]]: A list of dictionaries containing the requested analytics or citations.\\n        Each dictionary should have specific keys depending on the analytics_type.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"retrieve_real_time_analytics_or_citations\",\n        \"description\": \"Retrieves real-time analytics or citations for published works.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"work_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the published work.\"\n                },\n                \"analytics_type\": {\n                    \"type\": \"string\",\n                    \"description\": \"The type of analytics or citations to retrieve.\"\n                }\n            },\n            \"required\": [\"work_id\", \"analytics_type\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {},\n                \"additionalProperties\": {\n                    \"type\": [\"string\", \"integer\"]\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_real_time_analytics_or_citations(\n    work_id: str,\n    analytics_type: str\n) -> List[Dict[str, Union[str, int]]]:\n    \"\"\"\n    Retrieves real-time analytics or citations for published works.\n\n    Parameters:\n        work_id (str): The unique identifier of the published work.\n        analytics_type (str): The type of analytics or citations to retrieve.\n\n    Returns:\n        List[Dict[str, Union[str, int]]]: A list of dictionaries containing the requested analytics or citations.\n        Each dictionary should have specific keys depending on the analytics_type.\n    \"\"\"\n",
        "function_description": {
            "name": "retrieve_real_time_analytics_or_citations",
            "description": "Retrieves real-time analytics or citations for published works.",
            "parameters": {
                "type": "object",
                "properties": {
                    "work_id": {
                        "type": "string",
                        "description": "The unique identifier of the published work."
                    },
                    "analytics_type": {
                        "type": "string",
                        "description": "The type of analytics or citations to retrieve."
                    }
                },
                "required": [
                    "work_id",
                    "analytics_type"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_real_time_analytics_or_citations(\n    work_id: str,\n    analytics_type: str\n) -> List[Dict[str, Union[str, int]]]:\n    \"\"\"\n    Retrieves real-time analytics or citations for published works.\n\n    Parameters:\n        work_id (str): The unique identifier of the published work.\n        analytics_type (str): The type of analytics or citations to retrieve.\n\n    Returns:\n        List[Dict[str, Union[str, int]]]: A list of dictionaries containing the requested analytics or citations.\n        Each dictionary should have specific keys depending on the analytics_type.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-12",
    "snippet": "def run_tests_and_validations() -> None:\n    \"\"\"\n    Run automated code tests and validations for published algorithms.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def run_tests_and_validations() -> None:\\n    \\\"\\\"\\\"\\n    Run automated code tests and validations for published algorithms.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"run_tests_and_validations\",\n        \"description\": \"Run automated code tests and validations for published algorithms.\",\n        \"parameters\": {},\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def run_tests_and_validations() -> None:\n    \"\"\"\n    Run automated code tests and validations for published algorithms.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
        "function_description": {
            "name": "run_tests_and_validations",
            "description": "Run automated code tests and validations for published algorithms.",
            "parameters": {},
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def run_tests_and_validations() -> None:\n    \"\"\"\n    Run automated code tests and validations for published algorithms.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-13",
    "snippet": "def analyze_web_traffic() -> None:\n    \"\"\"\n    Analyzes web traffic and interaction on research portfolio website.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def analyze_web_traffic() -> None:\\n    \\\"\\\"\\\"\\n    Analyzes web traffic and interaction on research portfolio website.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"analyze_web_traffic\",\n        \"description\": \"Analyzes web traffic and interaction on research portfolio website.\",\n        \"parameters\": {},\n        \"returns\": {}\n    }\n}",
    "description": {
        "function_snippet": "def analyze_web_traffic() -> None:\n    \"\"\"\n    Analyzes web traffic and interaction on research portfolio website.\n    \"\"\"\n",
        "function_description": {
            "name": "analyze_web_traffic",
            "description": "Analyzes web traffic and interaction on research portfolio website.",
            "parameters": {},
            "returns": {}
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def analyze_web_traffic() -> None:\n    \"\"\"\n    Analyzes web traffic and interaction on research portfolio website.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-14",
    "snippet": "def convert_results(results: pd.DataFrame, output_format: str) -> str:\n    \"\"\"\n    Convert experimental results into formats suitable for academic publishing.\n\n    Parameters:\n        results (pd.DataFrame): A pandas DataFrame containing the experimental results.\n        output_format (str): The desired output format for the converted results.\n\n    Returns:\n        str: The converted results in the specified output format.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def convert_results(results: pd.DataFrame, output_format: str) -> str:\",\n    \"function_description\": {\n        \"name\": \"convert_results\",\n        \"description\": \"Convert experimental results into formats suitable for academic publishing.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"results\": {\n                    \"type\": \"object\",\n                    \"description\": \"A pandas DataFrame containing the experimental results.\"\n                },\n                \"output_format\": {\n                    \"type\": \"string\",\n                    \"description\": \"The desired output format for the converted results.\"\n                }\n            },\n            \"required\": [\"results\", \"output_format\"]\n        },\n        \"returns\": {\n            \"type\": \"string\",\n            \"description\": \"The converted results in the specified output format.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def convert_results(results: pd.DataFrame, output_format: str) -> str:",
        "function_description": {
            "name": "convert_results",
            "description": "Convert experimental results into formats suitable for academic publishing.",
            "parameters": {
                "type": "object",
                "properties": {
                    "results": {
                        "type": "object",
                        "description": "A pandas DataFrame containing the experimental results."
                    },
                    "output_format": {
                        "type": "string",
                        "description": "The desired output format for the converted results."
                    }
                },
                "required": [
                    "results",
                    "output_format"
                ]
            },
            "returns": {
                "type": "string",
                "description": "The converted results in the specified output format."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def convert_results(results: pd.DataFrame, output_format: str) -> str:\n    \"\"\"\n    Convert experimental results into formats suitable for academic publishing.\n\n    Parameters:\n        results (pd.DataFrame): A pandas DataFrame containing the experimental results.\n        output_format (str): The desired output format for the converted results.\n\n    Returns:\n        str: The converted results in the specified output format.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-15",
    "snippet": "def scrape_job_boards() -> List[Dict[str, str]]:\n    \"\"\"\n    Scrapes online job boards for research positions or grants in the field of AI.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing job details.\n                              Each dictionary should have 'title', 'company', and 'location' keys.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def scrape_job_boards() -> List[Dict[str, str]]:\\n    \\\"\\\"\\\"\\n    Scrapes online job boards for research positions or grants in the field of AI.\\n\\n    Returns:\\n        List[Dict[str, str]]: A list of dictionaries containing job details.\\n                              Each dictionary should have 'title', 'company', and 'location' keys.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"scrape_job_boards\",\n        \"description\": \"Scrapes online job boards for research positions or grants in the field of AI.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {}\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\n                            \"type\": \"string\"\n                        },\n                        \"company\": {\n                            \"type\": \"string\"\n                        },\n                        \"location\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"title\", \"company\", \"location\"]\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def scrape_job_boards() -> List[Dict[str, str]]:\n    \"\"\"\n    Scrapes online job boards for research positions or grants in the field of AI.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing job details.\n                              Each dictionary should have 'title', 'company', and 'location' keys.\n    \"\"\"\n",
        "function_description": {
            "name": "scrape_job_boards",
            "description": "Scrapes online job boards for research positions or grants in the field of AI.",
            "parameters": {
                "type": "object",
                "properties": {}
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "company": {
                                "type": "string"
                            },
                            "location": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "title",
                            "company",
                            "location"
                        ]
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def scrape_job_boards() -> List[Dict[str, str]]:\n    \"\"\"\n    Scrapes online job boards for research positions or grants in the field of AI.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing job details.\n                              Each dictionary should have 'title', 'company', and 'location' keys.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-16",
    "snippet": "def follow_ai_influencers() -> List[str]:\n    \"\"\"\n    Automatically follows and collects posts from AI influencers or research leaders on social media platforms.\n\n    Returns:\n        List[str]: A list of usernames or handles of the AI influencers or research leaders.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def follow_ai_influencers() -> List[str]:\\n    \\\"\\\"\\\"\\n    Automatically follows and collects posts from AI influencers or research leaders on social media platforms.\\n\\n    Returns:\\n        List[str]: A list of usernames or handles of the AI influencers or research leaders.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"follow_ai_influencers\",\n        \"description\": \"Automatically follows and collects posts from AI influencers or research leaders on social media platforms.\",\n        \"parameters\": {\n            \"type\": \"None\"\n        },\n        \"returns\": {\n            \"type\": \"List[str]\",\n            \"description\": \"A list of usernames or handles of the AI influencers or research leaders.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def follow_ai_influencers() -> List[str]:\n    \"\"\"\n    Automatically follows and collects posts from AI influencers or research leaders on social media platforms.\n\n    Returns:\n        List[str]: A list of usernames or handles of the AI influencers or research leaders.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "follow_ai_influencers",
            "description": "Automatically follows and collects posts from AI influencers or research leaders on social media platforms.",
            "parameters": {
                "type": "None"
            },
            "returns": {
                "type": "List[str]",
                "description": "A list of usernames or handles of the AI influencers or research leaders."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def follow_ai_influencers() -> List[str]:\n    \"\"\"\n    Automatically follows and collects posts from AI influencers or research leaders on social media platforms.\n\n    Returns:\n        List[str]: A list of usernames or handles of the AI influencers or research leaders.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-17",
    "snippet": "def generate_summary(\n    research_papers: List[str],\n    num_topics: int,\n) -> List[str]:\n    \"\"\"\n    Generates automated summaries of trending AI research topics.\n\n    Parameters:\n        research_papers (List[str]): A list of research papers.\n        num_topics (int): The number of topics to generate summaries for.\n\n    Returns:\n        List[str]: A list of automated summaries of trending AI research topics.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def generate_summary(\\n    research_papers: List[str],\\n    num_topics: int,\\n) -> List[str]:\\n    \\\"\\\"\\\"\\n    Generates automated summaries of trending AI research topics.\\n\\n    Parameters:\\n        research_papers (List[str]): A list of research papers.\\n        num_topics (int): The number of topics to generate summaries for.\\n\\n    Returns:\\n        List[str]: A list of automated summaries of trending AI research topics.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"generate_summary\",\n        \"description\": \"Generates automated summaries of trending AI research topics.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"research_papers\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of research papers.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"num_topics\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The number of topics to generate summaries for.\"\n                }\n            },\n            \"required\": [\"research_papers\", \"num_topics\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"A list of automated summaries of trending AI research topics.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def generate_summary(\n    research_papers: List[str],\n    num_topics: int,\n) -> List[str]:\n    \"\"\"\n    Generates automated summaries of trending AI research topics.\n\n    Parameters:\n        research_papers (List[str]): A list of research papers.\n        num_topics (int): The number of topics to generate summaries for.\n\n    Returns:\n        List[str]: A list of automated summaries of trending AI research topics.\n    \"\"\"\n",
        "function_description": {
            "name": "generate_summary",
            "description": "Generates automated summaries of trending AI research topics.",
            "parameters": {
                "type": "object",
                "properties": {
                    "research_papers": {
                        "type": "array",
                        "description": "A list of research papers.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "num_topics": {
                        "type": "integer",
                        "description": "The number of topics to generate summaries for."
                    }
                },
                "required": [
                    "research_papers",
                    "num_topics"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of automated summaries of trending AI research topics."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_summary(\n    research_papers: List[str],\n    num_topics: int,\n) -> List[str]:\n    \"\"\"\n    Generates automated summaries of trending AI research topics.\n\n    Parameters:\n        research_papers (List[str]): A list of research papers.\n        num_topics (int): The number of topics to generate summaries for.\n\n    Returns:\n        List[str]: A list of automated summaries of trending AI research topics.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-18",
    "snippet": "def translate_research_papers(\n        papers: List[str],\n        languages: List[str]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Translates research papers into multiple languages.\n\n    Parameters:\n        papers (List[str]): A list of research papers or articles to be translated.\n        languages (List[str]): A list of target languages to translate the papers into.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with languages as keys and translated papers as values.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def translate_research_papers(\\n    papers: List[str],\\n    languages: List[str]\\n) -> Dict[str, List[str]]:\\n    \\\"\\\"\\\"\\n    Translates research papers into multiple languages.\\n\\n    Parameters:\\n        papers (List[str]): A list of research papers or articles to be translated.\\n        languages (List[str]): A list of target languages to translate the papers into.\\n\\n    Returns:\\n        Dict[str, List[str]]: A dictionary with languages as keys and translated papers as values.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"translate_research_papers\",\n        \"description\": \"Translates research papers into multiple languages.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"papers\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of research papers or articles to be translated.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"languages\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of target languages to translate the papers into.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"papers\", \"languages\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"language\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def translate_research_papers(\n    papers: List[str],\n    languages: List[str]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Translates research papers into multiple languages.\n\n    Parameters:\n        papers (List[str]): A list of research papers or articles to be translated.\n        languages (List[str]): A list of target languages to translate the papers into.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with languages as keys and translated papers as values.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "translate_research_papers",
            "description": "Translates research papers into multiple languages.",
            "parameters": {
                "type": "object",
                "properties": {
                    "papers": {
                        "type": "array",
                        "description": "A list of research papers or articles to be translated.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "languages": {
                        "type": "array",
                        "description": "A list of target languages to translate the papers into.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "papers",
                    "languages"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def translate_research_papers(\n        papers: List[str],\n        languages: List[str]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Translates research papers into multiple languages.\n\n    Parameters:\n        papers (List[str]): A list of research papers or articles to be translated.\n        languages (List[str]): A list of target languages to translate the papers into.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with languages as keys and translated papers as values.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-19",
    "snippet": "def automate_backup(\n    data_folder: str,\n    code_folder: str,\n    backup_folder: str,\n) -> None:\n    \"\"\"\n    Automates the backup of research data and code.\n\n    Parameters:\n        data_folder (str): The path to the folder containing research data.\n        code_folder (str): The path to the folder containing code.\n        backup_folder (str): The path to the folder where the backup will be stored.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def automate_backup(\\n    data_folder: str,\\n    code_folder: str,\\n    backup_folder: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Automates the backup of research data and code.\\n\\n    Parameters:\\n        data_folder (str): The path to the folder containing research data.\\n        code_folder (str): The path to the folder containing code.\\n        backup_folder (str): The path to the folder where the backup will be stored.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"automate_backup\",\n        \"description\": \"Automates the backup of research data and code.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"data_folder\": {\n                    \"type\": \"string\",\n                    \"description\": \"The path to the folder containing research data.\"\n                },\n                \"code_folder\": {\n                    \"type\": \"string\",\n                    \"description\": \"The path to the folder containing code.\"\n                },\n                \"backup_folder\": {\n                    \"type\": \"string\",\n                    \"description\": \"The path to the folder where the backup will be stored.\"\n                }\n            },\n            \"required\": [\"data_folder\", \"code_folder\", \"backup_folder\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def automate_backup(\n    data_folder: str,\n    code_folder: str,\n    backup_folder: str,\n) -> None:\n    \"\"\"\n    Automates the backup of research data and code.\n\n    Parameters:\n        data_folder (str): The path to the folder containing research data.\n        code_folder (str): The path to the folder containing code.\n        backup_folder (str): The path to the folder where the backup will be stored.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "automate_backup",
            "description": "Automates the backup of research data and code.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data_folder": {
                        "type": "string",
                        "description": "The path to the folder containing research data."
                    },
                    "code_folder": {
                        "type": "string",
                        "description": "The path to the folder containing code."
                    },
                    "backup_folder": {
                        "type": "string",
                        "description": "The path to the folder where the backup will be stored."
                    }
                },
                "required": [
                    "data_folder",
                    "code_folder",
                    "backup_folder"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def automate_backup(\n    data_folder: str,\n    code_folder: str,\n    backup_folder: str,\n) -> None:\n    \"\"\"\n    Automates the backup of research data and code.\n\n    Parameters:\n        data_folder (str): The path to the folder containing research data.\n        code_folder (str): The path to the folder containing code.\n        backup_folder (str): The path to the folder where the backup will be stored.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-20",
    "snippet": "def create_visuals(\n    data: Any,\n    algorithm: str,\n    presentation_type: str,\n    slide_count: int,\n) -> None:\n    \"\"\"\n    Create visual representations of data sets or algorithms for presentations.\n\n    Parameters:\n        data (Any): The data set or algorithm to be visualized.\n        algorithm (str): The name of the algorithm (if applicable).\n        presentation_type (str): The type of presentation (e.g., bar chart, line graph).\n        slide_count (int): The number of slides to be created.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def create_visuals(\\n    data: Any,\\n    algorithm: str,\\n    presentation_type: str,\\n    slide_count: int,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Create visual representations of data sets or algorithms for presentations.\\n\\n    Parameters:\\n        data (Any): The data set or algorithm to be visualized.\\n        algorithm (str): The name of the algorithm (if applicable).\\n        presentation_type (str): The type of presentation (e.g., bar chart, line graph).\\n        slide_count (int): The number of slides to be created.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"create_visuals\",\n        \"description\": \"Create visual representations of data sets or algorithms for presentations.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"data\": {\n                    \"type\": \"any\",\n                    \"description\": \"The data set or algorithm to be visualized.\"\n                },\n                \"algorithm\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the algorithm (if applicable).\"\n                },\n                \"presentation_type\": {\n                    \"type\": \"string\",\n                    \"description\": \"The type of presentation (e.g., bar chart, line graph).\"\n                },\n                \"slide_count\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The number of slides to be created.\"\n                }\n            },\n            \"required\": [\"data\", \"algorithm\", \"presentation_type\", \"slide_count\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_visuals(\n    data: Any,\n    algorithm: str,\n    presentation_type: str,\n    slide_count: int,\n) -> None:\n    \"\"\"\n    Create visual representations of data sets or algorithms for presentations.\n\n    Parameters:\n        data (Any): The data set or algorithm to be visualized.\n        algorithm (str): The name of the algorithm (if applicable).\n        presentation_type (str): The type of presentation (e.g., bar chart, line graph).\n        slide_count (int): The number of slides to be created.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "create_visuals",
            "description": "Create visual representations of data sets or algorithms for presentations.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "any",
                        "description": "The data set or algorithm to be visualized."
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The name of the algorithm (if applicable)."
                    },
                    "presentation_type": {
                        "type": "string",
                        "description": "The type of presentation (e.g., bar chart, line graph)."
                    },
                    "slide_count": {
                        "type": "integer",
                        "description": "The number of slides to be created."
                    }
                },
                "required": [
                    "data",
                    "algorithm",
                    "presentation_type",
                    "slide_count"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_visuals(\n    data: Any,\n    algorithm: str,\n    presentation_type: str,\n    slide_count: int,\n) -> None:\n    \"\"\"\n    Create visual representations of data sets or algorithms for presentations.\n\n    Parameters:\n        data (Any): The data set or algorithm to be visualized.\n        algorithm (str): The name of the algorithm (if applicable).\n        presentation_type (str): The type of presentation (e.g., bar chart, line graph).\n        slide_count (int): The number of slides to be created.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "ai_research-21",
    "snippet": "def generate_newsletter() -> str:\n    \"\"\"\n    Generates a monthly newsletter on AI research findings.\n\n    Returns:\n        str: The generated newsletter.\n    \"\"\"\n    # Code implementation to generate the newsletter goes here",
    "completion-content": "{\n    \"function_snippet\": \"def generate_newsletter() -> str:\\n    \\\"\\\"\\\"\\n    Generates a monthly newsletter on AI research findings.\\n\\n    Returns:\\n        str: The generated newsletter.\\n    \\\"\\\"\\\"\\n    # Code implementation to generate the newsletter goes here\",\n    \"function_description\": {\n        \"name\": \"generate_newsletter\",\n        \"description\": \"Generates a monthly newsletter on AI research findings.\",\n        \"parameters\": null,\n        \"returns\": {\n            \"type\": \"string\",\n            \"description\": \"The generated newsletter.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def generate_newsletter() -> str:\n    \"\"\"\n    Generates a monthly newsletter on AI research findings.\n\n    Returns:\n        str: The generated newsletter.\n    \"\"\"\n    # Code implementation to generate the newsletter goes here",
        "function_description": {
            "name": "generate_newsletter",
            "description": "Generates a monthly newsletter on AI research findings.",
            "parameters": null,
            "returns": {
                "type": "string",
                "description": "The generated newsletter."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_newsletter() -> str:\n    \"\"\"\n    Generates a monthly newsletter on AI research findings.\n\n    Returns:\n        str: The generated newsletter.\n    \"\"\"\n    # Code implementation to generate the newsletter goes here",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}

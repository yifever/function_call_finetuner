user: 
Below is a snippet of a python function:
    def conduct_literature_search(query: str, databases: List[str]) -> List[str]:
    """
    Conducts a literature search on AI papers from academic databases.

    Parameters:
        query (str): The search query.
        databases (List[str]): A list of academic databases to search.

    Returns:
        List[str]: A list of paper titles that match the search query.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def conduct_literature_search(query: str, databases: List[str]) -> List[str]:\n    \"\"\"\n    Conducts a literature search on AI papers from academic databases.\n\n    Parameters:\n        query (str): The search query.\n        databases (List[str]): A list of academic databases to search.\n\n    Returns:\n        List[str]: A list of paper titles that match the search query.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "conduct_literature_search",
        "description": "Conducts a literature search on AI papers from academic databases.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The search query."
                },
                "databases": {
                    "type": "array",
                    "description": "A list of academic databases to search.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["query", "databases"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of paper titles that match the search query."
        }
    }
}

user: 
Below is a snippet of a python function:
    def retrieve_text_from_papers(paper_list: List[str]) -> List[str]:
    """
    Retrieves text from specified academic papers for analysis.

    Parameters:
        paper_list (List[str]): A list of paper names or IDs.

    Returns:
        List[str]: A list of text contents retrieved from the specified academic papers.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def retrieve_text_from_papers(paper_list: List[str]) -> List[str]:\n    \"\"\"\n    Retrieves text from specified academic papers for analysis.\n\n    Parameters:\n        paper_list (List[str]): A list of paper names or IDs.\n\n    Returns:\n        List[str]: A list of text contents retrieved from the specified academic papers.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "retrieve_text_from_papers",
        "description": "Retrieves text from specified academic papers for analysis.",
        "parameters": {
            "type": "object",
            "properties": {
                "paper_list": {
                    "type": "array",
                    "description": "A list of paper names or IDs.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["paper_list"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of text contents retrieved from the specified academic papers."
        }
    }
}

user: 
Below is a snippet of a python function:
    def submit_research_papers(
    papers: List[str],
    server: str,
    journals: List[str],
) -> bool:
    """
    Submits research papers or articles to preprint servers or journals.

    Parameters:
        papers (List[str]): A list of strings representing the research papers or articles.
        server (str): The preprint server to submit the papers to.
        journals (List[str]): A list of strings representing the journals to submit the papers to.

    Returns:
        bool: True if the papers were successfully submitted, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def submit_research_papers(\n    papers: List[str],\n    server: str,\n    journals: List[str],\n) -> bool:\n    \"\"\"\n    Submits research papers or articles to preprint servers or journals.\n\n    Parameters:\n        papers (List[str]): A list of strings representing the research papers or articles.\n        server (str): The preprint server to submit the papers to.\n        journals (List[str]): A list of strings representing the journals to submit the papers to.\n\n    Returns:\n        bool: True if the papers were successfully submitted, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "submit_research_papers",
        "description": "Submits research papers or articles to preprint servers or journals.",
        "parameters": {
            "type": "object",
            "properties": {
                "papers": {
                    "type": "array",
                    "description": "A list of strings representing the research papers or articles.",
                    "items": {
                        "type": "string"
                    }
                },
                "server": {
                    "type": "string",
                    "description": "The preprint server to submit the papers to."
                },
                "journals": {
                    "type": "array",
                    "description": "A list of strings representing the journals to submit the papers to.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["papers", "server", "journals"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the papers were successfully submitted, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def run_experiments_on_cloud() -> None:
    """
    Runs code for machine learning experiments on cloud-based compute resources.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def run_experiments_on_cloud() -> None:\n    \"\"\"\n    Runs code for machine learning experiments on cloud-based compute resources.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "run_experiments_on_cloud",
        "description": "Runs code for machine learning experiments on cloud-based compute resources.",
        "parameters": {},
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def fetch_and_preprocess_datasets(
    repository_url: str,
    access_token: str,
    dataset_names: List[str]
) -> List[pd.DataFrame]:
    """
    Fetches and preprocesses datasets from public or private repositories.

    Parameters:
        repository_url (str): The URL of the repository.
        access_token (str): The access token for accessing private repositories.
        dataset_names (List[str]): A list of names of datasets to fetch and preprocess.

    Returns:
        List[pd.DataFrame]: A list of pandas DataFrames containing the fetched and preprocessed datasets.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def fetch_and_preprocess_datasets(\n    repository_url: str,\n    access_token: str,\n    dataset_names: List[str]\n) -> List[pd.DataFrame]:\n    \"\"\"\n    Fetches and preprocesses datasets from public or private repositories.\n\n    Parameters:\n        repository_url (str): The URL of the repository.\n        access_token (str): The access token for accessing private repositories.\n        dataset_names (List[str]): A list of names of datasets to fetch and preprocess.\n\n    Returns:\n        List[pd.DataFrame]: A list of pandas DataFrames containing the fetched and preprocessed datasets.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "fetch_and_preprocess_datasets",
        "description": "Fetches and preprocesses datasets from public or private repositories.",
        "parameters": {
            "type": "object",
            "properties": {
                "repository_url": {
                    "type": "string",
                    "description": "The URL of the repository."
                },
                "access_token": {
                    "type": "string",
                    "description": "The access token for accessing private repositories."
                },
                "dataset_names": {
                    "type": "array",
                    "description": "A list of names of datasets to fetch and preprocess.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["repository_url", "access_token", "dataset_names"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "object",
                "description": "A pandas DataFrame containing the fetched and preprocessed dataset."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def hyperparameter_tuning(
    model: Any,
    X: Any,
    y: Any,
    params: Dict[str, Any],
    scoring: str,
    cv: int,
) -> Dict[str, Any]:
    """
    Performs hyperparameter tuning for machine learning models.

    Parameters:
        model (Any): The machine learning model to tune.
        X (Any): The input features.
        y (Any): The target variable.
        params (Dict[str, Any]): A dictionary of hyperparameters to tune.
        scoring (str): The scoring metric to use for evaluation.
        cv (int): The number of cross-validation folds.

    Returns:
        Dict[str, Any]: A dictionary with 'best_params' as a key and the best hyperparameters as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def hyperparameter_tuning(\n    model: Any,\n    X: Any,\n    y: Any,\n    params: Dict[str, Any],\n    scoring: str,\n    cv: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs hyperparameter tuning for machine learning models.\n\n    Parameters:\n        model (Any): The machine learning model to tune.\n        X (Any): The input features.\n        y (Any): The target variable.\n        params (Dict[str, Any]): A dictionary of hyperparameters to tune.\n        scoring (str): The scoring metric to use for evaluation.\n        cv (int): The number of cross-validation folds.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'best_params' as a key and the best hyperparameters as a value.\n    \"\"\"\n\n    ",
    "function_description": {
        "name": "hyperparameter_tuning",
        "description": "Performs hyperparameter tuning for machine learning models.",
        "parameters": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "any",
                    "description": "The machine learning model to tune."
                },
                "X": {
                    "type": "any",
                    "description": "The input features."
                },
                "y": {
                    "type": "any",
                    "description": "The target variable."
                },
                "params": {
                    "type": "object",
                    "description": "A dictionary of hyperparameters to tune.",
                    "properties": {
                        "type": "any"
                    }
                },
                "scoring": {
                    "type": "string",
                    "description": "The scoring metric to use for evaluation."
                },
                "cv": {
                    "type": "integer",
                    "description": "The number of cross-validation folds."
                }
            },
            "required": ["model", "X", "y", "params", "scoring", "cv"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "best_params": {
                    "type": "any",
                    "description": "The best hyperparameters."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def visualize_model_performance(
    metrics: List[str],
    results: Dict[str, float],
) -> None:
    """
    Visualizes the model performance metrics and experimental results.

    Parameters:
        metrics (List[str]): A list of performance metrics.
        results (Dict[str, float]): A dictionary containing experimental results.
                                    Each key is a metric and the value is the corresponding result.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "    def visualize_model_performance(\n    metrics: List[str],\n    results: Dict[str, float],\n) -> None:\n    \n    \"\"\"\n    Visualizes the model performance metrics and experimental results.\n\n    Parameters:\n        metrics (List[str]): A list of performance metrics.\n        results (Dict[str, float]): A dictionary containing experimental results.\n                                    Each key is a metric and the value is the corresponding result.\n\n    Returns:\n        None\n    \"\"\"\n    ",
    "function_description": {
        "name": "visualize_model_performance",
        "description": "Visualizes the model performance metrics and experimental results.",
        "parameters": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "array",
                    "description": "A list of performance metrics.",
                    "items": {
                        "type": "string"
                    }
                },
                "results": {
                    "type": "object",
                    "description": "A dictionary containing experimental results. Each key is a metric and the value is the corresponding result.",
                    "properties": {
                        "metric": {
                            "type": "float"
                        }
                    }
                }
            },
            "required": ["metrics", "results"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def sentiment_analysis_ai_technologies() -> None:
    """
    Run sentiment analysis on social media posts related to AI technologies.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def sentiment_analysis_ai_technologies() -> None:\n    \"\"\"\n    Run sentiment analysis on social media posts related to AI technologies.\n\n    Returns:\n        None\n    \"\"\"",
    "function_description": {
        "name": "sentiment_analysis_ai_technologies",
        "description": "Run sentiment analysis on social media posts related to AI technologies.",
        "parameters": {},
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def update_website_with_publications():
    """
    Automatically updates a personal website or blog with new publications.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def update_website_with_publications():\n    \"\"\"\n    Automatically updates a personal website or blog with new publications.\n    \"\"\"",
    "function_description": {
        "name": "update_website_with_publications",
        "description": "Automatically updates a personal website or blog with new publications.",
        "parameters": {},
        "returns": {}
    }
}

user: 
Below is a snippet of a python function:
    def schedule_virtual_meetings(
    research_collaborators: List[str],
    meeting_dates: List[str],
    meeting_times: List[str],
    meeting_length: int,
) -> List[str]:
    """
    Schedule and conduct virtual meetings for research collaborations.

    Parameters:
        research_collaborators (List[str]): A list of names of research collaborators.
        meeting_dates (List[str]): A list of meeting dates in YYYY-MM-DD format.
        meeting_times (List[str]): A list of meeting times in HH:MM format.
        meeting_length (int): The duration of each meeting in minutes.

    Returns:
        List[str]: A list of strings describing the scheduled virtual meetings.
    """
    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def schedule_virtual_meetings(\nresearch_collaborators: List[str],\nmeeting_dates: List[str],\nmeeting_times: List[str],\nmeeting_length: int,\n) -> List[str]:\n    \"\"\"\n    Schedule and conduct virtual meetings for research collaborations.\n\n    Parameters:\n        research_collaborators (List[str]): A list of names of research collaborators.\n        meeting_dates (List[str]): A list of meeting dates in YYYY-MM-DD format.\n        meeting_times (List[str]): A list of meeting times in HH:MM format.\n        meeting_length (int): The duration of each meeting in minutes.\n\n    Returns:\n        List[str]: A list of strings describing the scheduled virtual meetings.\n    \"\"\"",
    "function_description": {
        "name": "schedule_virtual_meetings",
        "description": "Schedule and conduct virtual meetings for research collaborations.",
        "parameters": {
            "type": "object",
            "properties": {
                "research_collaborators": {
                    "type": "array",
                    "description": "A list of names of research collaborators.",
                    "items": {
                        "type": "string"
                    }
                },
                "meeting_dates": {
                    "type": "array",
                    "description": "A list of meeting dates in YYYY-MM-DD format.",
                    "items": {
                        "type": "string"
                    }
                },
                "meeting_times": {
                    "type": "array",
                    "description": "A list of meeting times in HH:MM format.",
                    "items": {
                        "type": "string"
                    }
                },
                "meeting_length": {
                    "type": "integer",
                    "description": "The duration of each meeting in minutes."
                }
            },
            "required": ["research_collaborators", "meeting_dates", "meeting_times", "meeting_length"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of strings describing the scheduled virtual meetings."
        }
    }
}

user: 
Below is a snippet of a python function:
    def retrieve_real_time_analytics_or_citations(
    work_id: str,
    analytics_type: str
) -> List[Dict[str, Union[str, int]]]:
    """
    Retrieves real-time analytics or citations for published works.

    Parameters:
        work_id (str): The unique identifier of the published work.
        analytics_type (str): The type of analytics or citations to retrieve.

    Returns:
        List[Dict[str, Union[str, int]]]: A list of dictionaries containing the requested analytics or citations.
        Each dictionary should have specific keys depending on the analytics_type.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def retrieve_real_time_analytics_or_citations(\n    work_id: str,\n    analytics_type: str\n) -> List[Dict[str, Union[str, int]]]:\n    \"\"\"\n    Retrieves real-time analytics or citations for published works.\n\n    Parameters:\n        work_id (str): The unique identifier of the published work.\n        analytics_type (str): The type of analytics or citations to retrieve.\n\n    Returns:\n        List[Dict[str, Union[str, int]]]: A list of dictionaries containing the requested analytics or citations.\n        Each dictionary should have specific keys depending on the analytics_type.\n    \"\"\"\n",
    "function_description": {
        "name": "retrieve_real_time_analytics_or_citations",
        "description": "Retrieves real-time analytics or citations for published works.",
        "parameters": {
            "type": "object",
            "properties": {
                "work_id": {
                    "type": "string",
                    "description": "The unique identifier of the published work."
                },
                "analytics_type": {
                    "type": "string",
                    "description": "The type of analytics or citations to retrieve."
                }
            },
            "required": ["work_id", "analytics_type"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {},
                "additionalProperties": {
                    "type": ["string", "integer"]
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def run_tests_and_validations() -> None:
    """
    Run automated code tests and validations for published algorithms.

    Returns:
        None
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def run_tests_and_validations() -> None:\n    \"\"\"\n    Run automated code tests and validations for published algorithms.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "function_description": {
        "name": "run_tests_and_validations",
        "description": "Run automated code tests and validations for published algorithms.",
        "parameters": {},
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def analyze_web_traffic() -> None:
    """
    Analyzes web traffic and interaction on research portfolio website.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def analyze_web_traffic() -> None:\n    \"\"\"\n    Analyzes web traffic and interaction on research portfolio website.\n    \"\"\"\n",
    "function_description": {
        "name": "analyze_web_traffic",
        "description": "Analyzes web traffic and interaction on research portfolio website.",
        "parameters": {},
        "returns": {}
    }
}

user: 
Below is a snippet of a python function:
    def convert_results(results: pd.DataFrame, output_format: str) -> str:
    """
    Convert experimental results into formats suitable for academic publishing.

    Parameters:
        results (pd.DataFrame): A pandas DataFrame containing the experimental results.
        output_format (str): The desired output format for the converted results.

    Returns:
        str: The converted results in the specified output format.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def convert_results(results: pd.DataFrame, output_format: str) -> str:",
    "function_description": {
        "name": "convert_results",
        "description": "Convert experimental results into formats suitable for academic publishing.",
        "parameters": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "object",
                    "description": "A pandas DataFrame containing the experimental results."
                },
                "output_format": {
                    "type": "string",
                    "description": "The desired output format for the converted results."
                }
            },
            "required": ["results", "output_format"]
        },
        "returns": {
            "type": "string",
            "description": "The converted results in the specified output format."
        }
    }
}

user: 
Below is a snippet of a python function:
    def scrape_job_boards() -> List[Dict[str, str]]:
    """
    Scrapes online job boards for research positions or grants in the field of AI.

    Returns:
        List[Dict[str, str]]: A list of dictionaries containing job details.
                              Each dictionary should have 'title', 'company', and 'location' keys.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def scrape_job_boards() -> List[Dict[str, str]]:\n    \"\"\"\n    Scrapes online job boards for research positions or grants in the field of AI.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing job details.\n                              Each dictionary should have 'title', 'company', and 'location' keys.\n    \"\"\"\n",
    "function_description": {
        "name": "scrape_job_boards",
        "description": "Scrapes online job boards for research positions or grants in the field of AI.",
        "parameters": {
            "type": "object",
            "properties": {}
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "title": {
                            "type": "string"
                        },
                        "company": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        }
                    },
                    "required": ["title", "company", "location"]
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def follow_ai_influencers() -> List[str]:
    """
    Automatically follows and collects posts from AI influencers or research leaders on social media platforms.

    Returns:
        List[str]: A list of usernames or handles of the AI influencers or research leaders.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def follow_ai_influencers() -> List[str]:\n    \"\"\"\n    Automatically follows and collects posts from AI influencers or research leaders on social media platforms.\n\n    Returns:\n        List[str]: A list of usernames or handles of the AI influencers or research leaders.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "follow_ai_influencers",
        "description": "Automatically follows and collects posts from AI influencers or research leaders on social media platforms.",
        "parameters": {
            "type": "None"
        },
        "returns": {
            "type": "List[str]",
            "description": "A list of usernames or handles of the AI influencers or research leaders."
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_summary(
    research_papers: List[str],
    num_topics: int,
) -> List[str]:
    """
    Generates automated summaries of trending AI research topics.

    Parameters:
        research_papers (List[str]): A list of research papers.
        num_topics (int): The number of topics to generate summaries for.

    Returns:
        List[str]: A list of automated summaries of trending AI research topics.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_summary(\n    research_papers: List[str],\n    num_topics: int,\n) -> List[str]:\n    \"\"\"\n    Generates automated summaries of trending AI research topics.\n\n    Parameters:\n        research_papers (List[str]): A list of research papers.\n        num_topics (int): The number of topics to generate summaries for.\n\n    Returns:\n        List[str]: A list of automated summaries of trending AI research topics.\n    \"\"\"\n",
    "function_description": {
        "name": "generate_summary",
        "description": "Generates automated summaries of trending AI research topics.",
        "parameters": {
            "type": "object",
            "properties": {
                "research_papers": {
                    "type": "array",
                    "description": "A list of research papers.",
                    "items": {
                        "type": "string"
                    }
                },
                "num_topics": {
                    "type": "integer",
                    "description": "The number of topics to generate summaries for."
                }
            },
            "required": ["research_papers", "num_topics"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of automated summaries of trending AI research topics."
        }
    }
}

user: 
Below is a snippet of a python function:
    def translate_research_papers(
        papers: List[str],
        languages: List[str]
) -> Dict[str, List[str]]:
    """
    Translates research papers into multiple languages.

    Parameters:
        papers (List[str]): A list of research papers or articles to be translated.
        languages (List[str]): A list of target languages to translate the papers into.

    Returns:
        Dict[str, List[str]]: A dictionary with languages as keys and translated papers as values.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def translate_research_papers(\n    papers: List[str],\n    languages: List[str]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Translates research papers into multiple languages.\n\n    Parameters:\n        papers (List[str]): A list of research papers or articles to be translated.\n        languages (List[str]): A list of target languages to translate the papers into.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with languages as keys and translated papers as values.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "translate_research_papers",
        "description": "Translates research papers into multiple languages.",
        "parameters": {
            "type": "object",
            "properties": {
                "papers": {
                    "type": "array",
                    "description": "A list of research papers or articles to be translated.",
                    "items": {
                        "type": "string"
                    }
                },
                "languages": {
                    "type": "array",
                    "description": "A list of target languages to translate the papers into.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["papers", "languages"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "language": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def automate_backup(
    data_folder: str,
    code_folder: str,
    backup_folder: str,
) -> None:
    """
    Automates the backup of research data and code.

    Parameters:
        data_folder (str): The path to the folder containing research data.
        code_folder (str): The path to the folder containing code.
        backup_folder (str): The path to the folder where the backup will be stored.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def automate_backup(\n    data_folder: str,\n    code_folder: str,\n    backup_folder: str,\n) -> None:\n    \"\"\"\n    Automates the backup of research data and code.\n\n    Parameters:\n        data_folder (str): The path to the folder containing research data.\n        code_folder (str): The path to the folder containing code.\n        backup_folder (str): The path to the folder where the backup will be stored.\n\n    Returns:\n        None\n    \"\"\"\n\n",
    "function_description": {
        "name": "automate_backup",
        "description": "Automates the backup of research data and code.",
        "parameters": {
            "type": "object",
            "properties": {
                "data_folder": {
                    "type": "string",
                    "description": "The path to the folder containing research data."
                },
                "code_folder": {
                    "type": "string",
                    "description": "The path to the folder containing code."
                },
                "backup_folder": {
                    "type": "string",
                    "description": "The path to the folder where the backup will be stored."
                }
            },
            "required": ["data_folder", "code_folder", "backup_folder"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def create_visuals(
    data: Any,
    algorithm: str,
    presentation_type: str,
    slide_count: int,
) -> None:
    """
    Create visual representations of data sets or algorithms for presentations.

    Parameters:
        data (Any): The data set or algorithm to be visualized.
        algorithm (str): The name of the algorithm (if applicable).
        presentation_type (str): The type of presentation (e.g., bar chart, line graph).
        slide_count (int): The number of slides to be created.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def create_visuals(\n    data: Any,\n    algorithm: str,\n    presentation_type: str,\n    slide_count: int,\n) -> None:\n    \"\"\"\n    Create visual representations of data sets or algorithms for presentations.\n\n    Parameters:\n        data (Any): The data set or algorithm to be visualized.\n        algorithm (str): The name of the algorithm (if applicable).\n        presentation_type (str): The type of presentation (e.g., bar chart, line graph).\n        slide_count (int): The number of slides to be created.\n\n    Returns:\n        None\n    \"\"\"\n\n",
    "function_description": {
        "name": "create_visuals",
        "description": "Create visual representations of data sets or algorithms for presentations.",
        "parameters": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "any",
                    "description": "The data set or algorithm to be visualized."
                },
                "algorithm": {
                    "type": "string",
                    "description": "The name of the algorithm (if applicable)."
                },
                "presentation_type": {
                    "type": "string",
                    "description": "The type of presentation (e.g., bar chart, line graph)."
                },
                "slide_count": {
                    "type": "integer",
                    "description": "The number of slides to be created."
                }
            },
            "required": ["data", "algorithm", "presentation_type", "slide_count"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_newsletter() -> str:
    """
    Generates a monthly newsletter on AI research findings.

    Returns:
        str: The generated newsletter.
    """
    # Code implementation to generate the newsletter goes here    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_newsletter() -> str:\n    \"\"\"\n    Generates a monthly newsletter on AI research findings.\n\n    Returns:\n        str: The generated newsletter.\n    \"\"\"\n    # Code implementation to generate the newsletter goes here",
    "function_description": {
        "name": "generate_newsletter",
        "description": "Generates a monthly newsletter on AI research findings.",
        "parameters": null,
        "returns": {
            "type": "string",
            "description": "The generated newsletter."
        }
    }
}


{
    "function_id": "business-1",
    "snippet": "def schedule_meeting(\n    meeting_date: str,\n    meeting_time: str,\n    attendees: List[str],\n    meeting_agenda: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        attendees (List[str]): A list of email addresses of the attendees.\n        meeting_agenda (str): A brief description of the meeting agenda.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def schedule_meeting(\\nmeeting_date: str,\\nmeeting_time: str,\\nattendees: List[str],\\nmeeting_agenda: str,\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Schedules a meeting and returns the meeting details.\\n\\n    Parameters:\\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\\n        meeting_time (str): The time of the meeting in HH:MM format.\\n        attendees (List[str]): A list of email addresses of the attendees.\\n        meeting_agenda (str): A brief description of the meeting agenda.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"schedule_meeting\",\n        \"description\": \"Schedules a meeting and returns the meeting details.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The date of the meeting in YYYY-MM-DD format.\"\n                },\n                \"meeting_time\": {\n                    \"type\": \"string\",\n                    \"description\": \"The time of the meeting in HH:MM format.\"\n                },\n                \"attendees\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of email addresses of the attendees.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"meeting_agenda\": {\n                    \"type\": \"string\",\n                    \"description\": \"A brief description of the meeting agenda.\"\n                }\n            },\n            \"required\": [\"meeting_date\", \"meeting_time\", \"attendees\", \"meeting_agenda\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the scheduled meeting.\"\n                },\n                \"meeting_link\": {\n                    \"type\": \"string\",\n                    \"description\": \"The link to the scheduled meeting.\"\n                },\n                \"confirmation_status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The confirmation status of the meeting.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def schedule_meeting(\nmeeting_date: str,\nmeeting_time: str,\nattendees: List[str],\nmeeting_agenda: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        attendees (List[str]): A list of email addresses of the attendees.\n        meeting_agenda (str): A brief description of the meeting agenda.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\n    \"\"\"",
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a meeting and returns the meeting details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "attendees": {
                        "type": "array",
                        "description": "A list of email addresses of the attendees.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_agenda": {
                        "type": "string",
                        "description": "A brief description of the meeting agenda."
                    }
                },
                "required": [
                    "meeting_date",
                    "meeting_time",
                    "attendees",
                    "meeting_agenda"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "meeting_id": {
                        "type": "string",
                        "description": "The ID of the scheduled meeting."
                    },
                    "meeting_link": {
                        "type": "string",
                        "description": "The link to the scheduled meeting."
                    },
                    "confirmation_status": {
                        "type": "string",
                        "description": "The confirmation status of the meeting."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_meeting(\n    meeting_date: str,\n    meeting_time: str,\n    attendees: List[str],\n    meeting_agenda: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        attendees (List[str]): A list of email addresses of the attendees.\n        meeting_agenda (str): A brief description of the meeting agenda.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-2",
    "snippet": "def generate_sales_report(\n    start_date: str,\n    end_date: str,\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report for a given date range.\n\n    Parameters:\n        start_date (str): The start date of the report in YYYY-MM-DD format.\n        end_date (str): The end date of the report in YYYY-MM-DD format.\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def generate_sales_report(\\n    start_date: str,\\n    end_date: str,\\n    sales_data: List[Dict[str, Union[str, int, float]]]\\n) -> Dict[str, float]:\\n    \\\"\\\"\\\"\\n    Generates a sales report for a given date range.\\n\\n    Parameters:\\n        start_date (str): The start date of the report in YYYY-MM-DD format.\\n        end_date (str): The end date of the report in YYYY-MM-DD format.\\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"generate_sales_report\",\n        \"description\": \"Generates a sales report for a given date range.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the report in YYYY-MM-DD format.\"\n                },\n                \"end_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The end date of the report in YYYY-MM-DD format.\"\n                },\n                \"sales_data\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"product\": {\n                                \"type\": \"string\"\n                            },\n                            \"quantity\": {\n                                \"type\": \"integer\"\n                            },\n                            \"price\": {\n                                \"type\": \"number\"\n                            }\n                        },\n                        \"required\": [\"product\", \"quantity\", \"price\"]\n                    }\n                }\n            },\n            \"required\": [\"start_date\", \"end_date\", \"sales_data\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def generate_sales_report(\n    start_date: str,\n    end_date: str,\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report for a given date range.\n\n    Parameters:\n        start_date (str): The start date of the report in YYYY-MM-DD format.\n        end_date (str): The end date of the report in YYYY-MM-DD format.\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"\n",
        "function_description": {
            "name": "generate_sales_report",
            "description": "Generates a sales report for a given date range.",
            "parameters": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the report in YYYY-MM-DD format."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "The end date of the report in YYYY-MM-DD format."
                    },
                    "sales_data": {
                        "type": "array",
                        "description": "A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "product": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": "integer"
                                },
                                "price": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "product",
                                "quantity",
                                "price"
                            ]
                        }
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "sales_data"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_sales_report(\n    start_date: str,\n    end_date: str,\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report for a given date range.\n\n    Parameters:\n        start_date (str): The start date of the report in YYYY-MM-DD format.\n        end_date (str): The end date of the report in YYYY-MM-DD format.\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-3",
    "snippet": "def perform_employee_evaluation(\n    employee_id: str,\n    performance_metrics: Dict[str, Union[int, float]]\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\n\n    Parameters:\n        employee_id (str): The unique identifier of the employee to be evaluated.\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\n                                                            Each key represents a metric, and the value is the score.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def perform_employee_evaluation(\\nemployee_id: str,\\nperformance_metrics: Dict[str, Union[int, float]]\\n) -> Dict[str, Union[str, int, float]]:\\n    \\\"\\\"\\\"\\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\\n\\n    Parameters:\\n        employee_id (str): The unique identifier of the employee to be evaluated.\\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\\n                                                            Each key represents a metric, and the value is the score.\\n\\n    Returns:\\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"perform_employee_evaluation\",\n        \"description\": \"Performs an employee evaluation based on given performance metrics and returns the evaluation results.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the employee to be evaluated.\"\n                },\n                \"performance_metrics\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing performance metrics. Each key represents a metric, and the value is the score.\",\n                    \"additionalProperties\": {\n                        \"anyOf\": [\n                            {\n                                \"type\": \"integer\"\n                            },\n                            {\n                                \"type\": \"number\"\n                            }\n                        ]\n                    }\n                }\n            },\n            \"required\": [\n                \"employee_id\",\n                \"performance_metrics\"\n            ]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the employee.\"\n                },\n                \"average_score\": {\n                    \"type\": \"number\",\n                    \"description\": \"The average score calculated from the performance metrics.\"\n                },\n                \"evaluation_status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The evaluation status of the employee.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def perform_employee_evaluation(\nemployee_id: str,\nperformance_metrics: Dict[str, Union[int, float]]\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\n\n    Parameters:\n        employee_id (str): The unique identifier of the employee to be evaluated.\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\n                                                            Each key represents a metric, and the value is the score.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\n    \"\"\"\n",
        "function_description": {
            "name": "perform_employee_evaluation",
            "description": "Performs an employee evaluation based on given performance metrics and returns the evaluation results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee to be evaluated."
                    },
                    "performance_metrics": {
                        "type": "object",
                        "description": "A dictionary containing performance metrics. Each key represents a metric, and the value is the score.",
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "employee_id",
                    "performance_metrics"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee."
                    },
                    "average_score": {
                        "type": "number",
                        "description": "The average score calculated from the performance metrics."
                    },
                    "evaluation_status": {
                        "type": "string",
                        "description": "The evaluation status of the employee."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def perform_employee_evaluation(\n    employee_id: str,\n    performance_metrics: Dict[str, Union[int, float]]\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\n\n    Parameters:\n        employee_id (str): The unique identifier of the employee to be evaluated.\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\n                                                            Each key represents a metric, and the value is the score.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-4",
    "snippet": "def create_new_customer_account(\n    customer_name: str,\n    customer_email: str,\n    customer_password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the customer's account details.\n\n    Parameters:\n        customer_name (str): The name of the customer.\n        customer_email (str): The email address of the customer.\n        customer_password (str): The password for the new customer's account.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the customer's account details.\n                        The dictionary has 'customer_name', 'customer_email', \n                        and 'customer_id' as keys.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def create_new_customer_account(\\n    customer_name: str,\\n    customer_email: str,\\n    customer_password: str,\\n) -> Dict[str, str]:\\n    \\n    \\\"\\\"\\\"\\n    Creates an account for a new customer and returns the customer's account details.\\n\\n    Parameters:\\n        customer_name (str): The name of the customer.\\n        customer_email (str): The email address of the customer.\\n        customer_password (str): The password for the new customer's account.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary containing the customer's account details.\\n                        The dictionary has 'customer_name', 'customer_email', \\n                        and 'customer_id' as keys.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"create_new_customer_account\",\n        \"description\": \"Creates an account for a new customer and returns the customer's account details.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the customer.\"\n                },\n                \"customer_email\": {\n                    \"type\": \"string\",\n                    \"description\": \"The email address of the customer.\"\n                },\n                \"customer_password\": {\n                    \"type\": \"string\",\n                    \"description\": \"The password for the new customer's account.\"\n                }\n            },\n            \"required\": [\"customer_name\", \"customer_email\", \"customer_password\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_name\": {\n                    \"type\": \"string\"\n                },\n                \"customer_email\": {\n                    \"type\": \"string\"\n                },\n                \"customer_id\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_new_customer_account(\n    customer_name: str,\n    customer_email: str,\n    customer_password: str,\n) -> Dict[str, str]:\n    \n    \"\"\"\n    Creates an account for a new customer and returns the customer's account details.\n\n    Parameters:\n        customer_name (str): The name of the customer.\n        customer_email (str): The email address of the customer.\n        customer_password (str): The password for the new customer's account.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the customer's account details.\n                        The dictionary has 'customer_name', 'customer_email', \n                        and 'customer_id' as keys.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "create_new_customer_account",
            "description": "Creates an account for a new customer and returns the customer's account details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The name of the customer."
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "customer_password": {
                        "type": "string",
                        "description": "The password for the new customer's account."
                    }
                },
                "required": [
                    "customer_name",
                    "customer_email",
                    "customer_password"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string"
                    },
                    "customer_email": {
                        "type": "string"
                    },
                    "customer_id": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_new_customer_account(\n    customer_name: str,\n    customer_email: str,\n    customer_password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the customer's account details.\n\n    Parameters:\n        customer_name (str): The name of the customer.\n        customer_email (str): The email address of the customer.\n        customer_password (str): The password for the new customer's account.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the customer's account details.\n                        The dictionary has 'customer_name', 'customer_email', \n                        and 'customer_id' as keys.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-5",
    "snippet": "def calculate_payroll(\n    hours_worked: float,\n    hourly_rate: float,\n    overtime_rate: float = 1.5,\n    standard_hours: float = 40.0,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for an employee based on the hours they worked,\n    their hourly rate, and the overtime rate.\n\n    Parameters:\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The employee's pay rate per hour.\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def calculate_payroll(\\n    hours_worked: float,\\n    hourly_rate: float,\\n    overtime_rate: float = 1.5,\\n    standard_hours: float = 40.0,\\n) -> Dict[str, float]:\\n    \\\"\\\"\\\"\\n    Calculates the payroll for an employee based on the hours they worked,\\n    their hourly rate, and the overtime rate.\\n\\n    Parameters:\\n        hours_worked (float): The number of hours the employee worked.\\n        hourly_rate (float): The employee's pay rate per hour.\\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\\n    \\\"\\\"\\\"\\n    pass\\n\",\n    \"function_description\": {\n        \"name\": \"calculate_payroll\",\n        \"description\": \"Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"hours_worked\": {\n                    \"type\": \"float\",\n                    \"description\": \"The number of hours the employee worked.\"\n                },\n                \"hourly_rate\": {\n                    \"type\": \"float\",\n                    \"description\": \"The employee's pay rate per hour.\"\n                },\n                \"overtime_rate\": {\n                    \"type\": \"float\",\n                    \"description\": \"The rate for overtime pay. Defaults to 1.5.\"\n                },\n                \"standard_hours\": {\n                    \"type\": \"float\",\n                    \"description\": \"The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\"\n                }\n            },\n            \"required\": [\"hours_worked\", \"hourly_rate\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"regular_pay\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount of regular pay for the employee.\"\n                },\n                \"overtime_pay\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount of overtime pay for the employee.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def calculate_payroll(\n    hours_worked: float,\n    hourly_rate: float,\n    overtime_rate: float = 1.5,\n    standard_hours: float = 40.0,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for an employee based on the hours they worked,\n    their hourly rate, and the overtime rate.\n\n    Parameters:\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The employee's pay rate per hour.\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\n    \"\"\"\n    pass\n",
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.",
            "parameters": {
                "type": "object",
                "properties": {
                    "hours_worked": {
                        "type": "float",
                        "description": "The number of hours the employee worked."
                    },
                    "hourly_rate": {
                        "type": "float",
                        "description": "The employee's pay rate per hour."
                    },
                    "overtime_rate": {
                        "type": "float",
                        "description": "The rate for overtime pay. Defaults to 1.5."
                    },
                    "standard_hours": {
                        "type": "float",
                        "description": "The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0."
                    }
                },
                "required": [
                    "hours_worked",
                    "hourly_rate"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "regular_pay": {
                        "type": "float",
                        "description": "The amount of regular pay for the employee."
                    },
                    "overtime_pay": {
                        "type": "float",
                        "description": "The amount of overtime pay for the employee."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_payroll(\n    hours_worked: float,\n    hourly_rate: float,\n    overtime_rate: float = 1.5,\n    standard_hours: float = 40.0,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for an employee based on the hours they worked,\n    their hourly rate, and the overtime rate.\n\n    Parameters:\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The employee's pay rate per hour.\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-6",
    "snippet": "def calculate_payroll(\n    team_members: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates payroll for a team and returns the total payroll.\n\n    Parameters:\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def calculate_payroll(\\n    team_members: List[Dict[str, Union[str, int, float]]]\\n) -> Dict[str, float]:\\n    \\\"\\\"\\\"\\n    Calculates payroll for a team and returns the total payroll.\\n\\n    Parameters:\\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\\n    \\\"\\\"\\\"\\n\\n    # Function code goes here\",\n    \"function_description\": {\n        \"name\": \"calculate_payroll\",\n        \"description\": \"Calculates payroll for a team and returns the total payroll.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"team_members\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"hours_worked\": {\n                                \"type\": \"integer\"\n                            },\n                            \"hourly_rate\": {\n                                \"type\": \"number\"\n                            }\n                        },\n                        \"required\": [\"name\", \"hours_worked\", \"hourly_rate\"]\n                    }\n                }\n            },\n            \"required\": [\"team_members\"]\n        }\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_payroll\": {\n                \"type\": \"number\",\n                \"description\": \"The total payroll for the team.\"\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def calculate_payroll(\n    team_members: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates payroll for a team and returns the total payroll.\n\n    Parameters:\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\n    \"\"\"\n\n    # Function code goes here",
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates payroll for a team and returns the total payroll.",
            "parameters": {
                "type": "object",
                "properties": {
                    "team_members": {
                        "type": "array",
                        "description": "A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "hours_worked": {
                                    "type": "integer"
                                },
                                "hourly_rate": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "name",
                                "hours_worked",
                                "hourly_rate"
                            ]
                        }
                    }
                },
                "required": [
                    "team_members"
                ]
            }
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_payroll": {
                    "type": "number",
                    "description": "The total payroll for the team."
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_payroll(\n    team_members: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates payroll for a team and returns the total payroll.\n\n    Parameters:\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-7",
    "snippet": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates inventory stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        quantity (int): The quantity to update the inventory with.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the updated inventory data.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def update_inventory_stock_data(\\n    product_id: str,\\n    quantity: int,\\n) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Updates inventory stock data for a specific product.\\n\\n    Parameters:\\n        product_id (str): The ID of the product.\\n        quantity (int): The quantity to update the inventory with.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary containing the updated inventory data.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"update_inventory_stock_data\",\n        \"description\": \"Updates inventory stock data for a specific product.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the product.\"\n                },\n                \"quantity\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The quantity to update the inventory with.\"\n                }\n            },\n            \"required\": [\"product_id\", \"quantity\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"inventory_data\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the updated inventory data.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates inventory stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        quantity (int): The quantity to update the inventory with.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the updated inventory data.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "update_inventory_stock_data",
            "description": "Updates inventory stock data for a specific product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The quantity to update the inventory with."
                    }
                },
                "required": [
                    "product_id",
                    "quantity"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "inventory_data": {
                        "type": "object",
                        "description": "A dictionary containing the updated inventory data."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates inventory stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        quantity (int): The quantity to update the inventory with.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the updated inventory data.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-8",
    "snippet": "def track_shipment_status(\n    tracking_number: str,\n    shipping_company: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment and returns the current status and location.\n\n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        shipping_company (str): The name of the shipping company.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def track_shipment_status(\\ntracking_number: str,\\nshipping_company: str,\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Tracks the status of a shipment and returns the current status and location.\\n\\n    Parameters:\\n        tracking_number (str): The tracking number of the shipment.\\n        shipping_company (str): The name of the shipping company.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"track_shipment_status\",\n        \"description\": \"Tracks the status of a shipment and returns the current status and location.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tracking_number\": {\n                    \"type\": \"string\",\n                    \"description\": \"The tracking number of the shipment.\"\n                },\n                \"shipping_company\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the shipping company.\"\n                }\n            },\n            \"required\": [\"tracking_number\", \"shipping_company\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current status of the shipment.\"\n                },\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current location of the shipment.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def track_shipment_status(\ntracking_number: str,\nshipping_company: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment and returns the current status and location.\n\n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        shipping_company (str): The name of the shipping company.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "track_shipment_status",
            "description": "Tracks the status of a shipment and returns the current status and location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tracking_number": {
                        "type": "string",
                        "description": "The tracking number of the shipment."
                    },
                    "shipping_company": {
                        "type": "string",
                        "description": "The name of the shipping company."
                    }
                },
                "required": [
                    "tracking_number",
                    "shipping_company"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the shipment."
                    },
                    "location": {
                        "type": "string",
                        "description": "The current location of the shipment."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_shipment_status(\n    tracking_number: str,\n    shipping_company: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment and returns the current status and location.\n\n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        shipping_company (str): The name of the shipping company.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-9",
    "snippet": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Assigns a customer support ticket to a specified agent.\n\n    Parameters:\n        ticket_id (int): The id of the ticket that needs to be assigned.\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\n\n    Returns:\n        Dict[str, Any]: A dictionary with details of the assignment process. \n                        This can include keys like 'status' and 'message'.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def assign_ticket_to_agent(\\n    ticket_id: int,\\n    agent_id: int,\\n) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Assigns a customer support ticket to a specified agent.\\n\\n    Parameters:\\n        ticket_id (int): The id of the ticket that needs to be assigned.\\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary with details of the assignment process. \\n                        This can include keys like 'status' and 'message'.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"assign_ticket_to_agent\",\n        \"description\": \"Assigns a customer support ticket to a specified agent.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ticket_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The id of the ticket that needs to be assigned.\"\n                },\n                \"agent_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The id of the agent to whom the ticket will be assigned.\"\n                }\n            },\n            \"required\": [\"ticket_id\", \"agent_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status of the assignment process.\"\n                },\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"A message providing details about the assignment.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Assigns a customer support ticket to a specified agent.\n\n    Parameters:\n        ticket_id (int): The id of the ticket that needs to be assigned.\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\n\n    Returns:\n        Dict[str, Any]: A dictionary with details of the assignment process. \n                        This can include keys like 'status' and 'message'.\n    \"\"\"\n",
        "function_description": {
            "name": "assign_ticket_to_agent",
            "description": "Assigns a customer support ticket to a specified agent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ticket_id": {
                        "type": "integer",
                        "description": "The id of the ticket that needs to be assigned."
                    },
                    "agent_id": {
                        "type": "integer",
                        "description": "The id of the agent to whom the ticket will be assigned."
                    }
                },
                "required": [
                    "ticket_id",
                    "agent_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the assignment process."
                    },
                    "message": {
                        "type": "string",
                        "description": "A message providing details about the assignment."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Assigns a customer support ticket to a specified agent.\n\n    Parameters:\n        ticket_id (int): The id of the ticket that needs to be assigned.\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\n\n    Returns:\n        Dict[str, Any]: A dictionary with details of the assignment process. \n                        This can include keys like 'status' and 'message'.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-10",
    "snippet": "def generate_discount_code(customer_id: str) -> str:\n    \"\"\"\n    Generate a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (str): The unique id of the customer.\n\n    Returns:\n        str: The generated unique discount code.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def generate_discount_code(customer_id: str) -> str:\\n    \\\"\\\"\\\"\\n    Generate a unique discount code for a customer for marketing promotions.\\n\\n    Parameters:\\n        customer_id (str): The unique id of the customer.\\n\\n    Returns:\\n        str: The generated unique discount code.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"generate_discount_code\",\n        \"description\": \"Generate a unique discount code for a customer for marketing promotions.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique id of the customer.\"\n                }\n            },\n            \"required\": [\"customer_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"discount_code\": {\n                    \"type\": \"string\",\n                    \"description\": \"The generated unique discount code.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def generate_discount_code(customer_id: str) -> str:\n    \"\"\"\n    Generate a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (str): The unique id of the customer.\n\n    Returns:\n        str: The generated unique discount code.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "generate_discount_code",
            "description": "Generate a unique discount code for a customer for marketing promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique id of the customer."
                    }
                },
                "required": [
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "discount_code": {
                        "type": "string",
                        "description": "The generated unique discount code."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_discount_code(customer_id: str) -> str:\n    \"\"\"\n    Generate a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (str): The unique id of the customer.\n\n    Returns:\n        str: The generated unique discount code.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-11",
    "snippet": "def enable_subscription(\n    customer_id: str,\n    services: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\n\n    Parameters:\n        customer_id (str): The unique identifier of the customer.\n        services (List[str]): A list of services to which the customer wants to subscribe.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \n        True indicates the subscription was successful, False indicates it was not.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def enable_subscription(\\n    customer_id: str,\\n    services: List[str],\\n) -> Dict[str, bool]:\\n    \\\"\\\"\\\"\\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\\n\\n    Parameters:\\n        customer_id (str): The unique identifier of the customer.\\n        services (List[str]): A list of services to which the customer wants to subscribe.\\n\\n    Returns:\\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \\n        True indicates the subscription was successful, False indicates it was not.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"enable_subscription\",\n        \"description\": \"Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the customer.\"\n                },\n                \"services\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of services to which the customer wants to subscribe.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"services\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"service_name\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def enable_subscription(\n    customer_id: str,\n    services: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\n\n    Parameters:\n        customer_id (str): The unique identifier of the customer.\n        services (List[str]): A list of services to which the customer wants to subscribe.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \n        True indicates the subscription was successful, False indicates it was not.\n    \"\"\"",
        "function_description": {
            "name": "enable_subscription",
            "description": "Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique identifier of the customer."
                    },
                    "services": {
                        "type": "array",
                        "description": "A list of services to which the customer wants to subscribe.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "services"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_name": {
                        "type": "boolean",
                        "description": "A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def enable_subscription(\n    customer_id: str,\n    services: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\n\n    Parameters:\n        customer_id (str): The unique identifier of the customer.\n        services (List[str]): A list of services to which the customer wants to subscribe.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \n        True indicates the subscription was successful, False indicates it was not.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-12",
    "snippet": "def disable_customer_subscription(\n    customer_id: str,\n    service_ids: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The id of the customer.\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\n\n    Returns:\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def disable_customer_subscription(\\n    customer_id: str,\\n    service_ids: List[str],\\n) -> Dict[str, bool]:\\n    \\\"\\\"\\\"\\n    Disables a customer's subscription to various services.\\n\\n    Parameters:\\n        customer_id (str): The id of the customer.\\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\\n\\n    Returns:\\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"disable_customer_subscription\",\n        \"description\": \"Disables a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The id of the customer.\"\n                },\n                \"service_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of ids of the services to be unsubscribed.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"service_ids\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"service_id\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A boolean indicating whether the unsubscription was successful.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def disable_customer_subscription(\n    customer_id: str,\n    service_ids: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The id of the customer.\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\n\n    Returns:\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\n    \"\"\"",
        "function_description": {
            "name": "disable_customer_subscription",
            "description": "Disables a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "service_ids": {
                        "type": "array",
                        "description": "A list of ids of the services to be unsubscribed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "service_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_id": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the unsubscription was successful."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def disable_customer_subscription(\n    customer_id: str,\n    service_ids: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The id of the customer.\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\n\n    Returns:\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-13",
    "snippet": "def modify_customer_subscription(\n    customer_id: str,\n    new_subscription: Dict[str, bool]\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\n                                            Each key is a service name and its corresponding value is a boolean \n                                            indicating whether the customer is subscribed to that service.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def modify_customer_subscription(\\n    customer_id: str,\\n    new_subscription: Dict[str, bool]\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Modifies a customer's subscription to various services.\\n\\n    Parameters:\\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\\n                                            Each key is a service name and its corresponding value is a boolean \\n                                            indicating whether the customer is subscribed to that service.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"modify_customer_subscription\",\n        \"description\": \"Modifies a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the customer whose subscription needs to be modified.\"\n                },\n                \"new_subscription\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.\",\n                    \"additionalProperties\": {\n                        \"type\": \"boolean\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"new_subscription\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status of the update operation.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def modify_customer_subscription(\n    customer_id: str,\n    new_subscription: Dict[str, bool]\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\n                                            Each key is a service name and its corresponding value is a boolean \n                                            indicating whether the customer is subscribed to that service.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "modify_customer_subscription",
            "description": "Modifies a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The ID of the customer whose subscription needs to be modified."
                    },
                    "new_subscription": {
                        "type": "object",
                        "description": "A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "new_subscription"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The status of the update operation."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def modify_customer_subscription(\n    customer_id: str,\n    new_subscription: Dict[str, bool]\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\n                                            Each key is a service name and its corresponding value is a boolean \n                                            indicating whether the customer is subscribed to that service.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-14",
    "snippet": "def renew_contracts(\n    contracts: List[Dict[str, Union[str, datetime.date]]]\n) -> List[Dict[str, Union[str, datetime.date]]]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n\n    Parameters:\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \n                                                                Each dictionary should have 'contract_id', 'service', \n                                                                and 'expiration_date' keys.\n\n    Returns:\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \n                                                    Each dictionary will have 'contract_id', 'service', \n                                                    and 'new_expiration_date' keys.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def renew_contracts(\\ncontracts: List[Dict[str, Union[str, datetime.date]]]\\n) -> List[Dict[str, Union[str, datetime.date]]]:\\n    \\\"\\\"\\\"\\n    Renews contracts for services and subscriptions that are expiring.\\n\\n    Parameters:\\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \\n                                                                Each dictionary should have 'contract_id', 'service', \\n                                                                and 'expiration_date' keys.\\n\\n    Returns:\\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \\n                                                    Each dictionary will have 'contract_id', 'service', \\n                                                    and 'new_expiration_date' keys.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"renew_contracts\",\n        \"description\": \"Renews contracts for services and subscriptions that are expiring.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"contracts\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"contract_id\": {\n                                \"type\": \"string\"\n                            },\n                            \"service\": {\n                                \"type\": \"string\"\n                            },\n                            \"expiration_date\": {\n                                \"type\": \"string\",\n                                \"format\": \"date\"\n                            }\n                        },\n                        \"required\": [\"contract_id\", \"service\", \"expiration_date\"]\n                    }\n                }\n            },\n            \"required\": [\"contracts\"]\n        }\n    },\n    \"returns\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"contract_id\": {\n                    \"type\": \"string\"\n                },\n                \"service\": {\n                    \"type\": \"string\"\n                },\n                \"new_expiration_date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                }\n            },\n            \"required\": [\"contract_id\", \"service\", \"new_expiration_date\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def renew_contracts(\ncontracts: List[Dict[str, Union[str, datetime.date]]]\n) -> List[Dict[str, Union[str, datetime.date]]]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n\n    Parameters:\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \n                                                                Each dictionary should have 'contract_id', 'service', \n                                                                and 'expiration_date' keys.\n\n    Returns:\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \n                                                    Each dictionary will have 'contract_id', 'service', \n                                                    and 'new_expiration_date' keys.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "renew_contracts",
            "description": "Renews contracts for services and subscriptions that are expiring.",
            "parameters": {
                "type": "object",
                "properties": {
                    "contracts": {
                        "type": "array",
                        "description": "A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "contract_id": {
                                    "type": "string"
                                },
                                "service": {
                                    "type": "string"
                                },
                                "expiration_date": {
                                    "type": "string",
                                    "format": "date"
                                }
                            },
                            "required": [
                                "contract_id",
                                "service",
                                "expiration_date"
                            ]
                        }
                    }
                },
                "required": [
                    "contracts"
                ]
            }
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "contract_id": {
                        "type": "string"
                    },
                    "service": {
                        "type": "string"
                    },
                    "new_expiration_date": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "contract_id",
                    "service",
                    "new_expiration_date"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def renew_contracts(\n    contracts: List[Dict[str, Union[str, datetime.date]]]\n) -> List[Dict[str, Union[str, datetime.date]]]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n\n    Parameters:\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \n                                                                Each dictionary should have 'contract_id', 'service', \n                                                                and 'expiration_date' keys.\n\n    Returns:\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \n                                                    Each dictionary will have 'contract_id', 'service', \n                                                    and 'new_expiration_date' keys.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-15",
    "snippet": "def backup_business_data(\n    data: str,\n    backup_location: str,\n    backup_frequency: str,\n) -> bool:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data (str): The data to be backed up.\n        backup_location (str): The location where the backup data should be stored.\n        backup_frequency (str): The frequency at which the backup process should be performed.\n\n    Returns:\n        bool: Returns True if the backup process is successful, False otherwise.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def backup_business_data(\\n    data: str,\\n    backup_location: str,\\n    backup_frequency: str,\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Performs a backup process of important business data.\\n\\n    Parameters:\\n        data (str): The data to be backed up.\\n        backup_location (str): The location where the backup data should be stored.\\n        backup_frequency (str): The frequency at which the backup process should be performed.\\n\\n    Returns:\\n        bool: Returns True if the backup process is successful, False otherwise.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"backup_business_data\",\n        \"description\": \"Performs a backup process of important business data.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"data\": {\n                    \"type\": \"string\",\n                    \"description\": \"The data to be backed up.\"\n                },\n                \"backup_location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where the backup data should be stored.\"\n                },\n                \"backup_frequency\": {\n                    \"type\": \"string\",\n                    \"description\": \"The frequency at which the backup process should be performed.\"\n                }\n            },\n            \"required\": [\"data\", \"backup_location\", \"backup_frequency\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"Returns True if the backup process is successful, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def backup_business_data(\n    data: str,\n    backup_location: str,\n    backup_frequency: str,\n) -> bool:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data (str): The data to be backed up.\n        backup_location (str): The location where the backup data should be stored.\n        backup_frequency (str): The frequency at which the backup process should be performed.\n\n    Returns:\n        bool: Returns True if the backup process is successful, False otherwise.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "backup_business_data",
            "description": "Performs a backup process of important business data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The data to be backed up."
                    },
                    "backup_location": {
                        "type": "string",
                        "description": "The location where the backup data should be stored."
                    },
                    "backup_frequency": {
                        "type": "string",
                        "description": "The frequency at which the backup process should be performed."
                    }
                },
                "required": [
                    "data",
                    "backup_location",
                    "backup_frequency"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "Returns True if the backup process is successful, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def backup_business_data(\n    data: str,\n    backup_location: str,\n    backup_frequency: str,\n) -> bool:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data (str): The data to be backed up.\n        backup_location (str): The location where the backup data should be stored.\n        backup_frequency (str): The frequency at which the backup process should be performed.\n\n    Returns:\n        bool: Returns True if the backup process is successful, False otherwise.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-16",
    "snippet": "def check_software_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_id (str): The id of the product.\n        license_key (str): The license key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def check_software_license_validity(\\n    product_id: str,\\n    license_key: str,\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Checks the validity of a software license for a given product.\\n\\n    Parameters:\\n        product_id (str): The id of the product.\\n        license_key (str): The license key to check.\\n\\n    Returns:\\n        bool: True if the license is valid, False otherwise.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"check_software_license_validity\",\n        \"description\": \"Checks the validity of a software license for a given product.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The id of the product.\"\n                },\n                \"license_key\": {\n                    \"type\": \"string\",\n                    \"description\": \"The license key to check.\"\n                }\n            },\n            \"required\": [\"product_id\", \"license_key\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if the license is valid, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def check_software_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_id (str): The id of the product.\n        license_key (str): The license key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "check_software_license_validity",
            "description": "Checks the validity of a software license for a given product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product."
                    },
                    "license_key": {
                        "type": "string",
                        "description": "The license key to check."
                    }
                },
                "required": [
                    "product_id",
                    "license_key"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the license is valid, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def check_software_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_id (str): The id of the product.\n        license_key (str): The license key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-17",
    "snippet": "def onboard_new_employee(\n    employee_name: str,\n    start_date: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee by generating a new id, new email account, etc.\n\n    Parameters:\n        employee_name (str): The full name of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def onboard_new_employee(\\n    employee_name: str,\\n    start_date: str\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Onboards a new employee by generating a new id, new email account, etc.\\n\\n    Parameters:\\n        employee_name (str): The full name of the new employee.\\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"onboard_new_employee\",\n        \"description\": \"Onboards a new employee by generating a new id, new email account, etc.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The full name of the new employee.\"\n                },\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the new employee in YYYY-MM-DD format.\"\n                }\n            },\n            \"required\": [\"employee_name\", \"start_date\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new employee's ID.\"\n                },\n                \"employee_email\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new employee's email address.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def onboard_new_employee(\n    employee_name: str,\n    start_date: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee by generating a new id, new email account, etc.\n\n    Parameters:\n        employee_name (str): The full name of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\n    \"\"\"\n",
        "function_description": {
            "name": "onboard_new_employee",
            "description": "Onboards a new employee by generating a new id, new email account, etc.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_name": {
                        "type": "string",
                        "description": "The full name of the new employee."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the new employee in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "employee_name",
                    "start_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The new employee's ID."
                    },
                    "employee_email": {
                        "type": "string",
                        "description": "The new employee's email address."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def onboard_new_employee(\n    employee_name: str,\n    start_date: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee by generating a new id, new email account, etc.\n\n    Parameters:\n        employee_name (str): The full name of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-18",
    "snippet": "def allocate_resources(\n    meeting_rooms: List[str],\n    equipment: List[str],\n    personnel: List[str],\n    project: str,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.\n\n    Parameters:\n        meeting_rooms (List[str]): The list of available meeting rooms.\n        equipment (List[str]): The list of available equipment.\n        personnel (List[str]): The list of available personnel.\n        project (str): The name of the project.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'allocated_meeting_rooms', 'allocated_equipment' and 'allocated_personnel' as keys and \n                              their allocated resources as values.\n    \"\"\"",
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"allocate_resources\",\n        \"description\": \"Allocates resources such as meeting rooms, equipment, and personnel for a project or task force and returns a dictionary.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_rooms\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available meeting rooms.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"equipment\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available equipment.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"personnel\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available personnel.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"project\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the project.\"\n                }\n            },\n            \"required\": [\"meeting_rooms\", \"equipment\", \"personnel\", \"project\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"allocated_meeting_rooms\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated meeting rooms for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"allocated_equipment\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated equipment for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"allocated_personnel\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated personnel for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_description": {
            "name": "allocate_resources",
            "description": "Allocates resources such as meeting rooms, equipment, and personnel for a project or task force and returns a dictionary.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_rooms": {
                        "type": "array",
                        "description": "The list of available meeting rooms.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "equipment": {
                        "type": "array",
                        "description": "The list of available equipment.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "personnel": {
                        "type": "array",
                        "description": "The list of available personnel.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the project."
                    }
                },
                "required": [
                    "meeting_rooms",
                    "equipment",
                    "personnel",
                    "project"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "allocated_meeting_rooms": {
                        "type": "array",
                        "description": "The allocated meeting rooms for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_equipment": {
                        "type": "array",
                        "description": "The allocated equipment for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_personnel": {
                        "type": "array",
                        "description": "The allocated personnel for the project.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def allocate_resources(\n    meeting_rooms: List[str],\n    equipment: List[str],\n    personnel: List[str],\n    project: str,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.\n\n    Parameters:\n        meeting_rooms (List[str]): The list of available meeting rooms.\n        equipment (List[str]): The list of available equipment.\n        personnel (List[str]): The list of available personnel.\n        project (str): The name of the project.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'allocated_meeting_rooms', 'allocated_equipment' and 'allocated_personnel' as keys and \n                              their allocated resources as values.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-19",
    "snippet": "def submit_timesheets(\n    employee_ids: List[int],\n    timesheet_data: Dict[int, Dict[str, Union[str, float]]],\n    action: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n    \n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \n                                                                  'hours_worked' and optionally 'overtime_hours'.\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\n\n    Returns:\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"submit_timesheets(\\nemployee_ids: List[int],\\ntimesheet_data: Dict[int, Dict[str, Union[str, float]]],\\naction: str,\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Submits timesheets for employees, either for approval or archival.\\n    \\n    Parameters:\\n        employee_ids (List[int]): A list of employee IDs.\\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \\n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \\n                                                                  'hours_worked' and optionally 'overtime_hours'.\\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\\n    \\\"\\\"\\\"    \",\n    \"function_description\": {\n        \"name\": \"submit_timesheets\",\n        \"description\": \"Submits timesheets for employees, either for approval or archival.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of employee IDs.\",\n                    \"items\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"timesheet_data\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.\",\n                    \"additionalProperties\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"date\": {\n                                \"type\": \"string\",\n                                \"description\": \"Date in YYYY-MM-DD format.\"\n                            },\n                            \"hours_worked\": {\n                                \"type\": \"number\",\n                                \"description\": \"Number of hours worked.\"\n                            },\n                            \"overtime_hours\": {\n                                \"type\": \"number\",\n                                \"description\": \"Number of overtime hours.\"\n                            }\n                        },\n                        \"required\": [\n                            \"date\",\n                            \"hours_worked\"\n                        ]\n                    }\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to be taken. It should be either 'approval' or 'archival'.\"\n                }\n            },\n            \"required\": [\n                \"employee_ids\",\n                \"timesheet_data\",\n                \"action\"\n            ]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"string\",\n                    \"description\": \"A dictionary with employee IDs as keys and the status of their timesheet submission as values.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "submit_timesheets(\nemployee_ids: List[int],\ntimesheet_data: Dict[int, Dict[str, Union[str, float]]],\naction: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n    \n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \n                                                                  'hours_worked' and optionally 'overtime_hours'.\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\n\n    Returns:\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\n    \"\"\"    ",
        "function_description": {
            "name": "submit_timesheets",
            "description": "Submits timesheets for employees, either for approval or archival.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_ids": {
                        "type": "array",
                        "description": "A list of employee IDs.",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "timesheet_data": {
                        "type": "object",
                        "description": "A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "description": "Date in YYYY-MM-DD format."
                                },
                                "hours_worked": {
                                    "type": "number",
                                    "description": "Number of hours worked."
                                },
                                "overtime_hours": {
                                    "type": "number",
                                    "description": "Number of overtime hours."
                                }
                            },
                            "required": [
                                "date",
                                "hours_worked"
                            ]
                        }
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to be taken. It should be either 'approval' or 'archival'."
                    }
                },
                "required": [
                    "employee_ids",
                    "timesheet_data",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_ids": {
                        "type": "string",
                        "description": "A dictionary with employee IDs as keys and the status of their timesheet submission as values."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def submit_timesheets(\n    employee_ids: List[int],\n    timesheet_data: Dict[int, Dict[str, Union[str, float]]],\n    action: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n    \n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \n                                                                  'hours_worked' and optionally 'overtime_hours'.\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\n\n    Returns:\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-20",
    "snippet": "def distribute_performance_incentives(\n    employee_performance: Dict[str, float],\n    bonus_pool: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def distribute_performance_incentives(\\n    employee_performance: Dict[str, float],\\n    bonus_pool: float,\\n) -> Dict[str, float]:\\n    \\\"\\\"\\\"\\n    Calculates and distributes performance-based incentives or bonuses to employees.\\n\\n    Parameters:\\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"distribute_performance_incentives\",\n        \"description\": \"Calculates and distributes performance-based incentives or bonuses to employees.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_performance\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary with employee IDs as keys and their performance scores as values.\",\n                    \"additionalProperties\": {\n                        \"type\": \"number\"\n                    }\n                },\n                \"bonus_pool\": {\n                    \"type\": \"number\",\n                    \"description\": \"The total amount of money available for distribution as bonuses.\"\n                }\n            },\n            \"required\": [\"employee_performance\", \"bonus_pool\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"object\",\n                \"description\": \"A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\",\n                \"additionalProperties\": {\n                    \"type\": \"number\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def distribute_performance_incentives(\n    employee_performance: Dict[str, float],\n    bonus_pool: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\n    \"\"\"\n",
        "function_description": {
            "name": "distribute_performance_incentives",
            "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_performance": {
                        "type": "object",
                        "description": "A dictionary with employee IDs as keys and their performance scores as values.",
                        "additionalProperties": {
                            "type": "number"
                        }
                    },
                    "bonus_pool": {
                        "type": "number",
                        "description": "The total amount of money available for distribution as bonuses."
                    }
                },
                "required": [
                    "employee_performance",
                    "bonus_pool"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "object",
                    "description": "A dictionary with employee IDs as keys and the bonus amount each employee receives as values.",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def distribute_performance_incentives(\n    employee_performance: Dict[str, float],\n    bonus_pool: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-21",
    "snippet": "def generate_employee_shift_schedules(\n    employee_availability: Dict[str, List[str]],\n    workload: Dict[str, int]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate employee shift schedules based on their availability and the workload.\n\n    Parameters:\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\n                                                      and the value is a list of days the employee is available.\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \n                                   and the value is the number of employees needed for that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \n                              and the value is a list of days the employee is scheduled to work.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def generate_employee_shift_schedules(\\n    employee_availability: Dict[str, List[str]],\\n    workload: Dict[str, int]\\n) -> Dict[str, List[str]]:\\n    \\\"\\\"\\\"\\n    Generate employee shift schedules based on their availability and the workload.\\n\\n    Parameters:\\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\\n                                                      and the value is a list of days the employee is available.\\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \\n                                   and the value is the number of employees needed for that day.\\n\\n    Returns:\\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \\n                              and the value is a list of days the employee is scheduled to work.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"generate_employee_shift_schedules\",\n        \"description\": \"Generate employee shift schedules based on their availability and the workload.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_availability\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is an employee name, and the value is a list of days the employee is available.\",\n                    \"properties\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"workload\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.\",\n                    \"properties\": {\n                        \"type\": \"integer\"\n                    }\n                }\n            },\n            \"required\": [\"employee_availability\", \"workload\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def generate_employee_shift_schedules(\n    employee_availability: Dict[str, List[str]],\n    workload: Dict[str, int]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate employee shift schedules based on their availability and the workload.\n\n    Parameters:\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\n                                                      and the value is a list of days the employee is available.\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \n                                   and the value is the number of employees needed for that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \n                              and the value is a list of days the employee is scheduled to work.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "generate_employee_shift_schedules",
            "description": "Generate employee shift schedules based on their availability and the workload.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_availability": {
                        "type": "object",
                        "description": "A dictionary where each key is an employee name, and the value is a list of days the employee is available.",
                        "properties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "workload": {
                        "type": "object",
                        "description": "A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.",
                        "properties": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "employee_availability",
                    "workload"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_employee_shift_schedules(\n    employee_availability: Dict[str, List[str]],\n    workload: Dict[str, int]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate employee shift schedules based on their availability and the workload.\n\n    Parameters:\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\n                                                      and the value is a list of days the employee is available.\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \n                                   and the value is the number of employees needed for that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \n                              and the value is a list of days the employee is scheduled to work.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "business-22",
    "snippet": "def create_and_approve_budgets(\n    budget_details: Dict[str, Union[float, str]],\n    approval_authority: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\n                                                       Each key is the name of a department or project,\n                                                       and the value is a tuple where the first item is the\n                                                       proposed budget amount and the second item is a brief\n                                                       description of the budget.\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\n\n    Returns:\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def create_and_approve_budgets(\\n    budget_details: Dict[str, Union[float, str]],\\n    approval_authority: str,\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Creates and approves budgets for different departments or projects.\\n\\n    Parameters:\\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\\n                                                       Each key is the name of a department or project,\\n                                                       and the value is a tuple where the first item is the\\n                                                       proposed budget amount and the second item is a brief\\n                                                       description of the budget.\\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"create_and_approve_budgets\",\n        \"description\": \"Creates and approves budgets for different departments or projects.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"budget_details\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.\",\n                    \"properties\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"type\": \"number\"\n                        }\n                    }\n                },\n                \"approval_authority\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the person or body who has the authority to approve the budget.\"\n                }\n            },\n            \"required\": [\"budget_details\", \"approval_authority\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"string\"\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_and_approve_budgets(\n    budget_details: Dict[str, Union[float, str]],\n    approval_authority: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\n                                                       Each key is the name of a department or project,\n                                                       and the value is a tuple where the first item is the\n                                                       proposed budget amount and the second item is a brief\n                                                       description of the budget.\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\n\n    Returns:\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\n    \"\"\"\n",
        "function_description": {
            "name": "create_and_approve_budgets",
            "description": "Creates and approves budgets for different departments or projects.",
            "parameters": {
                "type": "object",
                "properties": {
                    "budget_details": {
                        "type": "object",
                        "description": "A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.",
                        "properties": {
                            "type": "object",
                            "properties": {
                                "type": "number"
                            }
                        }
                    },
                    "approval_authority": {
                        "type": "string",
                        "description": "The name of the person or body who has the authority to approve the budget."
                    }
                },
                "required": [
                    "budget_details",
                    "approval_authority"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "string"
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_and_approve_budgets(\n    budget_details: Dict[str, Union[float, str]],\n    approval_authority: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\n                                                       Each key is the name of a department or project,\n                                                       and the value is a tuple where the first item is the\n                                                       proposed budget amount and the second item is a brief\n                                                       description of the budget.\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\n\n    Returns:\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}

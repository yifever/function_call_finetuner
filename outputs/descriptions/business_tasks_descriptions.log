user: 
Below is a snippet of a python function:
    def send_invoice(client_email: str, invoice_number: str, amount_due: float) -> None:
    """
    Sends an invoice to a client.

    Parameters:
        client_email (str): The email address of the client.
        invoice_number (str): The invoice number.
        amount_due (float): The amount due on the invoice.

    Returns:
        None
    """
    # Code to send the invoice to the client's email address
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def send_invoice(client_email: str, invoice_number: str, amount_due: float) -> None:\n    \"\"\"\n    Sends an invoice to a client.\n\n    Parameters:\n        client_email (str): The email address of the client.\n        invoice_number (str): The invoice number.\n        amount_due (float): The amount due on the invoice.\n\n    Returns:\n        None\n    \"\"\"\n    # Code to send the invoice to the client's email address\n    pass",
    "function_description": {
        "name": "send_invoice",
        "description": "Sends an invoice to a client.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_email": {
                    "type": "string",
                    "description": "The email address of the client."
                },
                "invoice_number": {
                    "type": "string",
                    "description": "The invoice number."
                },
                "amount_due": {
                    "type": "number",
                    "description": "The amount due on the invoice."
                }
            },
            "required": ["client_email", "invoice_number", "amount_due"]
        },
        "returns": {
            "type": "null"
        }
    }
}

user: 
Below is a snippet of a python function:
    def schedule_meeting(
    meeting_time: str,
    meeting_date: str,
    participants: List[str],
    location: str,
) -> bool:
    """
    Schedule a meeting at a specific time, date, and location with the given participants.

    Parameters:
        meeting_time (str): The time of the meeting.
        meeting_date (str): The date of the meeting.
        participants (List[str]): A list of participants' names.
        location (str): The location of the meeting.

    Returns:
        bool: True if the meeting is successfully scheduled, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def schedule_meeting(\nmeeting_time: str,\nmeeting_date: str,\nparticipants: List[str],\nlocation: str,\n) -> bool:\n\"\"\"\nSchedule a meeting at a specific time, date, and location with the given participants.\n\nParameters:\nmeeting_time (str): The time of the meeting.\nmeeting_date (str): The date of the meeting.\nparticipants (List[str]): A list of participants' names.\nlocation (str): The location of the meeting.\n\nReturns:\nbool: True if the meeting is successfully scheduled, False otherwise.\n\"\"\"\n\n",
    "function_description": {
        "name": "schedule_meeting",
        "description": "Schedule a meeting at a specific time, date, and location with the given participants.",
        "parameters": {
            "type": "object",
            "properties": {
                "meeting_time": {
                    "type": "string",
                    "description": "The time of the meeting."
                },
                "meeting_date": {
                    "type": "string",
                    "description": "The date of the meeting."
                },
                "participants": {
                    "type": "array",
                    "description": "A list of participants' names.",
                    "items": {
                        "type": "string"
                    }
                },
                "location": {
                    "type": "string",
                    "description": "The location of the meeting."
                }
            },
            "required": ["meeting_time", "meeting_date", "participants", "location"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the meeting is successfully scheduled, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_sales_report(
    start_date: str,
    end_date: str,
    product_sales: List[Dict[str, Union[str, int, float]]],
) -> Dict[str, Union[str, int, float]]:
    """
    Generates a sales report for a specific time period.

    Parameters:
        start_date (str): The start date of the time period in YYYY-MM-DD format.
        end_date (str): The end date of the time period in YYYY-MM-DD format.
        product_sales (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing product sales details.
                                                                 Each dictionary should have 'product_name', 'quantity', and 'revenue' keys.

    Returns:
        Dict[str, Union[str, int, float]]: A dictionary with 'start_date', 'end_date', 'total_sales', and 'average_sales' as keys.
                                           The 'start_date' and 'end_date' values will be the input start and end dates.
                                           The 'total_sales' value will be the sum of all revenue values in the product_sales list.
                                           The 'average_sales' value will be the average revenue per day within the time period.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str],\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details about the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "example_function",
        "description": "Orders event tickets and returns the total price.",
        "parameters": {
            "type": "object",
            "properties": {
                "num_tickets": {
                    "type": "integer",
                    "description": "The number of tickets to buy."
                },
                "ticket_type": {
                    "type": "object",
                    "description": "The type of ticket.",
                    "properties": {
                        "type": "string"
                    }
                },
                "event_details": {
                    "type": "object",
                    "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "Event data in YYYY-MM-DD format."
                        }
                    },
                    "required": ["date"]
                },
                "attendees": {
                    "type": "array",
                    "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "age": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "age"]
                    }
                }
            },
            "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_price": {
                    "type": "float",
                    "description": "The total price for the tickets ordered."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def perform_employee_evaluation(
    employee_id: int,
    evaluation_date: str,
    evaluation_results: Dict[str, float]
) -> Dict[str, Any]:
    """
    Performs an employee evaluation and returns the evaluation results.

    Parameters:
        employee_id (int): The ID of the employee being evaluated.
        evaluation_date (str): The date of the evaluation in YYYY-MM-DD format.
        evaluation_results (Dict[str, float]): A dictionary containing evaluation results.
                                               Each key represents a different aspect of the evaluation,
                                               and the corresponding value is the score for that aspect.

    Returns:
        Dict[str, Any]: A dictionary with 'employee_id', 'evaluation_date',
                        and 'evaluation_results' as keys and their respective values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def perform_employee_evaluation(\nemployee_id: int,\nevaluation_date: str,\nevaluation_results: Dict[str, float]\n) -> Dict[str, Any]:\n    \"\"\"\n    Performs an employee evaluation and returns the evaluation results.\n\n    Parameters:\n        employee_id (int): The ID of the employee being evaluated.\n        evaluation_date (str): The date of the evaluation in YYYY-MM-DD format.\n        evaluation_results (Dict[str, float]): A dictionary containing evaluation results.\n                                               Each key represents a different aspect of the evaluation,\n                                               and the corresponding value is the score for that aspect.\n\n    Returns:\n        Dict[str, Any]: A dictionary with 'employee_id', 'evaluation_date',\n                        and 'evaluation_results' as keys and their respective values.\n    \"\"\"\n",
    "function_description": {
        "name": "perform_employee_evaluation",
        "description": "Performs an employee evaluation and returns the evaluation results.",
        "parameters": {
            "type": "object",
            "properties": {
                "employee_id": {
                    "type": "integer",
                    "description": "The ID of the employee being evaluated."
                },
                "evaluation_date": {
                    "type": "string",
                    "description": "The date of the evaluation in YYYY-MM-DD format."
                },
                "evaluation_results": {
                    "type": "object",
                    "description": "A dictionary containing evaluation results. Each key represents a different aspect of the evaluation, and the corresponding value is the score for that aspect.",
                    "properties": {
                        "type": "float"
                    }
                }
            },
            "required": ["employee_id", "evaluation_date", "evaluation_results"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "employee_id": {
                    "type": "integer",
                    "description": "The ID of the employee being evaluated."
                },
                "evaluation_date": {
                    "type": "string",
                    "description": "The date of the evaluation in YYYY-MM-DD format."
                },
                "evaluation_results": {
                    "type": "object",
                    "description": "A dictionary containing evaluation results. Each key represents a different aspect of the evaluation, and the corresponding value is the score for that aspect.",
                    "properties": {
                        "type": "float"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def create_account(
    name: str,
    email: str,
    password: str,
    address: str,
    phone: str,
) -> str:
    """
    Create an account for a new customer.

    Parameters:
        name (str): The customer's name.
        email (str): The customer's email address.
        password (str): The customer's password.
        address (str): The customer's address.
        phone (str): The customer's phone number.

    Returns:
        str: A message indicating that the account has been created.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def create_account(\n    name: str,\n    email: str,\n    password: str,\n    address: str,\n    phone: str,\n) -> str:\n    \"\"\"\n    Create an account for a new customer.\n\n    Parameters:\n        name (str): The customer's name.\n        email (str): The customer's email address.\n        password (str): The customer's password.\n        address (str): The customer's address.\n        phone (str): The customer's phone number.\n\n    Returns:\n        str: A message indicating that the account has been created.\n    \"\"\"\n",
    "function_description": {
        "name": "create_account",
        "description": "Create an account for a new customer.",
        "parameters": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The customer's name."
                },
                "email": {
                    "type": "string",
                    "description": "The customer's email address."
                },
                "password": {
                    "type": "string",
                    "description": "The customer's password."
                },
                "address": {
                    "type": "string",
                    "description": "The customer's address."
                },
                "phone": {
                    "type": "string",
                    "description": "The customer's phone number."
                }
            },
            "required": ["name", "email", "password", "address", "phone"]
        }
    }
}

user: 
Below is a snippet of a python function:
    def calculate_payroll(employee_id: int, hours_worked: float, hourly_rate: float) -> float:
    """
    Calculates the payroll for an employee based on their hours worked and hourly rate.

    Parameters:
        employee_id (int): The unique identifier for the employee.
        hours_worked (float): The number of hours the employee worked.
        hourly_rate (float): The hourly rate for the employee.

    Returns:
        float: The total payroll for the employee.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def calculate_payroll(employee_id: int, hours_worked: float, hourly_rate: float) -> float:\n    \"\"\"\n    Calculates the payroll for an employee based on their hours worked and hourly rate.\n\n    Parameters:\n        employee_id (int): The unique identifier for the employee.\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The hourly rate for the employee.\n\n    Returns:\n        float: The total payroll for the employee.\n    \"\"\"\n    \n    # Function implementation goes here",
    "function_description": {
        "name": "calculate_payroll",
        "description": "Calculates the payroll for an employee based on their hours worked and hourly rate.",
        "parameters": {
            "type": "object",
            "properties": {
                "employee_id": {
                    "type": "integer",
                    "description": "The unique identifier for the employee."
                },
                "hours_worked": {
                    "type": "float",
                    "description": "The number of hours the employee worked."
                },
                "hourly_rate": {
                    "type": "float",
                    "description": "The hourly rate for the employee."
                }
            },
            "required": ["employee_id", "hours_worked", "hourly_rate"]
        },
        "returns": {
            "type": "float",
            "description": "The total payroll for the employee."
        }
    }
}

user: 
Below is a snippet of a python function:
    def calculate_payroll(team: List[Dict[str, Union[str, float]]]) -> Dict[str, float]:
    """
    Calculates the payroll for a team.

    Parameters:
        team (List[Dict[str, Union[str, float]]]): A list of dictionaries representing team members.
                                                  Each dictionary should have 'name', 'position', and 'salary' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_payroll' as a key and the total payroll as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def calculate_payroll(team: List[Dict[str, Union[str, float]]]) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for a team.\n\n    Parameters:\n        team (List[Dict[str, Union[str, float]]]): A list of dictionaries representing team members.\n                                                  Each dictionary should have 'name', 'position', and 'salary' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_payroll' as a key and the total payroll as a value.\n    \"\"\"\n\n",
    "function_description": {
        "name": "calculate_payroll",
        "description": "Calculates the payroll for a team.",
        "parameters": {
            "type": "object",
            "properties": {
                "team": {
                    "type": "array",
                    "description": "A list of dictionaries representing team members. Each dictionary should have 'name', 'position', and 'salary' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "position": {
                                "type": "string"
                            },
                            "salary": {
                                "type": "number"
                            }
                        },
                        "required": ["name", "position", "salary"]
                    }
                }
            },
            "required": ["team"]
        }
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_payroll": {
                "type": "number",
                "description": "The total payroll for the team."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def update_inventory_stock_data(
    product_id: str,
    quantity: int,
) -> None:
    """
    Updates the stock data for a specific product.

    Parameters:
        product_id (str): The ID of the product to update.
        quantity (int): The new quantity of the product in stock.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> None:\n    \"\"\"\n    Updates the stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product to update.\n        quantity (int): The new quantity of the product in stock.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "update_inventory_stock_data",
        "description": "Updates the stock data for a specific product.",
        "parameters": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "string",
                    "description": "The ID of the product to update."
                },
                "quantity": {
                    "type": "integer",
                    "description": "The new quantity of the product in stock."
                }
            },
            "required": ["product_id", "quantity"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def track_shipment(
    shipment_id: str,
    carrier: str,
    tracking_number: str,
) -> Dict[str, str]:
    """
    Tracks the status of a shipment.

    Parameters:
        shipment_id (str): The unique identifier for the shipment.
        carrier (str): The name of the carrier company.
        tracking_number (str): The tracking number for the shipment.

    Returns:
        Dict[str, str]: A dictionary with 'status' as a key and the current status of the shipment as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def track_shipment(\n    shipment_id: str,\n    carrier: str,\n    tracking_number: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment.\n\n    Parameters:\n        shipment_id (str): The unique identifier for the shipment.\n        carrier (str): The name of the carrier company.\n        tracking_number (str): The tracking number for the shipment.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the current status of the shipment as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "track_shipment",
        "description": "Tracks the status of a shipment.",
        "parameters": {
            "type": "object",
            "properties": {
                "shipment_id": {
                    "type": "string",
                    "description": "The unique identifier for the shipment."
                },
                "carrier": {
                    "type": "string",
                    "description": "The name of the carrier company."
                },
                "tracking_number": {
                    "type": "string",
                    "description": "The tracking number for the shipment."
                }
            },
            "required": ["shipment_id", "carrier", "tracking_number"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The current status of the shipment."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def assign_ticket_to_agent(
    ticket_id: int,
    agent_id: int,
    assigned_tickets: Dict[int, int],
) -> None:
    """
    Assigns a customer support ticket to an agent.

    Parameters:
        ticket_id (int): The ID of the ticket to assign.
        agent_id (int): The ID of the agent to assign the ticket to.
        assigned_tickets (Dict[int, int]): A dictionary mapping ticket IDs to agent IDs.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n    assigned_tickets: Dict[int, int],\n) -> None:\n    \"\"\"\n    Assigns a customer support ticket to an agent.\n\n    Parameters:\n        ticket_id (int): The ID of the ticket to assign.\n        agent_id (int): The ID of the agent to assign the ticket to.\n        assigned_tickets (Dict[int, int]): A dictionary mapping ticket IDs to agent IDs.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "assign_ticket_to_agent",
        "description": "Assigns a customer support ticket to an agent.",
        "parameters": {
            "type": "object",
            "properties": {
                "ticket_id": {
                    "type": "integer",
                    "description": "The ID of the ticket to assign."
                },
                "agent_id": {
                    "type": "integer",
                    "description": "The ID of the agent to assign the ticket to."
                },
                "assigned_tickets": {
                    "type": "object",
                    "description": "A dictionary mapping ticket IDs to agent IDs.",
                    "properties": {
                        "ticket_id": {
                            "type": "integer"
                        },
                        "agent_id": {
                            "type": "integer"
                        }
                    }
                }
            },
            "required": ["ticket_id", "agent_id", "assigned_tickets"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "None": {
                    "type": "null"
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_discount_code(customer_id: int) -> str:
    """
    Generates a unique discount code for a customer for marketing promotions.

    Parameters:
        customer_id (int): The ID of the customer.

    Returns:
        str: A unique discount code for the customer.
    """
    discount_code = f"DISCOUNT{customer_id}"
    return discount_code    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_discount_code(customer_id: int) -> str:\n    \"\"\"\n    Generates a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n\n    Returns:\n        str: A unique discount code for the customer.\n    \"\"\"\n    discount_code = f\"DISCOUNT{customer_id}\"\n    return discount_code",
    "function_description": {
        "name": "generate_discount_code",
        "description": "Generates a unique discount code for a customer for marketing promotions.",
        "parameters": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "integer",
                    "description": "The ID of the customer."
                }
            },
            "required": ["customer_id"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "discount_code": {
                    "type": "string",
                    "description": "A unique discount code for the customer."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def enable_subscription(
    customer_id: int,
    services: List[str]
) -> bool:
    """
    Enables a customer's subscription to various services.

    Parameters:
        customer_id (int): The ID of the customer.
        services (List[str]): A list of services to enable for the customer.

    Returns:
        bool: True if the subscription is enabled successfully, False otherwise.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def enable_subscription(\n    customer_id: int,\n    services: List[str]\n) -> bool:\n    \"\"\"\n    Enables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n        services (List[str]): A list of services to enable for the customer.\n\n    Returns:\n        bool: True if the subscription is enabled successfully, False otherwise.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "enable_subscription",
        "description": "Enables a customer's subscription to various services.",
        "parameters": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "integer",
                    "description": "The ID of the customer."
                },
                "services": {
                    "type": "array",
                    "description": "A list of services to enable for the customer.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["customer_id", "services"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the subscription is enabled successfully, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def disable_subscription(customer_id: str, services: List[str]) -> None:
    """
    Disables a customer's subscription to various services.

    Parameters:
        customer_id (str): The ID of the customer.
        services (List[str]): A list of services to disable.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def disable_subscription(customer_id: str, services: List[str]) -> None:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer.\n        services (List[str]): A list of services to disable.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "disable_subscription",
        "description": "Disables a customer's subscription to various services.",
        "parameters": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string",
                    "description": "The ID of the customer."
                },
                "services": {
                    "type": "array",
                    "description": "A list of services to disable.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["customer_id", "services"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def modify_customer_subscription(
    customer_id: int,
    subscription_id: int,
    new_services: List[str],
) -> bool:
    """
    Modifies a customer's subscription to various services.

    Parameters:
        customer_id (int): The ID of the customer.
        subscription_id (int): The ID of the subscription to modify.
        new_services (List[str]): A list of new services to add to the subscription.

    Returns:
        bool: True if the modification was successful, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def modify_customer_subscription(\n    customer_id: int,\n    subscription_id: int,\n    new_services: List[str],\n) -> bool:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n        subscription_id (int): The ID of the subscription to modify.\n        new_services (List[str]): A list of new services to add to the subscription.\n\n    Returns:\n        bool: True if the modification was successful, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "modify_customer_subscription",
        "description": "Modifies a customer's subscription to various services.",
        "parameters": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "integer",
                    "description": "The ID of the customer."
                },
                "subscription_id": {
                    "type": "integer",
                    "description": "The ID of the subscription to modify."
                },
                "new_services": {
                    "type": "array",
                    "description": "A list of new services to add to the subscription.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["customer_id", "subscription_id", "new_services"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the modification was successful, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def renew_contracts() -> None:
    """
    Renew contracts for services and subscriptions that are expiring.
    """
    # implementation here    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def renew_contracts() -> None:\n    \"\"\"\n    Renew contracts for services and subscriptions that are expiring.\n    \"\"\"\n    # implementation here",
    "function_description": {
        "name": "renew_contracts",
        "description": "Renew contracts for services and subscriptions that are expiring.",
        "parameters": {
            "type": "object",
            "properties": {}
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def backup_business_data() -> None:
    """
    Performs a backup process of important business data.

    Returns:
        None
    """
    # Code implementation for backup process goes here    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def backup_business_data() -> None:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Returns:\n        None\n    \"\"\"\n    # Code implementation for backup process goes here",
    "function_description": {
        "name": "backup_business_data",
        "description": "Performs a backup process of important business data.",
        "parameters": {},
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def check_license(product_key: str) -> bool:
    """
    Checks the validity of a software license for a given product.

    Parameters:
        product_key (str): The product key to check.

    Returns:
        bool: True if the license is valid, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def check_license(product_key: str) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_key (str): The product key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "check_license",
        "description": "Checks the validity of a software license for a given product.",
        "parameters": {
            "type": "object",
            "properties": {
                "product_key": {
                    "type": "string",
                    "description": "The product key to check."
                }
            },
            "required": ["product_key"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the license is valid, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def onboard_new_employee(
    name: str,
    position: str,
    department: str,
    start_date: str,
) -> Dict[str, str]:
    """
    Onboards a new employee and generates a new id, new email account, etc.

    Parameters:
        name (str): The name of the new employee.
        position (str): The position of the new employee.
        department (str): The department of the new employee.
        start_date (str): The start date of the new employee in YYYY-MM-DD format.

    Returns:
        Dict[str, str]: A dictionary with 'id', 'email', and other details as keys and their corresponding values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def onboard_new_employee(\n    name: str,\n    position: str,\n    department: str,\n    start_date: str,\n) -> Dict[str, str]:\n    \n    \"\"\"\n    Onboards a new employee and generates a new id, new email account, etc.\n\n    Parameters:\n        name (str): The name of the new employee.\n        position (str): The position of the new employee.\n        department (str): The department of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'id', 'email', and other details as keys and their corresponding values.\n    \"\"\"\n",
    "function_description": {
        "name": "onboard_new_employee",
        "description": "Onboards a new employee and generates a new id, new email account, etc.",
        "parameters": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the new employee."
                },
                "position": {
                    "type": "string",
                    "description": "The position of the new employee."
                },
                "department": {
                    "type": "string",
                    "description": "The department of the new employee."
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the new employee in YYYY-MM-DD format."
                }
            },
            "required": ["name", "position", "department", "start_date"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The generated id for the new employee."
                },
                "email": {
                    "type": "string",
                    "description": "The generated email account for the new employee."
                },
                "other details": {
                    "type": "string",
                    "description": "Other details about the new employee."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def allocate_resources(
    project_name: str,
    meeting_rooms: List[str],
    equipment: List[str],
    personnel: List[str]
) -> Dict[str, List[str]]:
    """
    Allocates resources like meeting rooms, equipment, and personnel for a project or task force.

    Parameters:
        project_name (str): The name of the project or task force.
        meeting_rooms (List[str]): A list of available meeting rooms.
        equipment (List[str]): A list of available equipment.
        personnel (List[str]): A list of available personnel.

    Returns:
        Dict[str, List[str]]: A dictionary with 'meeting_rooms', 'equipment', and 'personnel' as keys
                              and the allocated resources as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def allocate_resources(\nproject_name: str,\nmeeting_rooms: List[str],\nequipment: List[str],\npersonnel: List[str]\n) -> Dict[str, List[str]]:\n    \n    \"\"\"\n    Allocates resources like meeting rooms, equipment, and personnel for a project or task force.\n\n    Parameters:\n        project_name (str): The name of the project or task force.\n        meeting_rooms (List[str]): A list of available meeting rooms.\n        equipment (List[str]): A list of available equipment.\n        personnel (List[str]): A list of available personnel.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'meeting_rooms', 'equipment', and 'personnel' as keys\n                              and the allocated resources as values.\n    \"\"\"\n",
    "function_description": {
        "name": "allocate_resources",
        "description": "Allocates resources like meeting rooms, equipment, and personnel for a project or task force.",
        "parameters": {
            "type": "object",
            "properties": {
                "project_name": {
                    "type": "string",
                    "description": "The name of the project or task force."
                },
                "meeting_rooms": {
                    "type": "array",
                    "description": "A list of available meeting rooms.",
                    "items": {
                        "type": "string"
                    }
                },
                "equipment": {
                    "type": "array",
                    "description": "A list of available equipment.",
                    "items": {
                        "type": "string"
                    }
                },
                "personnel": {
                    "type": "array",
                    "description": "A list of available personnel.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["project_name", "meeting_rooms", "equipment", "personnel"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "meeting_rooms": {
                    "type": "array",
                    "description": "The allocated meeting rooms.",
                    "items": {
                        "type": "string"
                    }
                },
                "equipment": {
                    "type": "array",
                    "description": "The allocated equipment.",
                    "items": {
                        "type": "string"
                    }
                },
                "personnel": {
                    "type": "array",
                    "description": "The allocated personnel.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def submit_timesheets(
    employee_ids: List[int],
    action: str,
    date: str,
) -> None:
    """
    Submits timesheets for employees.

    Parameters:
        employee_ids (List[int]): A list of employee IDs.
        action (str): The action to perform on the timesheets (approval or archival).
        date (str): The date when the timesheets are submitted.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def submit_timesheets(\n    employee_ids: List[int],\n    action: str,\n    date: str,\n) -> None:\n    \"\"\"\n    Submits timesheets for employees.\n\n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        action (str): The action to perform on the timesheets (approval or archival).\n        date (str): The date when the timesheets are submitted.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "submit_timesheets",
        "description": "Submits timesheets for employees.",
        "parameters": {
            "type": "object",
            "properties": {
                "employee_ids": {
                    "type": "array",
                    "description": "A list of employee IDs.",
                    "items": {
                        "type": "integer"
                    }
                },
                "action": {
                    "type": "string",
                    "description": "The action to perform on the timesheets (approval or archival)."
                },
                "date": {
                    "type": "string",
                    "description": "The date when the timesheets are submitted."
                }
            },
            "required": ["employee_ids", "action", "date"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def calculate_performance_incentives(
    employee_sales: Dict[str, float],
    target_sales: Dict[str, float],
    incentive_rate: float,
) -> Dict[str, float]:
    """
    Calculates and distributes performance-based incentives or bonuses to employees.

    Parameters:
        employee_sales (Dict[str, float]): A dictionary with employee names as keys and their sales as values.
        target_sales (Dict[str, float]): A dictionary with employee names as keys and their target sales as values.
        incentive_rate (float): The rate at which the incentive is calculated.

    Returns:
        Dict[str, float]: A dictionary with employee names as keys and their corresponding incentives as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def calculate_performance_incentives(\nemployee_sales: Dict[str, float],\ntarget_sales: Dict[str, float],\nincentive_rate: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_sales (Dict[str, float]): A dictionary with employee names as keys and their sales as values.\n        target_sales (Dict[str, float]): A dictionary with employee names as keys and their target sales as values.\n        incentive_rate (float): The rate at which the incentive is calculated.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee names as keys and their corresponding incentives as values.\n    \"\"\"\n\n",
    "function_description": {
        "name": "calculate_performance_incentives",
        "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
        "parameters": {
            "type": "object",
            "properties": {
                "employee_sales": {
                    "type": "object",
                    "description": "A dictionary with employee names as keys and their sales as values."
                },
                "target_sales": {
                    "type": "object",
                    "description": "A dictionary with employee names as keys and their target sales as values."
                },
                "incentive_rate": {
                    "type": "float",
                    "description": "The rate at which the incentive is calculated."
                }
            },
            "required": ["employee_sales", "target_sales", "incentive_rate"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "employee_names": {
                    "type": "float",
                    "description": "A dictionary with employee names as keys and their corresponding incentives as values."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_employee_shift_schedules(
    availability: Dict[str, List[str]],
    workload: Dict[str, int],
) -> Dict[str, List[str]]:
    """
    Generates employee shift schedules based on availability and workload.

    Parameters:
        availability (Dict[str, List[str]]): A dictionary mapping employee names to lists of available days.
        workload (Dict[str, int]): A dictionary mapping employee names to their workload.

    Returns:
        Dict[str, List[str]]: A dictionary mapping employee names to lists of assigned shift days.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_employee_shift_schedules(\n    availability: Dict[str, List[str]],\n    workload: Dict[str, int],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates employee shift schedules based on availability and workload.\n\n    Parameters:\n        availability (Dict[str, List[str]]): A dictionary mapping employee names to lists of available days.\n        workload (Dict[str, int]): A dictionary mapping employee names to their workload.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary mapping employee names to lists of assigned shift days.\n    \"\"\"\n",
    "function_description": {
        "name": "generate_employee_shift_schedules",
        "description": "Generates employee shift schedules based on availability and workload.",
        "parameters": {
            "type": "object",
            "properties": {
                "availability": {
                    "type": "object",
                    "description": "A dictionary mapping employee names to lists of available days.",
                    "properties": {
                        "name": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "workload": {
                    "type": "object",
                    "description": "A dictionary mapping employee names to their workload.",
                    "properties": {
                        "name": {
                            "type": "integer"
                        }
                    }
                }
            },
            "required": ["availability", "workload"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def create_and_approve_budgets(
    departments: List[str],
    projects: List[str]
) -> Dict[str, float]:
    """
    Creates and approves budgets for different departments or projects.

    Parameters:
        departments (List[str]): A list of department names.
        projects (List[str]): A list of project names.

    Returns:
        Dict[str, float]: A dictionary with department/project names as keys and the approved budget as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def create_and_approve_budgets(\n    departments: List[str],\n    projects: List[str]\n) -> Dict[str, float]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        departments (List[str]): A list of department names.\n        projects (List[str]): A list of project names.\n\n    Returns:\n        Dict[str, float]: A dictionary with department/project names as keys and the approved budget as values.\n    \"\"\"\n",
    "function_description": {
        "name": "create_and_approve_budgets",
        "description": "Creates and approves budgets for different departments or projects.",
        "parameters": {
            "type": "object",
            "properties": {
                "departments": {
                    "type": "array",
                    "description": "A list of department names.",
                    "items": {
                        "type": "string"
                    }
                },
                "projects": {
                    "type": "array",
                    "description": "A list of project names.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["departments", "projects"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "department/project name": {
                    "type": "float",
                    "description": "The approved budget for the department/project."
                }
            }
        }
    }
}


user: 
Below is a snippet of a python function:
    def book_flight_ticket(
    destination: str,
) -> None:
    """
    Books a flight ticket to a specific destination.

    Parameters:
        destination (str): The destination city.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def book_flight_ticket(\n    destination: str,\n) -> None:\n    \"\"\"\n    Books a flight ticket to a specific destination.\n\n    Parameters:\n        destination (str): The destination city.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "book_flight_ticket",
        "description": "Books a flight ticket to a specific destination.",
        "parameters": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "The destination city."
                }
            },
            "required": ["destination"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def cancel_or_modify_flight_reservation(
    reservation_id: str,
    new_departure_date: str,
    new_passengers: List[Dict[str, str]] = None,
) -> bool:
    """
    Cancels or modifies an existing flight reservation.

    Parameters:
        reservation_id (str): The ID of the reservation to cancel or modify.
        new_departure_date (str): The new departure date in YYYY-MM-DD format.
        new_passengers (List[Dict[str, str]]): Optional. A list of dictionaries containing updated passenger details.
                                               Each dictionary should have 'name' and 'age' keys.

    Returns:
        bool: True if the reservation was successfully canceled or modified, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def cancel_or_modify_flight_reservation(reservation_id: str, new_departure_date: str, new_passengers: List[Dict[str, str]] = None,) -> bool:",
    "function_description": {
        "name": "cancel_or_modify_flight_reservation",
        "description": "Cancels or modifies an existing flight reservation.",
        "parameters": {
            "type": "object",
            "properties": {
                "reservation_id": {
                    "type": "string",
                    "description": "The ID of the reservation to cancel or modify."
                },
                "new_departure_date": {
                    "type": "string",
                    "description": "The new departure date in YYYY-MM-DD format."
                },
                "new_passengers": {
                    "type": "array",
                    "description": "Optional. A list of dictionaries containing updated passenger details. Each dictionary should have 'name' and 'age' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "age": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "age"]
                    }
                }
            },
            "required": ["reservation_id", "new_departure_date"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the reservation was successfully canceled or modified, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def book_accommodations(
    num_rooms: int,
    hotel_name: str,
    check_in_date: str,
    check_out_date: str,
    guests: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Books accommodations at a hotel and returns the total price.

    Parameters:
        num_rooms (int): The number of rooms to book.
        hotel_name (str): The name of the hotel.
        check_in_date (str): The check-in date in YYYY-MM-DD format.
        check_out_date (str): The check-out date in YYYY-MM-DD format.
        guests (List[Dict[str, str]]): A list of dictionaries containing guest details.
                                       Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def book_accommodations(\nnum_rooms: int,\nhotel_name: str,\ncheck_in_date: str,\ncheck_out_date: str,\nguests: List[Dict[str, str]],\n) -> Dict[str, float]:\n\"\"\"\nBooks accommodations at a hotel and returns the total price.\n\nParameters:\nnum_rooms (int): The number of rooms to book.\nhotel_name (str): The name of the hotel.\ncheck_in_date (str): The check-in date in YYYY-MM-DD format.\ncheck_out_date (str): The check-out date in YYYY-MM-DD format.\nguests (List[Dict[str, str]]): A list of dictionaries containing guest details.\nEach dictionary should have 'name' and 'age' keys.\n\nReturns:\nDict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n\"\"\"\n",
    "function_description": {
        "name": "book_accommodations",
        "description": "Books accommodations at a hotel and returns the total price.",
        "parameters": {
            "type": "object",
            "properties": {
                "num_rooms": {
                    "type": "integer",
                    "description": "The number of rooms to book."
                },
                "hotel_name": {
                    "type": "string",
                    "description": "The name of the hotel."
                },
                "check_in_date": {
                    "type": "string",
                    "description": "The check-in date in YYYY-MM-DD format."
                },
                "check_out_date": {
                    "type": "string",
                    "description": "The check-out date in YYYY-MM-DD format."
                },
                "guests": {
                    "type": "array",
                    "description": "A list of dictionaries containing guest details. Each dictionary should have 'name' and 'age' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "age": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "age"]
                    }
                }
            },
            "required": ["num_rooms", "hotel_name", "check_in_date", "check_out_date", "guests"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_price": {
                    "type": "float",
                    "description": "A dictionary with 'total_price' as a key and the total price as a value."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def cancel_modify_hotel_reservation(
    reservation_id: str,
    new_check_in_date: str,
    new_check_out_date: str,
    new_guests: List[Dict[str, str]],
) -> bool:
    """
    Cancels or modifies an existing hotel reservation.

    Parameters:
        reservation_id (str): The ID of the reservation to be canceled or modified.
        new_check_in_date (str): The new check-in date in YYYY-MM-DD format.
        new_check_out_date (str): The new check-out date in YYYY-MM-DD format.
        new_guests (List[Dict[str, str]]): A list of dictionaries containing new guest details.
                                           Each dictionary should have 'name' and 'age' keys.

    Returns:
        bool: True if the reservation was successfully canceled or modified, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def cancel_modify_hotel_reservation(\n    reservation_id: str,\n    new_check_in_date: str,\n    new_check_out_date: str,\n    new_guests: List[Dict[str, str]],\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing hotel reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the reservation to be canceled or modified.\n        new_check_in_date (str): The new check-in date in YYYY-MM-DD format.\n        new_check_out_date (str): The new check-out date in YYYY-MM-DD format.\n        new_guests (List[Dict[str, str]]): A list of dictionaries containing new guest details.\n                                           Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        bool: True if the reservation was successfully canceled or modified, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "cancel_modify_hotel_reservation",
        "description": "Cancels or modifies an existing hotel reservation.",
        "parameters": {
            "type": "object",
            "properties": {
                "reservation_id": {
                    "type": "string",
                    "description": "The ID of the reservation to be canceled or modified."
                },
                "new_check_in_date": {
                    "type": "string",
                    "description": "The new check-in date in YYYY-MM-DD format."
                },
                "new_check_out_date": {
                    "type": "string",
                    "description": "The new check-out date in YYYY-MM-DD format."
                },
                "new_guests": {
                    "type": "array",
                    "description": "A list of dictionaries containing new guest details. Each dictionary should have 'name' and 'age' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "age": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "age"]
                    }
                }
            },
            "required": ["reservation_id", "new_check_in_date", "new_check_out_date", "new_guests"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the reservation was successfully canceled or modified, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def rent_car_at_destination(
    destination: str,
    start_date: str,
    end_date: str,
) -> str:
    """
    Rent a car at the destination.

    Parameters:
        destination (str): The destination city.
        start_date (str): The start date of the rental period in YYYY-MM-DD format.
        end_date (str): The end date of the rental period in YYYY-MM-DD format.

    Returns:
        str: A string indicating the success of the car rental.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def rent_car_at_destination(\n    destination: str,\n    start_date: str,\n    end_date: str,\n) -> str:\n    \"\"\"\n    Rent a car at the destination.\n\n    Parameters:\n        destination (str): The destination city.\n        start_date (str): The start date of the rental period in YYYY-MM-DD format.\n        end_date (str): The end date of the rental period in YYYY-MM-DD format.\n\n    Returns:\n        str: A string indicating the success of the car rental.\n    \"\"\"",
    "function_description": {
        "name": "rent_car_at_destination",
        "description": "Rent a car at the destination.",
        "parameters": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "The destination city."
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the rental period in YYYY-MM-DD format."
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the rental period in YYYY-MM-DD format."
                }
            },
            "required": ["destination", "start_date", "end_date"]
        },
        "returns": {
            "type": "string",
            "description": "A string indicating the success of the car rental."
        }
    }
}

user: 
Below is a snippet of a python function:
    def cancel_or_modify_car_rental(
    reservation_id: str,
    modifications: Dict[str, Any]
) -> bool:
    """
    Cancels or modifies an existing car rental reservation.

    Parameters:
        reservation_id (str): The ID of the car rental reservation to cancel or modify.
        modifications (Dict[str, Any]): A dictionary containing the modifications to be made.
                                        The keys should represent the fields to be modified and the values
                                        should represent the new values for those fields.

    Returns:
        bool: True if the cancellation or modification was successful, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def cancel_or_modify_car_rental(\n    reservation_id: str,\n    modifications: Dict[str, Any]\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing car rental reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the car rental reservation to cancel or modify.\n        modifications (Dict[str, Any]): A dictionary containing the modifications to be made.\n                                        The keys should represent the fields to be modified and the values\n                                        should represent the new values for those fields.\n\n    Returns:\n        bool: True if the cancellation or modification was successful, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "cancel_or_modify_car_rental",
        "description": "Cancels or modifies an existing car rental reservation.",
        "parameters": {
            "type": "object",
            "properties": {
                "reservation_id": {
                    "type": "string",
                    "description": "The ID of the car rental reservation to cancel or modify."
                },
                "modifications": {
                    "type": "object",
                    "description": "A dictionary containing the modifications to be made. The keys should represent the fields to be modified and the values should represent the new values for those fields.",
                    "additionalProperties": true
                }
            },
            "required": ["reservation_id", "modifications"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the cancellation or modification was successful, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def schedule_airport_transfers(
    num_passengers: int,
    pickup_location: str,
    dropoff_location: str,
    pickup_date: str,
    pickup_time: str,
) -> Dict[str, str]:
    """
    Schedule airport transfers and return the confirmation details.

    Parameters:
        num_passengers (int): The number of passengers requiring airport transfers.
        pickup_location (str): The location where the passengers will be picked up.
        dropoff_location (str): The destination location where the passengers will be dropped off.
        pickup_date (str): The date of the airport transfer in YYYY-MM-DD format.
        pickup_time (str): The time of the airport transfer in HH:MM format.

    Returns:
        Dict[str, str]: A dictionary with 'confirmation_number' and 'pickup_details' as keys,
                        and the respective values as strings.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def schedule_airport_transfers(\n    num_passengers: int,\n    pickup_location: str,\n    dropoff_location: str,\n    pickup_date: str,\n    pickup_time: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedule airport transfers and return the confirmation details.\n\n    Parameters:\n        num_passengers (int): The number of passengers requiring airport transfers.\n        pickup_location (str): The location where the passengers will be picked up.\n        dropoff_location (str): The destination location where the passengers will be dropped off.\n        pickup_date (str): The date of the airport transfer in YYYY-MM-DD format.\n        pickup_time (str): The time of the airport transfer in HH:MM format.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'confirmation_number' and 'pickup_details' as keys,\n                        and the respective values as strings.\n    \"\"\"\n",
    "function_description": {
        "name": "schedule_airport_transfers",
        "description": "Schedule airport transfers and return the confirmation details.",
        "parameters": {
            "type": "object",
            "properties": {
                "num_passengers": {
                    "type": "integer",
                    "description": "The number of passengers requiring airport transfers."
                },
                "pickup_location": {
                    "type": "string",
                    "description": "The location where the passengers will be picked up."
                },
                "dropoff_location": {
                    "type": "string",
                    "description": "The destination location where the passengers will be dropped off."
                },
                "pickup_date": {
                    "type": "string",
                    "description": "The date of the airport transfer in YYYY-MM-DD format."
                },
                "pickup_time": {
                    "type": "string",
                    "description": "The time of the airport transfer in HH:MM format."
                }
            },
            "required": [
                "num_passengers",
                "pickup_location",
                "dropoff_location",
                "pickup_date",
                "pickup_time"
            ]
        },
        "returns": {
            "type": "object",
            "properties": {
                "confirmation_number": {
                    "type": "string",
                    "description": "The confirmation number for the scheduled airport transfer."
                },
                "pickup_details": {
                    "type": "string",
                    "description": "Details about the scheduled pickup, including the location, date, and time."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def track_flight_status(flight_number: str) -> Dict[str, str]:
    """
    Track the status of a flight, including delays and cancellations.

    Parameters:
        flight_number (str): The flight number.

    Returns:
        Dict[str, str]: A dictionary with 'status' as a key and the flight status as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def track_flight_status(flight_number: str) -> Dict[str, str]:\n    \"\"\"\n    Track the status of a flight, including delays and cancellations.\n\n    Parameters:\n        flight_number (str): The flight number.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the flight status as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "track_flight_status",
        "description": "Track the status of a flight, including delays and cancellations.",
        "parameters": {
            "type": "object",
            "properties": {
                "flight_number": {
                    "type": "string",
                    "description": "The flight number."
                }
            },
            "required": ["flight_number"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The flight status."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def check_in_online(
    flight_number: str,
    passenger_name: str,
    seat_number: str,
) -> str:
    """
    Checks in a passenger for a flight online and returns a confirmation message.

    Parameters:
        flight_number (str): The flight number.
        passenger_name (str): The name of the passenger.
        seat_number (str): The seat number of the passenger.

    Returns:
        str: A confirmation message for the online check-in.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def check_in_online(\n    flight_number: str,\n    passenger_name: str,\n    seat_number: str,\n) -> str:\n    \"\"\"\n    Checks in a passenger for a flight online and returns a confirmation message.\n\n    Parameters:\n        flight_number (str): The flight number.\n        passenger_name (str): The name of the passenger.\n        seat_number (str): The seat number of the passenger.\n\n    Returns:\n        str: A confirmation message for the online check-in.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "check_in_online",
        "description": "Checks in a passenger for a flight online and returns a confirmation message.",
        "parameters": {
            "type": "object",
            "properties": {
                "flight_number": {
                    "type": "string",
                    "description": "The flight number."
                },
                "passenger_name": {
                    "type": "string",
                    "description": "The name of the passenger."
                },
                "seat_number": {
                    "type": "string",
                    "description": "The seat number of the passenger."
                }
            },
            "required": ["flight_number", "passenger_name", "seat_number"]
        },
        "returns": {
            "type": "string",
            "description": "A confirmation message for the online check-in."
        }
    }
}

user: 
Below is a snippet of a python function:
    def retrieve_and_manage_digital_boarding_passes(
    airline: str,
    flight_number: str,
    departure_date: str,
    passengers: List[Dict[str, str]],
) -> List[str]:
    """
    Retrieves and manages digital boarding passes for a given flight.

    Parameters:
        airline (str): The airline name.
        flight_number (str): The flight number.
        departure_date (str): The departure date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.
                                          Each dictionary should have 'name' and 'ticket_number' keys.

    Returns:
        List[str]: A list of digital boarding passes.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def retrieve_and_manage_digital_boarding_passes(\n    airline: str,\n    flight_number: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> List[str]:\n    \"\"\"\n    Retrieves and manages digital boarding passes for a given flight.\n\n    Parameters:\n        airline (str): The airline name.\n        flight_number (str): The flight number.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'ticket_number' keys.\n\n    Returns:\n        List[str]: A list of digital boarding passes.\n    \"\"\"\n\n",
    "function_description": {
        "name": "retrieve_and_manage_digital_boarding_passes",
        "description": "Retrieves and manages digital boarding passes for a given flight.",
        "parameters": {
            "type": "object",
            "properties": {
                "airline": {
                    "type": "string",
                    "description": "The airline name."
                },
                "flight_number": {
                    "type": "string",
                    "description": "The flight number."
                },
                "departure_date": {
                    "type": "string",
                    "description": "The departure date in YYYY-MM-DD format."
                },
                "passengers": {
                    "type": "array",
                    "description": "A list of dictionaries containing passenger details. Each dictionary should have 'name' and 'ticket_number' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "ticket_number": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "ticket_number"]
                    }
                }
            },
            "required": ["airline", "flight_number", "departure_date", "passengers"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of digital boarding passes."
        }
    }
}

user: 
Below is a snippet of a python function:
    def track_and_manage_travel_expenses(
    expenses: List[Dict[str, Union[str, float]]],
    currency: str,
) -> Dict[str, Union[float, Dict[str, float]]]:
    """
    Track and manage travel expenses.

    Parameters:
        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.
                                                      Each dictionary should have 'description' and 'amount' keys.
        currency (str): The currency used for the expenses.

    Returns:
        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'total_expenses' as a key and the total expenses as a value,
                                                   and 'expenses_breakdown' as a key and a dictionary with expense categories as keys
                                                   and the total amount spent in each category as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def track_and_manage_travel_expenses(\n    expenses: List[Dict[str, Union[str, float]]],\n    currency: str,\n) -> Dict[str, Union[float, Dict[str, float]]]:\n    \"\"\"\n    Track and manage travel expenses.\n\n    Parameters:\n        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.\n                                                      Each dictionary should have 'description' and 'amount' keys.\n        currency (str): The currency used for the expenses.\n\n    Returns:\n        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'total_expenses' as a key and the total expenses as a value,\n                                                   and 'expenses_breakdown' as a key and a dictionary with expense categories as keys\n                                                   and the total amount spent in each category as values.\n    \"\"\"\n",
    "function_description": {
        "name": "track_and_manage_travel_expenses",
        "description": "Track and manage travel expenses.",
        "parameters": {
            "type": "object",
            "properties": {
                "expenses": {
                    "type": "array",
                    "description": "A list of dictionaries containing expense details. Each dictionary should have 'description' and 'amount' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "amount": {
                                "type": "float"
                            }
                        },
                        "required": ["description", "amount"]
                    }
                },
                "currency": {
                    "type": "string",
                    "description": "The currency used for the expenses."
                }
            },
            "required": ["expenses", "currency"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_expenses": {
                    "type": "float",
                    "description": "The total expenses."
                },
                "expenses_breakdown": {
                    "type": "object",
                    "description": "A dictionary with expense categories as keys and the total amount spent in each category as values.",
                    "additionalProperties": {
                        "type": "float"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def submit_travel_expenses(
    expenses: List[Dict[str, Union[str, float]]],
    reimbursement_form: str,
) -> bool:
    """
    Submits travel expenses for reimbursement.

    Parameters:
        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.
                                                      Each dictionary should have 'category' and 'amount' keys.
        reimbursement_form (str): The path to the reimbursement form.

    Returns:
        bool: True if the travel expenses are successfully submitted, False otherwise.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def submit_travel_expenses(\n    expenses: List[Dict[str, Union[str, float]]],\n    reimbursement_form: str,\n) -> bool:\n    \"\"\"\n    Submits travel expenses for reimbursement.\n\n    Parameters:\n        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.\n                                                      Each dictionary should have 'category' and 'amount' keys.\n        reimbursement_form (str): The path to the reimbursement form.\n\n    Returns:\n        bool: True if the travel expenses are successfully submitted, False otherwise.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "submit_travel_expenses",
        "description": "Submits travel expenses for reimbursement.",
        "parameters": {
            "type": "object",
            "properties": {
                "expenses": {
                    "type": "array",
                    "description": "A list of dictionaries containing expense details. Each dictionary should have 'category' and 'amount' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "type": "string"
                            },
                            "amount": {
                                "type": "number"
                            }
                        },
                        "required": ["category", "amount"]
                    }
                },
                "reimbursement_form": {
                    "type": "string",
                    "description": "The path to the reimbursement form."
                }
            },
            "required": ["expenses", "reimbursement_form"]
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_travel_itinerary(
    destination: str,
    start_date: str,
    end_date: str,
    activities: List[str],
    accommodations: List[str],
    transportation: str,
) -> str:
    """
    Generates a travel itinerary and returns it as a string.

    Parameters:
        destination (str): The destination city.
        start_date (str): The start date of the trip in YYYY-MM-DD format.
        end_date (str): The end date of the trip in YYYY-MM-DD format.
        activities (List[str]): A list of activities planned for the trip.
        accommodations (List[str]): A list of accommodations planned for the trip.
        transportation (str): The mode of transportation for the trip.

    Returns:
        str: The generated travel itinerary as a string.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_travel_itinerary(\n    destination: str,\n    start_date: str,\n    end_date: str,\n    activities: List[str],\n    accommodations: List[str],\n    transportation: str,\n) -> str:\n    \"\"\"\n    Generates a travel itinerary and returns it as a string.\n\n    Parameters:\n        destination (str): The destination city.\n        start_date (str): The start date of the trip in YYYY-MM-DD format.\n        end_date (str): The end date of the trip in YYYY-MM-DD format.\n        activities (List[str]): A list of activities planned for the trip.\n        accommodations (List[str]): A list of accommodations planned for the trip.\n        transportation (str): The mode of transportation for the trip.\n\n    Returns:\n        str: The generated travel itinerary as a string.\n    \"\"\"\n\n",
    "function_description": {
        "name": "generate_travel_itinerary",
        "description": "Generates a travel itinerary and returns it as a string.",
        "parameters": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "The destination city."
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the trip in YYYY-MM-DD format."
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the trip in YYYY-MM-DD format."
                },
                "activities": {
                    "type": "array",
                    "description": "A list of activities planned for the trip.",
                    "items": {
                        "type": "string"
                    }
                },
                "accommodations": {
                    "type": "array",
                    "description": "A list of accommodations planned for the trip.",
                    "items": {
                        "type": "string"
                    }
                },
                "transportation": {
                    "type": "string",
                    "description": "The mode of transportation for the trip."
                }
            },
            "required": ["destination", "start_date", "end_date", "activities", "accommodations", "transportation"]
        },
        "returns": {
            "type": "string",
            "description": "The generated travel itinerary as a string."
        }
    }
}

user: 
Below is a snippet of a python function:
    def find_nearby_dining_options(
    location: str
) -> List[str]:
    """
    Finds nearby dining options based on location.

    Parameters:
        location (str): The location to search for nearby dining options.

    Returns:
        List[str]: A list of nearby dining options.
    """
    # Code implementation to find nearby dining options based on location    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def find_nearby_dining_options(\n    location: str\n) -> List[str]:\n    \"\"\"\n    Finds nearby dining options based on location.\n\n    Parameters:\n        location (str): The location to search for nearby dining options.\n\n    Returns:\n        List[str]: A list of nearby dining options.\n    \"\"\"\n    # Code implementation to find nearby dining options based on location",
    "function_description": {
        "name": "find_nearby_dining_options",
        "description": "Finds nearby dining options based on location.",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The location to search for nearby dining options."
                }
            },
            "required": ["location"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of nearby dining options."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def schedule_meetings(
    start_time: str,
    end_time: str,
    meeting_duration: int,
    attendees: List[str],
) -> Dict[str, List[str]]:
    """
    Schedule and manage meetings during the trip.

    Parameters:
        start_time (str): The start time of the meetings in HH:MM format.
        end_time (str): The end time of the meetings in HH:MM format.
        meeting_duration (int): The duration of each meeting in minutes.
        attendees (List[str]): A list of attendees for the meetings.

    Returns:
        Dict[str, List[str]]: A dictionary with 'meeting_schedule' as a key and a list of scheduled meetings as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def schedule_meetings(\nstart_time: str,\nend_time: str,\nmeeting_duration: int,\nattendees: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Schedule and manage meetings during the trip.\n\n    Parameters:\n        start_time (str): The start time of the meetings in HH:MM format.\n        end_time (str): The end time of the meetings in HH:MM format.\n        meeting_duration (int): The duration of each meeting in minutes.\n        attendees (List[str]): A list of attendees for the meetings.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'meeting_schedule' as a key and a list of scheduled meetings as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "schedule_meetings",
        "description": "Schedule and manage meetings during the trip.",
        "parameters": {
            "type": "object",
            "properties": {
                "start_time": {
                    "type": "string",
                    "description": "The start time of the meetings in HH:MM format."
                },
                "end_time": {
                    "type": "string",
                    "description": "The end time of the meetings in HH:MM format."
                },
                "meeting_duration": {
                    "type": "integer",
                    "description": "The duration of each meeting in minutes."
                },
                "attendees": {
                    "type": "array",
                    "description": "A list of attendees for the meetings.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["start_time", "end_time", "meeting_duration", "attendees"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "meeting_schedule": {
                    "type": "array",
                    "description": "A list of scheduled meetings."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def book_and_manage_meeting_rooms_or_conference_spaces(
    room_type: str,
    start_time: str,
    end_time: str,
    attendees: List[str],
) -> str:
    """
    Book and manage meeting rooms or conference spaces.

    Parameters:
        room_type (str): The type of room to book.
        start_time (str): The start time of the meeting in HH:MM format.
        end_time (str): The end time of the meeting in HH:MM format.
        attendees (List[str]): A list of attendees' names.

    Returns:
        str: A confirmation message indicating the booking status.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def book_and_manage_meeting_rooms_or_conference_spaces(\nroom_type: str,\nstart_time: str,\nend_time: str,\nattendees: List[str],\n) -> str:\n    \"\"\"\n    Book and manage meeting rooms or conference spaces.\n\n    Parameters:\n        room_type (str): The type of room to book.\n        start_time (str): The start time of the meeting in HH:MM format.\n        end_time (str): The end time of the meeting in HH:MM format.\n        attendees (List[str]): A list of attendees' names.\n\n    Returns:\n        str: A confirmation message indicating the booking status.\n    \"\"\"\n",
    "function_description": {
        "name": "book_and_manage_meeting_rooms_or_conference_spaces",
        "description": "Book and manage meeting rooms or conference spaces.",
        "parameters": {
            "type": "object",
            "properties": {
                "room_type": {
                    "type": "string",
                    "description": "The type of room to book."
                },
                "start_time": {
                    "type": "string",
                    "description": "The start time of the meeting in HH:MM format."
                },
                "end_time": {
                    "type": "string",
                    "description": "The end time of the meeting in HH:MM format."
                },
                "attendees": {
                    "type": "array",
                    "description": "A list of attendees' names.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["room_type", "start_time", "end_time", "attendees"]
        },
        "returns": {
            "type": "string",
            "description": "A confirmation message indicating the booking status."
        }
    }
}

user: 
Below is a snippet of a python function:
    def order_supplies_or_equipment(
    meeting_date: str,
    supplies_needed: List[str],
    equipment_needed: List[str],
) -> Dict[str, List[str]]:
    """
    Orders supplies or equipment for the meeting.

    Parameters:
        meeting_date (str): The date of the meeting in YYYY-MM-DD format.
        supplies_needed (List[str]): A list of supplies needed for the meeting.
        equipment_needed (List[str]): A list of equipment needed for the meeting.

    Returns:
        Dict[str, List[str]]: A dictionary with 'supplies_ordered' and 'equipment_ordered' as keys.
                             The values are lists containing the ordered supplies and equipment, respectively.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def order_supplies_or_equipment(\n    meeting_date: str,\n    supplies_needed: List[str],\n    equipment_needed: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Orders supplies or equipment for the meeting.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        supplies_needed (List[str]): A list of supplies needed for the meeting.\n        equipment_needed (List[str]): A list of equipment needed for the meeting.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'supplies_ordered' and 'equipment_ordered' as keys.\n                             The values are lists containing the ordered supplies and equipment, respectively.\n    \"\"\"",
    "function_description": {
        "name": "order_supplies_or_equipment",
        "description": "Orders supplies or equipment for the meeting.",
        "parameters": {
            "type": "object",
            "properties": {
                "meeting_date": {
                    "type": "string",
                    "description": "The date of the meeting in YYYY-MM-DD format."
                },
                "supplies_needed": {
                    "type": "array",
                    "description": "A list of supplies needed for the meeting.",
                    "items": {
                        "type": "string"
                    }
                },
                "equipment_needed": {
                    "type": "array",
                    "description": "A list of equipment needed for the meeting.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["meeting_date", "supplies_needed", "equipment_needed"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "supplies_ordered": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "equipment_ordered": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def find_and_use_coworking_spaces(
    location: str,
    date: str,
    num_people: int,
) -> List[Dict[str, str]]:
    """
    Finds and uses co-working spaces at a given location and date.

    Parameters:
        location (str): The location where co-working spaces are to be found.
        date (str): The date when co-working spaces are to be used in YYYY-MM-DD format.
        num_people (int): The number of people using the co-working space.

    Returns:
        List[Dict[str, str]]: A list of dictionaries containing the details of each co-working space.
                              Each dictionary should have 'name', 'address', and 'price' keys.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def find_and_use_coworking_spaces(\n    location: str,\n    date: str,\n    num_people: int,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Finds and uses co-working spaces at a given location and date.\n\n    Parameters:\n        location (str): The location where co-working spaces are to be found.\n        date (str): The date when co-working spaces are to be used in YYYY-MM-DD format.\n        num_people (int): The number of people using the co-working space.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing the details of each co-working space.\n                              Each dictionary should have 'name', 'address', and 'price' keys.\n    \"\"\"\n",
    "function_description": {
        "name": "find_and_use_coworking_spaces",
        "description": "Finds and uses co-working spaces at a given location and date.",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The location where co-working spaces are to be found."
                },
                "date": {
                    "type": "string",
                    "description": "The date when co-working spaces are to be used in YYYY-MM-DD format."
                },
                "num_people": {
                    "type": "integer",
                    "description": "The number of people using the co-working space."
                }
            },
            "required": ["location", "date", "num_people"]
        },
        "returns": {
            "type": "array",
            "description": "A list of dictionaries containing the details of each co-working space. Each dictionary should have 'name', 'address', and 'price' keys.",
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "price": {
                        "type": "string"
                    }
                },
                "required": ["name", "address", "price"]
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def arrange_local_transportation(
    location: str,
    num_passengers: int,
    pickup_time: str,
    dropoff_time: str,
) -> Dict[str, str]:
    """
    Arranges for local transportation like taxis or rideshares.

    Parameters:
        location (str): The location where transportation is needed.
        num_passengers (int): The number of passengers.
        pickup_time (str): The desired pickup time.
        dropoff_time (str): The desired dropoff time.

    Returns:
        Dict[str, str]: A dictionary with 'confirmation_number' as a key and the confirmation number as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def arrange_local_transportation(\n    location: str,\n    num_passengers: int,\n    pickup_time: str,\n    dropoff_time: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Arranges for local transportation like taxis or rideshares.\n\n    Parameters:\n        location (str): The location where transportation is needed.\n        num_passengers (int): The number of passengers.\n        pickup_time (str): The desired pickup time.\n        dropoff_time (str): The desired dropoff time.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'confirmation_number' as a key and the confirmation number as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "arrange_local_transportation",
        "description": "Arranges for local transportation like taxis or rideshares.",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The location where transportation is needed."
                },
                "num_passengers": {
                    "type": "integer",
                    "description": "The number of passengers."
                },
                "pickup_time": {
                    "type": "string",
                    "description": "The desired pickup time."
                },
                "dropoff_time": {
                    "type": "string",
                    "description": "The desired dropoff time."
                }
            },
            "required": ["location", "num_passengers", "pickup_time", "dropoff_time"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "confirmation_number": {
                    "type": "string",
                    "description": "The confirmation number for the arranged local transportation."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def exchange_currency(amount: float, base_currency: str, target_currency: str) -> float:
    """
    Exchange currency based on current exchange rates.

    Parameters:
        amount (float): The amount of currency to exchange.
        base_currency (str): The currency to convert from.
        target_currency (str): The currency to convert to.

    Returns:
        float: The exchanged amount in the target currency.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def exchange_currency(amount: float, base_currency: str, target_currency: str) -> float:\n    \"\"\"\n    Exchange currency based on current exchange rates.\n\n    Parameters:\n        amount (float): The amount of currency to exchange.\n        base_currency (str): The currency to convert from.\n        target_currency (str): The currency to convert to.\n\n    Returns:\n        float: The exchanged amount in the target currency.\n    \"\"\"\n\n",
    "function_description": {
        "name": "exchange_currency",
        "description": "Exchange currency based on current exchange rates.",
        "parameters": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "float",
                    "description": "The amount of currency to exchange."
                },
                "base_currency": {
                    "type": "string",
                    "description": "The currency to convert from."
                },
                "target_currency": {
                    "type": "string",
                    "description": "The currency to convert to."
                }
            },
            "required": ["amount", "base_currency", "target_currency"]
        },
        "returns": {
            "type": "float",
            "description": "The exchanged amount in the target currency."
        }
    }
}

user: 
Below is a snippet of a python function:
    def find_points_of_interest(
    location: str,
    categories: List[str],
    radius: float,
) -> List[Dict[str, Any]]:
    """
    Find and navigate to points of interest or necessary locations.

    Parameters:
        location (str): The location to search for points of interest.
        categories (List[str]): A list of categories to filter the points of interest.
        radius (float): The radius in meters to search for points of interest.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing the details of the points of interest.
                             Each dictionary should have 'name', 'latitude', 'longitude', and 'address' keys.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def find_points_of_interest(\n    location: str,\n    categories: List[str],\n    radius: float,\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Find and navigate to points of interest or necessary locations.\n\n    Parameters:\n        location (str): The location to search for points of interest.\n        categories (List[str]): A list of categories to filter the points of interest.\n        radius (float): The radius in meters to search for points of interest.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing the details of the points of interest.\n                             Each dictionary should have 'name', 'latitude', 'longitude', and 'address' keys.\n    \"\"\"\n",
    "function_description": {
        "name": "find_points_of_interest",
        "description": "Find and navigate to points of interest or necessary locations.",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The location to search for points of interest."
                },
                "categories": {
                    "type": "array",
                    "description": "A list of categories to filter the points of interest.",
                    "items": {
                        "type": "string"
                    }
                },
                "radius": {
                    "type": "number",
                    "description": "The radius in meters to search for points of interest."
                }
            },
            "required": ["location", "categories", "radius"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "address": {
                        "type": "string"
                    }
                },
                "required": ["name", "latitude", "longitude", "address"]
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def translate_text_or_spoken_language(
    text: str,
    source_language: str,
    target_language: str,
) -> str:
    """
    Translates the given text or spoken language from the source language to the target language.

    Parameters:
        text (str): The text or spoken language to be translated.
        source_language (str): The language of the text or spoken language.
        target_language (str): The desired language for translation.

    Returns:
        str: The translated text or spoken language.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def translate_text_or_spoken_language(\n    text: str,\n    source_language: str,\n    target_language: str,\n) -> str:\n    \"\"\"\n    Translates the given text or spoken language from the source language to the target language.\n\n    Parameters:\n        text (str): The text or spoken language to be translated.\n        source_language (str): The language of the text or spoken language.\n        target_language (str): The desired language for translation.\n\n    Returns:\n        str: The translated text or spoken language.\n    \"\"\"\n",
    "function_description": {
        "name": "translate_text_or_spoken_language",
        "description": "Translates the given text or spoken language from the source language to the target language.",
        "parameters": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "The text or spoken language to be translated."
                },
                "source_language": {
                    "type": "string",
                    "description": "The language of the text or spoken language."
                },
                "target_language": {
                    "type": "string",
                    "description": "The desired language for translation."
                }
            },
            "required": ["text", "source_language", "target_language"]
        },
        "returns": {
            "type": "string",
            "description": "The translated text or spoken language."
        }
    }
}

user: 
Below is a snippet of a python function:
    def receive_safety_alerts_or_travel_advisories() -> None:
    """
    Receives safety alerts or travel advisories.

    Returns:
        None
    """
    # Code implementation goes here    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def receive_safety_alerts_or_travel_advisories() -> None:\n    \"\"\"\n    Receives safety alerts or travel advisories.\n\n    Returns:\n        None\n    \"\"\"\n    # Code implementation goes here",
    "function_description": {
        "name": "receive_safety_alerts_or_travel_advisories",
        "description": "Receives safety alerts or travel advisories.",
        "parameters": {},
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def access_manage_travel_documents(
    document_type: str,
    document_number: str,
    expiration_date: str,
    document_owner: str,
    document_file: str,
) -> Dict[str, str]:
    """
    Accesses and manages digital copies of important travel documents.

    Parameters:
        document_type (str): The type of the travel document.
        document_number (str): The document number.
        expiration_date (str): The expiration date of the document.
        document_owner (str): The owner of the document.
        document_file (str): The file path of the digital copy.

    Returns:
        Dict[str, str]: A dictionary with 'document_type', 'document_number', 'expiration_date', 'document_owner',
                        and 'document_file' keys and their respective values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def access_manage_travel_documents(\n    document_type: str,\n    document_number: str,\n    expiration_date: str,\n    document_owner: str,\n    document_file: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Accesses and manages digital copies of important travel documents.\n\n    Parameters:\n        document_type (str): The type of the travel document.\n        document_number (str): The document number.\n        expiration_date (str): The expiration date of the document.\n        document_owner (str): The owner of the document.\n        document_file (str): The file path of the digital copy.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'document_type', 'document_number', 'expiration_date', 'document_owner',\n                        and 'document_file' keys and their respective values.\n    \"\"\"\n\n",
    "function_description": {
        "name": "access_manage_travel_documents",
        "description": "Accesses and manages digital copies of important travel documents.",
        "parameters": {
            "type": "object",
            "properties": {
                "document_type": {
                    "type": "string",
                    "description": "The type of the travel document."
                },
                "document_number": {
                    "type": "string",
                    "description": "The document number."
                },
                "expiration_date": {
                    "type": "string",
                    "description": "The expiration date of the document."
                },
                "document_owner": {
                    "type": "string",
                    "description": "The owner of the document."
                },
                "document_file": {
                    "type": "string",
                    "description": "The file path of the digital copy."
                }
            },
            "required": ["document_type", "document_number", "expiration_date", "document_owner", "document_file"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "document_type": {
                    "type": "string"
                },
                "document_number": {
                    "type": "string"
                },
                "expiration_date": {
                    "type": "string"
                },
                "document_owner": {
                    "type": "string"
                },
                "document_file": {
                    "type": "string"
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def check_visa_requirements_and_application_status(
    passport_number: str,
    destination_country: str,
    departure_date: str,
) -> Dict[str, str]:
    """
    Checks visa requirements and application status for a given passport number, destination country,
    and departure date.

    Parameters:
        passport_number (str): The passport number of the traveler.
        destination_country (str): The country the traveler intends to visit.
        departure_date (str): The departure date in YYYY-MM-DD format.

    Returns:
        Dict[str, str]: A dictionary with 'requirements' and 'status' as keys and their respective values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def check_visa_requirements_and_application_status(\n    passport_number: str,\n    destination_country: str,\n    departure_date: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Checks visa requirements and application status for a given passport number, destination country,\n    and departure date.\n\n    Parameters:\n        passport_number (str): The passport number of the traveler.\n        destination_country (str): The country the traveler intends to visit.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'requirements' and 'status' as keys and their respective values.\n    \"\"\"\n",
    "function_description": {
        "name": "check_visa_requirements_and_application_status",
        "description": "Checks visa requirements and application status for a given passport number, destination country, and departure date.",
        "parameters": {
            "type": "object",
            "properties": {
                "passport_number": {
                    "type": "string",
                    "description": "The passport number of the traveler."
                },
                "destination_country": {
                    "type": "string",
                    "description": "The country the traveler intends to visit."
                },
                "departure_date": {
                    "type": "string",
                    "description": "The departure date in YYYY-MM-DD format."
                }
            },
            "required": ["passport_number", "destination_country", "departure_date"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "requirements": {
                    "type": "string",
                    "description": "The visa requirements for the traveler."
                },
                "status": {
                    "type": "string",
                    "description": "The application status for the traveler."
                }
            }
        }
    }
}


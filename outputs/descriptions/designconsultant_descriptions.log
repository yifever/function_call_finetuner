user: 
Below is a snippet of a python function:
    def create_project_outline(client_name: str, project_description: str) -> str:
    """
    Creates a new project outline or scope of work for a client.

    Parameters:
        client_name (str): The name of the client.
        project_description (str): A description of the project.

    Returns:
        str: The project outline or scope of work.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def create_project_outline(client_name: str, project_description: str) -> str:\n    \"\"\"\n    Creates a new project outline or scope of work for a client.\n\n    Parameters:\n        client_name (str): The name of the client.\n        project_description (str): A description of the project.\n\n    Returns:\n        str: The project outline or scope of work.\n    \"\"\"\n",
    "function_description": {
        "name": "create_project_outline",
        "description": "Creates a new project outline or scope of work for a client.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_name": {
                    "type": "string",
                    "description": "The name of the client."
                },
                "project_description": {
                    "type": "string",
                    "description": "A description of the project."
                }
            },
            "required": ["client_name", "project_description"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "string",
                "description": "The project outline or scope of work."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def send_proposal_or_quotation(
    client_email: str,
    proposal_details: Dict[str, str],
    attachments: List[str],
) -> None:
    """
    Sends a proposal or quotation to a prospective client.

    Parameters:
        client_email (str): The email address of the prospective client.
        proposal_details (Dict[str, str]): A dictionary containing the details of the proposal or quotation.
                                            Each key represents a specific detail (e.g., 'subject', 'body').
        attachments (List[str]): A list of file paths to be attached to the email.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def send_proposal_or_quotation(\n    client_email: str,\n    proposal_details: Dict[str, str],\n    attachments: List[str],\n) -> None:\n    \"\"\"\n    Sends a proposal or quotation to a prospective client.\n\n    Parameters:\n        client_email (str): The email address of the prospective client.\n        proposal_details (Dict[str, str]): A dictionary containing the details of the proposal or quotation.\n                                            Each key represents a specific detail (e.g., 'subject', 'body').\n        attachments (List[str]): A list of file paths to be attached to the email.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "send_proposal_or_quotation",
        "description": "Sends a proposal or quotation to a prospective client.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_email": {
                    "type": "string",
                    "description": "The email address of the prospective client."
                },
                "proposal_details": {
                    "type": "object",
                    "description": "A dictionary containing the details of the proposal or quotation. Each key represents a specific detail (e.g., 'subject', 'body').",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "attachments": {
                    "type": "array",
                    "description": "A list of file paths to be attached to the email.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["client_email", "proposal_details", "attachments"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def schedule_client_meeting(
    client_name: str,
    meeting_date: str,
    meeting_time: str,
    duration: int,
    location: str,
) -> None:
    """
    Schedule a client meeting or consultation.

    Parameters:
        client_name (str): The name of the client.
        meeting_date (str): The date of the meeting in YYYY-MM-DD format.
        meeting_time (str): The time of the meeting in HH:MM format.
        duration (int): The duration of the meeting in minutes.
        location (str): The location of the meeting.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def schedule_client_meeting(\n    client_name: str,\n    meeting_date: str,\n    meeting_time: str,\n    duration: int,\n    location: str,\n) -> None:\n    \n    \"\"\"\n    Schedule a client meeting or consultation.\n\n    Parameters:\n        client_name (str): The name of the client.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        duration (int): The duration of the meeting in minutes.\n        location (str): The location of the meeting.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "schedule_client_meeting",
        "description": "Schedule a client meeting or consultation.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_name": {
                    "type": "string",
                    "description": "The name of the client."
                },
                "meeting_date": {
                    "type": "string",
                    "description": "The date of the meeting in YYYY-MM-DD format."
                },
                "meeting_time": {
                    "type": "string",
                    "description": "The time of the meeting in HH:MM format."
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the meeting in minutes."
                },
                "location": {
                    "type": "string",
                    "description": "The location of the meeting."
                }
            },
            "required": ["client_name", "meeting_date", "meeting_time", "duration", "location"]
        },
        "returns": {
            "type": "none",
            "description": "This function does not return any value."
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_and_send_invoices(
    completed_work: List[Dict[str, Union[str, float]]],
    invoice_template: str,
    recipient_email: str,
) -> None:
    """
    Generates and sends invoices for completed work.

    Parameters:
        completed_work (List[Dict[str, Union[str, float]]]): A list of dictionaries containing details of completed work.
                                                            Each dictionary should have 'work_id', 'client_name', and 'amount' keys.
        invoice_template (str): The template to use for generating the invoices.
        recipient_email (str): The email address of the recipient.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_and_send_invoices(\ncompleted_work: List[Dict[str, Union[str, float]]],\ninvoice_template: str,\nrecipient_email: str,\n) -> None:\n    \"\"\"\n    Generates and sends invoices for completed work.\n\n    Parameters:\n        completed_work (List[Dict[str, Union[str, float]]]): A list of dictionaries containing details of completed work.\n                                                            Each dictionary should have 'work_id', 'client_name', and 'amount' keys.\n        invoice_template (str): The template to use for generating the invoices.\n        recipient_email (str): The email address of the recipient.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "generate_and_send_invoices",
        "description": "Generates and sends invoices for completed work.",
        "parameters": {
            "type": "object",
            "properties": {
                "completed_work": {
                    "type": "array",
                    "description": "A list of dictionaries containing details of completed work. Each dictionary should have 'work_id', 'client_name', and 'amount' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "work_id": {
                                "type": "string"
                            },
                            "client_name": {
                                "type": "string"
                            },
                            "amount": {
                                "type": "number"
                            }
                        },
                        "required": ["work_id", "client_name", "amount"]
                    }
                },
                "invoice_template": {
                    "type": "string",
                    "description": "The template to use for generating the invoices."
                },
                "recipient_email": {
                    "type": "string",
                    "description": "The email address of the recipient."
                }
            },
            "required": ["completed_work", "invoice_template", "recipient_email"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def track_hours(
    projects: List[str],
    start_times: List[datetime],
    end_times: List[datetime]
) -> Dict[str, float]:
    """
    Tracks hours spent on each project for billing purposes.

    Parameters:
        projects (List[str]): A list of project names.
        start_times (List[datetime]): A list of start times for each project.
        end_times (List[datetime]): A list of end times for each project.

    Returns:
        Dict[str, float]: A dictionary with project names as keys and total hours spent as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def track_hours(\nprojects: List[str],\nstart_times: List[datetime],\nend_times: List[datetime]\n) -> Dict[str, float]:\n    \"\"\"\n    Tracks hours spent on each project for billing purposes.\n\n    Parameters:\n        projects (List[str]): A list of project names.\n        start_times (List[datetime]): A list of start times for each project.\n        end_times (List[datetime]): A list of end times for each project.\n\n    Returns:\n        Dict[str, float]: A dictionary with project names as keys and total hours spent as values.\n    \"\"\"\n",
    "function_description": {
        "name": "track_hours",
        "description": "Tracks hours spent on each project for billing purposes.",
        "parameters": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "description": "A list of project names.",
                    "items": {
                        "type": "string"
                    }
                },
                "start_times": {
                    "type": "array",
                    "description": "A list of start times for each project.",
                    "items": {
                        "type": "datetime"
                    }
                },
                "end_times": {
                    "type": "array",
                    "description": "A list of end times for each project.",
                    "items": {
                        "type": "datetime"
                    }
                }
            },
            "required": ["projects", "start_times", "end_times"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "project_hours": {
                    "type": "float",
                    "description": "A dictionary with project names as keys and total hours spent as values."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def upload_design_drafts_to_shared_folder(
    design_drafts: List[str],
    client_folder: str,
) -> None:
    """
    Uploads design drafts to a shared client folder.

    Parameters:
        design_drafts (List[str]): A list of design drafts to upload.
        client_folder (str): The path of the shared client folder.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def upload_design_drafts_to_shared_folder(\n    design_drafts: List[str],\n    client_folder: str,\n) -> None:\n    \"\"\"\n    Uploads design drafts to a shared client folder.\n\n    Parameters:\n        design_drafts (List[str]): A list of design drafts to upload.\n        client_folder (str): The path of the shared client folder.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "upload_design_drafts_to_shared_folder",
        "description": "Uploads design drafts to a shared client folder.",
        "parameters": {
            "type": "object",
            "properties": {
                "design_drafts": {
                    "type": "array",
                    "description": "A list of design drafts to upload.",
                    "items": {
                        "type": "string"
                    }
                },
                "client_folder": {
                    "type": "string",
                    "description": "The path of the shared client folder."
                }
            },
            "required": ["design_drafts", "client_folder"]
        },
        "returns": {
            "type": "none",
            "description": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def download_feedback_or_annotations(folder_path: str) -> List[str]:
    """
    Download client feedback or annotations from a shared folder.

    Parameters:
        folder_path (str): The path of the shared folder.

    Returns:
        List[str]: A list of strings containing the downloaded feedback or annotations.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def download_feedback_or_annotations(folder_path: str) -> List[str]:\n    \"\"\"\n    Download client feedback or annotations from a shared folder.\n\n    Parameters:\n        folder_path (str): The path of the shared folder.\n\n    Returns:\n        List[str]: A list of strings containing the downloaded feedback or annotations.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "download_feedback_or_annotations",
        "description": "Download client feedback or annotations from a shared folder.",
        "parameters": {
            "type": "object",
            "properties": {
                "folder_path": {
                    "type": "string",
                    "description": "The path of the shared folder."
                }
            },
            "required": ["folder_path"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of strings containing the downloaded feedback or annotations."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def post_updates(
    project_id: str,
    updates: List[str],
) -> bool:
    """
    Posts updates to a project management tool or dashboard.

    Parameters:
        project_id (str): The ID of the project to post updates to.
        updates (List[str]): A list of updates to post.

    Returns:
        bool: True if the updates were successfully posted, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def post_updates(\n    project_id: str,\n    updates: List[str],\n) -> bool:\n    \"\"\"\n    Posts updates to a project management tool or dashboard.\n\n    Parameters:\n        project_id (str): The ID of the project to post updates to.\n        updates (List[str]): A list of updates to post.\n\n    Returns:\n        bool: True if the updates were successfully posted, False otherwise.\n    \"\"\"\n    \n    # Function implementation here\n    pass",
    "function_description": {
        "name": "post_updates",
        "description": "Posts updates to a project management tool or dashboard.",
        "parameters": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "string",
                    "description": "The ID of the project to post updates to."
                },
                "updates": {
                    "type": "array",
                    "description": "A list of updates to post.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["project_id", "updates"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the updates were successfully posted, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def collect_final_approval(design_deliverables: List[str]) -> bool:
    """
    Collects final approval from the client on design deliverables.

    Parameters:
        design_deliverables (List[str]): A list of design deliverables.

    Returns:
        bool: True if the client gives final approval, False otherwise.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def collect_final_approval(design_deliverables: List[str]) -> bool:\n    \"\"\"\n    Collects final approval from the client on design deliverables.\n\n    Parameters:\n        design_deliverables (List[str]): A list of design deliverables.\n\n    Returns:\n        bool: True if the client gives final approval, False otherwise.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "collect_final_approval",
        "description": "Collects final approval from the client on design deliverables.",
        "parameters": {
            "type": "object",
            "properties": {
                "design_deliverables": {
                    "type": "array",
                    "description": "A list of design deliverables.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["design_deliverables"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the client gives final approval, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def send_client_satisfaction_survey(
    project_id: str,
    client_email: str,
) -> None:
    """
    Sends a client satisfaction survey upon project completion.

    Parameters:
        project_id (str): The unique identifier of the project.
        client_email (str): The email address of the client.

    Returns:
        None
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def send_client_satisfaction_survey(\n    project_id: str,\n    client_email: str,\n) -> None:\n    \"\"\"\n    Sends a client satisfaction survey upon project completion.\n\n    Parameters:\n        project_id (str): The unique identifier of the project.\n        client_email (str): The email address of the client.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "function_description": {
        "name": "send_client_satisfaction_survey",
        "description": "Sends a client satisfaction survey upon project completion.",
        "parameters": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "string",
                    "description": "The unique identifier of the project."
                },
                "client_email": {
                    "type": "string",
                    "description": "The email address of the client."
                }
            },
            "required": ["project_id", "client_email"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def request_testimonials_or_referrals(client_email: str) -> None:
    """
    Requests testimonials or referrals from satisfied clients.

    Parameters:
        client_email (str): The email address of the client.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def request_testimonials_or_referrals(client_email: str) -> None:\n    \"\"\"\n    Requests testimonials or referrals from satisfied clients.\n\n    Parameters:\n        client_email (str): The email address of the client.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "request_testimonials_or_referrals",
        "description": "Requests testimonials or referrals from satisfied clients.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_email": {
                    "type": "string",
                    "description": "The email address of the client."
                }
            },
            "required": ["client_email"]
        },
        "returns": {
            "type": "None",
            "description": "This function does not return any value."
        }
    }
}

user: 
Below is a snippet of a python function:
    def purchase_renew_licenses(
    software: str,
    num_licenses: int,
    expiration_date: str,
) -> Dict[str, int]:
    """
    Purchase or renew software licenses for design tools.

    Parameters:
        software (str): The name of the software.
        num_licenses (int): The number of licenses to purchase or renew.
        expiration_date (str): The expiration date of the licenses in YYYY-MM-DD format.

    Returns:
        Dict[str, int]: A dictionary with 'num_licenses' as a key and the number of licenses purchased or renewed as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def purchase_renew_licenses(\n    software: str,\n    num_licenses: int,\n    expiration_date: str,\n) -> Dict[str, int]:\n    \"\"\"\n    Purchase or renew software licenses for design tools.\n\n    Parameters:\n        software (str): The name of the software.\n        num_licenses (int): The number of licenses to purchase or renew.\n        expiration_date (str): The expiration date of the licenses in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, int]: A dictionary with 'num_licenses' as a key and the number of licenses purchased or renewed as a value.\n    \"\"\"\n\n",
    "function_description": {
        "name": "purchase_renew_licenses",
        "description": "Purchase or renew software licenses for design tools.",
        "parameters": {
            "type": "object",
            "properties": {
                "software": {
                    "type": "string",
                    "description": "The name of the software."
                },
                "num_licenses": {
                    "type": "integer",
                    "description": "The number of licenses to purchase or renew."
                },
                "expiration_date": {
                    "type": "string",
                    "description": "The expiration date of the licenses in YYYY-MM-DD format."
                }
            },
            "required": ["software", "num_licenses", "expiration_date"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "num_licenses": {
                    "type": "integer",
                    "description": "The number of licenses purchased or renewed."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def back_up_project_files(
    project_directory: str,
    cloud_storage: str,
) -> None:
    """
    Backs up project files to a secure cloud storage.

    Parameters:
        project_directory (str): The directory of the project files to be backed up.
        cloud_storage (str): The secure cloud storage location.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def back_up_project_files(\n    project_directory: str,\n    cloud_storage: str,\n) -> None:\n    \"\"\"\n    Backs up project files to a secure cloud storage.\n\n    Parameters:\n        project_directory (str): The directory of the project files to be backed up.\n        cloud_storage (str): The secure cloud storage location.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "back_up_project_files",
        "description": "Backs up project files to a secure cloud storage.",
        "parameters": {
            "type": "object",
            "properties": {
                "project_directory": {
                    "type": "string",
                    "description": "The directory of the project files to be backed up."
                },
                "cloud_storage": {
                    "type": "string",
                    "description": "The secure cloud storage location."
                }
            },
            "required": ["project_directory", "cloud_storage"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def submit_freelance_tax_forms_or_documentation() -> None:
    """
    Submits freelance tax forms or documentation.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def submit_freelance_tax_forms_or_documentation() -> None:\n    \"\"\"\n    Submits freelance tax forms or documentation.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "submit_freelance_tax_forms_or_documentation",
        "description": "Submits freelance tax forms or documentation.",
        "parameters": {},
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def update_portfolio_with_new_work_samples(
    portfolio: List[str],
    new_work_samples: List[str],
) -> List[str]:
    """
    Updates the portfolio with new work samples.

    Parameters:
        portfolio (List[str]): The current portfolio.
        new_work_samples (List[str]): The new work samples to add.

    Returns:
        List[str]: The updated portfolio with the new work samples added.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def update_portfolio_with_new_work_samples(\n    portfolio: List[str],\n    new_work_samples: List[str],\n) -> List[str]:\n    \"\"\"\n    Updates the portfolio with new work samples.\n\n    Parameters:\n        portfolio (List[str]): The current portfolio.\n        new_work_samples (List[str]): The new work samples to add.\n\n    Returns:\n        List[str]: The updated portfolio with the new work samples added.\n    \"\"\"\n\n",
    "function_description": {
        "name": "update_portfolio_with_new_work_samples",
        "description": "Updates the portfolio with new work samples.",
        "parameters": {
            "type": "object",
            "properties": {
                "portfolio": {
                    "type": "array",
                    "description": "The current portfolio.",
                    "items": {
                        "type": "string"
                    }
                },
                "new_work_samples": {
                    "type": "array",
                    "description": "The new work samples to add.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["portfolio", "new_work_samples"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "The updated portfolio with the new work samples added."
        }
    }
}

user: 
Below is a snippet of a python function:
    def share_new_work_or_achievements(
    title: str,
    description: str,
    link: str,
) -> None:
    """
    Shares new work or achievements on professional social media.

    Parameters:
        title (str): The title of the work or achievement.
        description (str): A description of the work or achievement.
        link (str): A link to the work or achievement.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def share_new_work_or_achievements(\n    title: str,\n    description: str,\n    link: str,\n) -> None:\n    \"\"\"\n    Shares new work or achievements on professional social media.\n\n    Parameters:\n        title (str): The title of the work or achievement.\n        description (str): A description of the work or achievement.\n        link (str): A link to the work or achievement.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "share_new_work_or_achievements",
        "description": "Shares new work or achievements on professional social media.",
        "parameters": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the work or achievement."
                },
                "description": {
                    "type": "string",
                    "description": "A description of the work or achievement."
                },
                "link": {
                    "type": "string",
                    "description": "A link to the work or achievement."
                }
            },
            "required": ["title", "description", "link"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def register_for_professional_development_courses_or_webinars(
    courses: List[str]
) -> List[str]:
    """
    Registers for professional development courses or webinars.

    Parameters:
        courses (List[str]): A list of strings containing the names of the courses/webinars to register for.

    Returns:
        List[str]: A list of strings containing the confirmation messages for each course/webinar registration.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def register_for_professional_development_courses_or_webinars(courses: List[str]) -> List[str]:\n    \"\"\"\n    Registers for professional development courses or webinars.\n\n    Parameters:\n        courses (List[str]): A list of strings containing the names of the courses/webinars to register for.\n\n    Returns:\n        List[str]: A list of strings containing the confirmation messages for each course/webinar registration.\n    \"\"\"\n    \n    # Function implementation goes here",
    "function_description": {
        "name": "register_for_professional_development_courses_or_webinars",
        "description": "Registers for professional development courses or webinars.",
        "parameters": {
            "type": "object",
            "properties": {
                "courses": {
                    "type": "array",
                    "description": "A list of strings containing the names of the courses/webinars to register for.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["courses"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "A list of strings containing the confirmation messages for each course/webinar registration."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def renew_membership(
    organization: str,
    membership_cost: float,
    renewal_date: str,
) -> str:
    """
    Renews membership in professional design organizations.

    Parameters:
        organization (str): The name of the organization to renew membership in.
        membership_cost (float): The cost of membership renewal.
        renewal_date (str): The date on which the membership needs to be renewed.

    Returns:
        str: A string indicating the success or failure of the membership renewal process.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def renew_membership(\n    organization: str,\n    membership_cost: float,\n    renewal_date: str,\n) -> str:\n    \"\"\"\n    Renews membership in professional design organizations.\n\n    Parameters:\n        organization (str): The name of the organization to renew membership in.\n        membership_cost (float): The cost of membership renewal.\n        renewal_date (str): The date on which the membership needs to be renewed.\n\n    Returns:\n        str: A string indicating the success or failure of the membership renewal process.\n    \"\"\"\n",
    "function_description": {
        "name": "renew_membership",
        "description": "Renews membership in professional design organizations.",
        "parameters": {
            "type": "object",
            "properties": {
                "organization": {
                    "type": "string",
                    "description": "The name of the organization to renew membership in."
                },
                "membership_cost": {
                    "type": "float",
                    "description": "The cost of membership renewal."
                },
                "renewal_date": {
                    "type": "string",
                    "description": "The date on which the membership needs to be renewed."
                }
            },
            "required": ["organization", "membership_cost", "renewal_date"]
        },
        "returns": {
            "type": "string",
            "description": "A string indicating the success or failure of the membership renewal process."
        }
    }
}

user: 
Below is a snippet of a python function:
    def compile_and_analyze_feedback(
    feedback: List[str]
) -> Dict[str, Any]:
    """
    Compiles and analyzes client feedback for quality improvement.

    Parameters:
        feedback (List[str]): A list of strings containing client feedback.

    Returns:
        Dict[str, Any]: A dictionary with analysis results.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def compile_and_analyze_feedback(feedback: List[str]) -> Dict[str, Any]:\n    \"\"\"\n    Compiles and analyzes client feedback for quality improvement.\n\n    Parameters:\n        feedback (List[str]): A list of strings containing client feedback.\n\n    Returns:\n        Dict[str, Any]: A dictionary with analysis results.\n    \"\"\"\n",
    "function_description": {
        "name": "compile_and_analyze_feedback",
        "description": "Compiles and analyzes client feedback for quality improvement.",
        "parameters": {
            "type": "object",
            "properties": {
                "feedback": {
                    "type": "array",
                    "description": "A list of strings containing client feedback."
                }
            },
            "required": ["feedback"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_price": {
                    "type": "float",
                    "description": "A dictionary with analysis results."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def review_and_update_contract_templates(
    contract_templates: List[str]
) -> List[str]:
    """
    Review and update standard contract templates.

    Parameters:
        contract_templates (List[str]): A list of contract templates to be reviewed and updated.

    Returns:
        List[str]: A list of updated contract templates.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def review_and_update_contract_templates(\ncontract_templates: List[str]\n) -> List[str]:\n    \"\"\"\n    Review and update standard contract templates.\n\n    Parameters:\n        contract_templates (List[str]): A list of contract templates to be reviewed and updated.\n\n    Returns:\n        List[str]: A list of updated contract templates.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "review_and_update_contract_templates",
        "description": "Review and update standard contract templates.",
        "parameters": {
            "type": "object",
            "properties": {
                "contract_templates": {
                    "type": "array",
                    "description": "A list of contract templates to be reviewed and updated.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["contract_templates"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of updated contract templates."
        }
    }
}


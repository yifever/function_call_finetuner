user: 
Below is a snippet of a python function:
    def send_project_proposal(
    client_email: str,
    project_details: Dict[str, str],
    proposal_file: str,
) -> bool:
    """
    Sends a project proposal to a potential client.

    Parameters:
        client_email (str): The email address of the potential client.
        project_details (Dict[str, str]): A dictionary containing the details of the project.
                                           Keys include 'name', 'description', 'budget', 'timeline', etc.
        proposal_file (str): The file path of the project proposal document.

    Returns:
        bool: True if the project proposal was successfully sent, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def send_project_proposal(\n    client_email: str,\n    project_details: Dict[str, str],\n    proposal_file: str,\n) -> bool:\n    \"\"\"\n    Sends a project proposal to a potential client.\n\n    Parameters:\n        client_email (str): The email address of the potential client.\n        project_details (Dict[str, str]): A dictionary containing the details of the project.\n                                           Keys include 'name', 'description', 'budget', 'timeline', etc.\n        proposal_file (str): The file path of the project proposal document.\n\n    Returns:\n        bool: True if the project proposal was successfully sent, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "send_project_proposal",
        "description": "Sends a project proposal to a potential client.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_email": {
                    "type": "string",
                    "description": "The email address of the potential client."
                },
                "project_details": {
                    "type": "object",
                    "description": "A dictionary containing the details of the project. Keys include 'name', 'description', 'budget', 'timeline', etc.",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "budget": {
                            "type": "string"
                        },
                        "timeline": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "description", "budget", "timeline"]
                },
                "proposal_file": {
                    "type": "string",
                    "description": "The file path of the project proposal document."
                }
            },
            "required": ["client_email", "project_details", "proposal_file"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the project proposal was successfully sent, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def track_billable_hours(
    project_id: str,
    start_date: str,
    end_date: str,
    employee_id: str,
    hours_worked: float,
) -> None:
    """
    Tracks the number of billable hours worked on a project.

    Parameters:
        project_id (str): The ID of the project.
        start_date (str): The start date of the work in YYYY-MM-DD format.
        end_date (str): The end date of the work in YYYY-MM-DD format.
        employee_id (str): The ID of the employee who worked on the project.
        hours_worked (float): The number of billable hours worked on the project.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def track_billable_hours(\nproject_id: str,\nstart_date: str,\nend_date: str,\nemployee_id: str,\nhours_worked: float,\n) -> None:\n    \"\"\"\n    Tracks the number of billable hours worked on a project.\n\n    Parameters:\n        project_id (str): The ID of the project.\n        start_date (str): The start date of the work in YYYY-MM-DD format.\n        end_date (str): The end date of the work in YYYY-MM-DD format.\n        employee_id (str): The ID of the employee who worked on the project.\n        hours_worked (float): The number of billable hours worked on the project.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "track_billable_hours",
        "description": "Tracks the number of billable hours worked on a project.",
        "parameters": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "string",
                    "description": "The ID of the project."
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the work in YYYY-MM-DD format."
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the work in YYYY-MM-DD format."
                },
                "employee_id": {
                    "type": "string",
                    "description": "The ID of the employee who worked on the project."
                },
                "hours_worked": {
                    "type": "float",
                    "description": "The number of billable hours worked on the project."
                }
            },
            "required": ["project_id", "start_date", "end_date", "employee_id", "hours_worked"]
        },
        "returns": {
            "type": "object",
            "properties": {}
        }
    }
}

user: 
Below is a snippet of a python function:
    def invoice_clients(
    client_list: List[Dict[str, Any]],
    completed_work: Dict[str, float]
) -> Dict[str, float]:
    """
    Invoice clients for completed work and returns the total amount to be invoiced.

    Parameters:
        client_list (List[Dict[str, Any]]): A list of dictionaries containing client details.
                                            Each dictionary should have 'name' and 'email' keys.
        completed_work (Dict[str, float]): A dictionary containing the completed work details.
                                            Each key should be the client's name and the value should be the amount to be invoiced.

    Returns:
        Dict[str, float]: A dictionary with 'total_amount' as a key and the total amount to be invoiced as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def invoice_clients(\n    client_list: List[Dict[str, Any]],\n    completed_work: Dict[str, float]\n) -> Dict[str, float]:\n    \"\"\"\n    Invoice clients for completed work and returns the total amount to be invoiced.\n\n    Parameters:\n        client_list (List[Dict[str, Any]]): A list of dictionaries containing client details.\n                                            Each dictionary should have 'name' and 'email' keys.\n        completed_work (Dict[str, float]): A dictionary containing the completed work details.\n                                            Each key should be the client's name and the value should be the amount to be invoiced.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_amount' as a key and the total amount to be invoiced as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "invoice_clients",
        "description": "Invoice clients for completed work and returns the total amount to be invoiced.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_list": {
                    "type": "array",
                    "description": "A list of dictionaries containing client details. Each dictionary should have 'name' and 'email' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "email"]
                    }
                },
                "completed_work": {
                    "type": "object",
                    "description": "A dictionary containing the completed work details. Each key should be the client's name and the value should be the amount to be invoiced.",
                    "properties": {
                        "name (str)": {
                            "type": "float"
                        }
                    }
                }
            },
            "required": ["client_list", "completed_work"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_amount": {
                    "type": "float",
                    "description": "The total amount to be invoiced."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def schedule_meeting_with_client(
    client_name: str,
    project_description: str,
    meeting_date: str,
) -> str:
    """
    Schedules a meeting with a client for project discussion.

    Parameters:
        client_name (str): The name of the client.
        project_description (str): A description of the project.
        meeting_date (str): The date of the meeting in YYYY-MM-DD format.

    Returns:
        str: A string confirming the scheduled meeting.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def schedule_meeting_with_client(\n    client_name: str,\n    project_description: str,\n    meeting_date: str,\n) -> str:\n    \"\"\"\n    Schedules a meeting with a client for project discussion.\n\n    Parameters:\n        client_name (str): The name of the client.\n        project_description (str): A description of the project.\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n\n    Returns:\n        str: A string confirming the scheduled meeting.\n    \"\"\"\n",
    "function_description": {
        "name": "schedule_meeting_with_client",
        "description": "Schedules a meeting with a client for project discussion.",
        "parameters": {
            "type": "object",
            "properties": {
                "client_name": {
                    "type": "string",
                    "description": "The name of the client."
                },
                "project_description": {
                    "type": "string",
                    "description": "A description of the project."
                },
                "meeting_date": {
                    "type": "string",
                    "description": "The date of the meeting in YYYY-MM-DD format."
                }
            },
            "required": ["client_name", "project_description", "meeting_date"]
        },
        "returns": {
            "type": "string",
            "description": "A string confirming the scheduled meeting."
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_project_timeline_with_milestones(
    project_name: str,
    start_date: str,
    end_date: str,
    milestones: List[Dict[str, str]],
) -> Dict[str, str]:
    """
    Generates a project timeline with milestones.

    Parameters:
        project_name (str): The name of the project.
        start_date (str): The start date of the project in YYYY-MM-DD format.
        end_date (str): The end date of the project in YYYY-MM-DD format.
        milestones (List[Dict[str, str]]): A list of dictionaries containing milestone details.
                                           Each dictionary should have 'name' and 'date' keys.

    Returns:
        Dict[str, str]: A dictionary with 'project_name' as a key and the project name as a value,
                        'start_date' as a key and the start date as a value,
                        'end_date' as a key and the end date as a value,
                        and 'milestones' as a key and the list of milestones as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details about the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n    ",
    "function_description": {
        "name": "example_function",
        "description": "Orders event tickets and returns the total price.",
        "parameters": {
            "type": "object",
            "properties": {
                "num_tickets": {
                    "type": "integer",
                    "description": "The number of tickets to buy."
                },
                "ticket_type": {
                    "type": "object",
                    "description": "The type of ticket.",
                    "properties": {
                        "type": "string"
                    }
                },
                "event_details": {
                    "type": "object",
                    "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "Event data in YYYY-MM-DD format."
                        }
                    },
                    "required": ["date"]
                },
                "attendees": {
                    "type": "array",
                    "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "age": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "age"]
                    }
                }
            },
            "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_price": {
                    "type": "float",
                    "description": "The total price for the tickets ordered."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def backup_to_cloud_storage(
    code_files: List[str],
    project_files: List[str],
    cloud_storage: str,
) -> bool:
    """
    Backup code and project files to a secure cloud storage.

    Parameters:
        code_files (List[str]): A list of file paths for code files.
        project_files (List[str]): A list of file paths for project files.
        cloud_storage (str): The name or URL of the secure cloud storage.

    Returns:
        bool: True if the backup is successful, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def backup_to_cloud_storage(\n    code_files: List[str],\n    project_files: List[str],\n    cloud_storage: str,\n) -> bool:\n    \"\"\"\n    Backup code and project files to a secure cloud storage.\n\n    Parameters:\n        code_files (List[str]): A list of file paths for code files.\n        project_files (List[str]): A list of file paths for project files.\n        cloud_storage (str): The name or URL of the secure cloud storage.\n\n    Returns:\n        bool: True if the backup is successful, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "backup_to_cloud_storage",
        "description": "Backup code and project files to a secure cloud storage.",
        "parameters": {
            "type": "object",
            "properties": {
                "code_files": {
                    "type": "array",
                    "description": "A list of file paths for code files.",
                    "items": {
                        "type": "string"
                    }
                },
                "project_files": {
                    "type": "array",
                    "description": "A list of file paths for project files.",
                    "items": {
                        "type": "string"
                    }
                },
                "cloud_storage": {
                    "type": "string",
                    "description": "The name or URL of the secure cloud storage."
                }
            },
            "required": ["code_files", "project_files", "cloud_storage"]
        }
    }
}

user: 
Below is a snippet of a python function:
    def perform_code_reviews(
    code: str,
    reviewer: str,
) -> None:
    """
    Perform code reviews for quality assurance.

    Parameters:
        code (str): The code to be reviewed.
        reviewer (str): The name of the reviewer.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def perform_code_reviews(\n    code: str,\n    reviewer: str,\n) -> None:\n    \"\"\"\n    Perform code reviews for quality assurance.\n\n    Parameters:\n        code (str): The code to be reviewed.\n        reviewer (str): The name of the reviewer.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "perform_code_reviews",
        "description": "Perform code reviews for quality assurance.",
        "parameters": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The code to be reviewed."
                },
                "reviewer": {
                    "type": "string",
                    "description": "The name of the reviewer."
                }
            },
            "required": ["code", "reviewer"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def push_updates(repository: str) -> None:
    """
    Pushes updates to a repository on a version control system like Git.

    Parameters:
        repository (str): The path or URL of the repository to push updates to.

    Returns:
        None
    """
    # Code implementation for pushing updates to the repository    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def push_updates(repository: str) -> None:\n    \"\"\"\n    Pushes updates to a repository on a version control system like Git.\n\n    Parameters:\n        repository (str): The path or URL of the repository to push updates to.\n\n    Returns:\n        None\n    \"\"\"\n    # Code implementation for pushing updates to the repository",
    "function_description": {
        "name": "push_updates",
        "description": "Pushes updates to a repository on a version control system like Git.",
        "parameters": {
            "type": "object",
            "properties": {
                "repository": {
                    "type": "string",
                    "description": "The path or URL of the repository to push updates to."
                }
            },
            "required": ["repository"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def test_newly_developed_features_for_bugs():
    """
    Tests newly developed features for bugs.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def test_newly_developed_features_for_bugs():\n    \"\"\"\n    Tests newly developed features for bugs.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "test_newly_developed_features_for_bugs",
        "description": "Tests newly developed features for bugs.",
        "parameters": {},
        "returns": {}
    }
}

user: 
Below is a snippet of a python function:
    def update_project_documentation(
    project_name: str,
    documentation: str,
    updates: List[str],
) -> str:
    """
    Updates the project documentation with the provided updates.

    Parameters:
        project_name (str): The name of the project.
        documentation (str): The current project documentation.
        updates (List[str]): A list of strings containing the updates to be made.

    Returns:
        str: The updated project documentation.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def update_project_documentation(\n    project_name: str,\n    documentation: str,\n    updates: List[str],\n) -> str:\n    \"\"\"\n    Updates the project documentation with the provided updates.\n\n    Parameters:\n        project_name (str): The name of the project.\n        documentation (str): The current project documentation.\n        updates (List[str]): A list of strings containing the updates to be made.\n\n    Returns:\n        str: The updated project documentation.\n    \"\"\"\n    ",
    "function_description": {
        "name": "update_project_documentation",
        "description": "Updates the project documentation with the provided updates.",
        "parameters": {
            "type": "object",
            "properties": {
                "project_name": {
                    "type": "string",
                    "description": "The name of the project."
                },
                "documentation": {
                    "type": "string",
                    "description": "The current project documentation."
                },
                "updates": {
                    "type": "array",
                    "description": "A list of strings containing the updates to be made.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["project_name", "documentation", "updates"]
        },
        "returns": {
            "type": "string",
            "description": "The updated project documentation."
        }
    }
}

user: 
Below is a snippet of a python function:
    def submit_timesheets(
    timesheets: List[Dict[str, Any]],
    clients: List[str]
) -> None:
    """
    Submits timesheets to clients for review or approval.

    Parameters:
        timesheets (List[Dict[str, Any]]): A list of dictionaries containing timesheet details.
                                           Each dictionary should have 'client' and 'hours' keys.
        clients (List[str]): A list of client names.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def submit_timesheets(\n    timesheets: List[Dict[str, Any]],\n    clients: List[str]\n) -> None:\n    \"\"\"\n    Submits timesheets to clients for review or approval.\n\n    Parameters:\n        timesheets (List[Dict[str, Any]]): A list of dictionaries containing timesheet details.\n                                           Each dictionary should have 'client' and 'hours' keys.\n        clients (List[str]): A list of client names.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "submit_timesheets",
        "description": "Submits timesheets to clients for review or approval.",
        "parameters": {
            "type": "object",
            "properties": {
                "timesheets": {
                    "type": "array",
                    "description": "A list of dictionaries containing timesheet details. Each dictionary should have 'client' and 'hours' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "client": {
                                "type": "string"
                            },
                            "hours": {
                                "type": "number"
                            }
                        },
                        "required": ["client", "hours"]
                    }
                },
                "clients": {
                    "type": "array",
                    "description": "A list of client names.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["timesheets", "clients"]
        },
        "returns": {
            "type": "null"
        }
    }
}

user: 
Below is a snippet of a python function:
    def communicate_project_updates(
    project_name: str,
    updates: str,
    stakeholders: List[str],
    communication_method: str = 'email'
) -> None:
    """
    Communicates project updates to stakeholders via email or messaging apps.

    Parameters:
        project_name (str): The name of the project.
        updates (str): The updates to be communicated.
        stakeholders (List[str]): A list of stakeholder email addresses or messaging app usernames.
        communication_method (str): The method of communication, default is 'email'.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def communicate_project_updates(\nproject_name: str,\nupdates: str,\nstakeholders: List[str],\ncommunication_method: str = 'email'\n) -> None:\n    \"\"\"\n    Communicates project updates to stakeholders via email or messaging apps.\n\n    Parameters:\n        project_name (str): The name of the project.\n        updates (str): The updates to be communicated.\n        stakeholders (List[str]): A list of stakeholder email addresses or messaging app usernames.\n        communication_method (str): The method of communication, default is 'email'.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "communicate_project_updates",
        "description": "Communicates project updates to stakeholders via email or messaging apps.",
        "parameters": {
            "type": "object",
            "properties": {
                "project_name": {
                    "type": "string",
                    "description": "The name of the project."
                },
                "updates": {
                    "type": "string",
                    "description": "The updates to be communicated."
                },
                "stakeholders": {
                    "type": "array",
                    "description": "A list of stakeholder email addresses or messaging app usernames.",
                    "items": {
                        "type": "string"
                    }
                },
                "communication_method": {
                    "type": "string",
                    "description": "The method of communication, default is 'email'."
                }
            },
            "required": ["project_name", "updates", "stakeholders"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def review_and_sign_legal_documents(
    documents: List[str],
    signature: str,
) -> bool:
    """
    Review and sign legal documents such as NDAs and contracts.

    Parameters:
        documents (List[str]): A list of legal documents to review and sign.
        signature (str): The signature to use when signing the documents.

    Returns:
        bool: True if all documents are successfully reviewed and signed, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def review_and_sign_legal_documents(documents: List[str], signature: str) -> bool:\n    \"\"\"\n    Review and sign legal documents such as NDAs and contracts.\n\n    Parameters:\n        documents (List[str]): A list of legal documents to review and sign.\n        signature (str): The signature to use when signing the documents.\n\n    Returns:\n        bool: True if all documents are successfully reviewed and signed, False otherwise.\n    \"\"\"",
    "function_description": {
        "name": "review_and_sign_legal_documents",
        "description": "Review and sign legal documents such as NDAs and contracts.",
        "parameters": {
            "type": "object",
            "properties": {
                "documents": {
                    "type": "array",
                    "description": "A list of legal documents to review and sign.",
                    "items": {
                        "type": "string"
                    }
                },
                "signature": {
                    "type": "string",
                    "description": "The signature to use when signing the documents."
                }
            },
            "required": ["documents", "signature"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if all documents are successfully reviewed and signed, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def analyze_project_analytics() -> None:
    """
    Analyzes project analytics for client reporting.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def analyze_project_analytics() -> None:\n    \"\"\"\n    Analyzes project analytics for client reporting.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "analyze_project_analytics",
        "description": "Analyzes project analytics for client reporting.",
        "parameters": {},
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def collect_client_feedback(
    survey: str,
    direct_communication: bool,
) -> None:
    """
    Collects client feedback through surveys or direct communication.

    Parameters:
        survey (str): The survey to be used for collecting feedback.
        direct_communication (bool): Indicates whether direct communication is also used for feedback collection.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def collect_client_feedback(\n    survey: str,\n    direct_communication: bool,\n) -> None:\n    \"\"\"\n    Collects client feedback through surveys or direct communication.\n\n    Parameters:\n        survey (str): The survey to be used for collecting feedback.\n        direct_communication (bool): Indicates whether direct communication is also used for feedback collection.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "collect_client_feedback",
        "description": "Collects client feedback through surveys or direct communication.",
        "parameters": {
            "type": "object",
            "properties": {
                "survey": {
                    "type": "string",
                    "description": "The survey to be used for collecting feedback."
                },
                "direct_communication": {
                    "type": "boolean",
                    "description": "Indicates whether direct communication is also used for feedback collection."
                }
            },
            "required": ["survey", "direct_communication"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def manage_subcontractors(
    subcontractors: List[Dict[str, str]],
    tasks: List[str],
    payment: float,
) -> Dict[str, List[str]]:
    """
    Manages subcontractors or collaborators, including payment and task allocation.

    Parameters:
        subcontractors (List[Dict[str, str]]): A list of dictionaries containing subcontractor details.
                                               Each dictionary should have 'name' and 'email' keys.
        tasks (List[str]): A list of tasks to be allocated to subcontractors.
        payment (float): The payment amount to be made to each subcontractor.

    Returns:
        Dict[str, List[str]]: A dictionary with 'subcontractor_tasks' as a key and a list of allocated tasks as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def manage_subcontractors(\n    subcontractors: List[Dict[str, str]],\n    tasks: List[str],\n    payment: float,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Manages subcontractors or collaborators, including payment and task allocation.\n\n    Parameters:\n        subcontractors (List[Dict[str, str]]): A list of dictionaries containing subcontractor details.\n                                               Each dictionary should have 'name' and 'email' keys.\n        tasks (List[str]): A list of tasks to be allocated to subcontractors.\n        payment (float): The payment amount to be made to each subcontractor.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'subcontractor_tasks' as a key and a list of allocated tasks as a value.\n    \"\"\"\n\n",
    "function_description": {
        "name": "manage_subcontractors",
        "description": "Manages subcontractors or collaborators, including payment and task allocation.",
        "parameters": {
            "type": "object",
            "properties": {
                "subcontractors": {
                    "type": "array",
                    "description": "A list of dictionaries containing subcontractor details. Each dictionary should have 'name' and 'email' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "email"]
                    }
                },
                "tasks": {
                    "type": "array",
                    "description": "A list of tasks to be allocated to subcontractors.",
                    "items": {
                        "type": "string"
                    }
                },
                "payment": {
                    "type": "number",
                    "description": "The payment amount to be made to each subcontractor."
                }
            },
            "required": ["subcontractors", "tasks", "payment"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "subcontractor_tasks": {
                    "type": "array",
                    "description": "A list of allocated tasks."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def research_new_technologies_or_tools_relevant_to_project():
    """
    Researches new technologies or tools relevant to the project.

    Returns:
        None
    """
    # Code to research new technologies or tools relevant to the project    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def research_new_technologies_or_tools_relevant_to_project():\n    \"\"\"\n    Researches new technologies or tools relevant to the project.\n\n    Returns:\n        None\n    \"\"\"\n    # Code to research new technologies or tools relevant to the project",
    "function_description": {
        "name": "research_new_technologies_or_tools_relevant_to_project",
        "description": "Researches new technologies or tools relevant to the project.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def calculate_taxes_deductions_expenses(
    income: float,
    expenses: float,
    deductions: float,
) -> Dict[str, float]:
    """
    Calculates taxes, deductions, and expenses for financial records.

    Parameters:
        income (float): The total income.
        expenses (float): The total expenses.
        deductions (float): The total deductions.

    Returns:
        Dict[str, float]: A dictionary with 'taxes', 'deductions', and 'expenses' as keys
                          and their respective calculated values as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def calculate_taxes_deductions_expenses(\n    income: float,\n    expenses: float,\n    deductions: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates taxes, deductions, and expenses for financial records.\n\n    Parameters:\n        income (float): The total income.\n        expenses (float): The total expenses.\n        deductions (float): The total deductions.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'taxes', 'deductions', and 'expenses' as keys\n                          and their respective calculated values as values.\n    \"\"\"\n",
    "function_description": {
        "name": "calculate_taxes_deductions_expenses",
        "description": "Calculates taxes, deductions, and expenses for financial records.",
        "parameters": {
            "type": "object",
            "properties": {
                "income": {
                    "type": "float",
                    "description": "The total income."
                },
                "expenses": {
                    "type": "float",
                    "description": "The total expenses."
                },
                "deductions": {
                    "type": "float",
                    "description": "The total deductions."
                }
            },
            "required": ["income", "expenses", "deductions"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "taxes": {
                    "type": "float",
                    "description": "The calculated taxes."
                },
                "deductions": {
                    "type": "float",
                    "description": "The calculated deductions."
                },
                "expenses": {
                    "type": "float",
                    "description": "The calculated expenses."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def network_with_professionals(
    platform: str,
    opportunities: List[str]
) -> None:
    """
    Network with professionals on platforms like LinkedIn for new opportunities.

    Parameters:
        platform (str): The platform to network on (e.g. LinkedIn).
        opportunities (List[str]): A list of new opportunities to explore.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def network_with_professionals(\n    platform: str,\n    opportunities: List[str]\n) -> None:\n    \"\"\"\n    Network with professionals on platforms like LinkedIn for new opportunities.\n\n    Parameters:\n        platform (str): The platform to network on (e.g. LinkedIn).\n        opportunities (List[str]): A list of new opportunities to explore.\n\n    Returns:\n        None\n    \"\"\"\n    ",
    "function_description": {
        "name": "network_with_professionals",
        "description": "Network with professionals on platforms like LinkedIn for new opportunities.",
        "parameters": {
            "type": "object",
            "properties": {
                "platform": {
                    "type": "string",
                    "description": "The platform to network on (e.g. LinkedIn)."
                },
                "opportunities": {
                    "type": "array",
                    "description": "A list of new opportunities to explore.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["platform", "opportunities"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def update_portfolio(completed_projects: List[Dict[str, str]]) -> None:
    """
    Updates the portfolio with completed projects for future client acquisition.

    Parameters:
        completed_projects (List[Dict[str, str]]): A list of dictionaries containing details of completed projects.
                                                   Each dictionary should have 'project_name', 'client_name', and 'completion_date' keys.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def update_portfolio(completed_projects: List[Dict[str, str]]) -> None:\n    \"\"\"\n    Updates the portfolio with completed projects for future client acquisition.\n\n    Parameters:\n        completed_projects (List[Dict[str, str]]): A list of dictionaries containing details of completed projects.\n                                                   Each dictionary should have 'project_name', 'client_name', and 'completion_date' keys.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "update_portfolio",
        "description": "Updates the portfolio with completed projects for future client acquisition.",
        "parameters": {
            "type": "object",
            "properties": {
                "completed_projects": {
                    "type": "array",
                    "description": "A list of dictionaries containing details of completed projects. Each dictionary should have 'project_name', 'client_name', and 'completion_date' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "project_name": {
                                "type": "string"
                            },
                            "client_name": {
                                "type": "string"
                            },
                            "completion_date": {
                                "type": "string"
                            }
                        },
                        "required": ["project_name", "client_name", "completion_date"]
                    }
                }
            },
            "required": ["completed_projects"]
        }
    }
}


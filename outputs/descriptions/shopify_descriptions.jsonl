{
    "function_id": "shopify-1",
    "snippet": "def create_product_listing(\n    title: str,\n    description: str,\n    price: float,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates a new product listing with details such as title, description, and price.\n\n    Parameters:\n        title (str): The title of the product listing.\n        description (str): The description of the product listing.\n        price (float): The price of the product listing.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'title', 'description', and 'price' as keys and their respective values.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def create_product_listing(\\n    title: str,\\n    description: str,\\n    price: float,\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Creates a new product listing with details such as title, description, and price.\\n\\n    Parameters:\\n        title (str): The title of the product listing.\\n        description (str): The description of the product listing.\\n        price (float): The price of the product listing.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with 'title', 'description', and 'price' as keys and their respective values.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"create_product_listing\",\n        \"description\": \"Creates a new product listing with details such as title, description, and price.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"title\": {\n                    \"type\": \"string\",\n                    \"description\": \"The title of the product listing.\"\n                },\n                \"description\": {\n                    \"type\": \"string\",\n                    \"description\": \"The description of the product listing.\"\n                },\n                \"price\": {\n                    \"type\": \"number\",\n                    \"description\": \"The price of the product listing.\"\n                }\n            },\n            \"required\": [\"title\", \"description\", \"price\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"title\": {\n                    \"type\": \"string\",\n                    \"description\": \"The title of the product listing.\"\n                },\n                \"description\": {\n                    \"type\": \"string\",\n                    \"description\": \"The description of the product listing.\"\n                },\n                \"price\": {\n                    \"type\": \"number\",\n                    \"description\": \"The price of the product listing.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_product_listing(\n    title: str,\n    description: str,\n    price: float,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates a new product listing with details such as title, description, and price.\n\n    Parameters:\n        title (str): The title of the product listing.\n        description (str): The description of the product listing.\n        price (float): The price of the product listing.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'title', 'description', and 'price' as keys and their respective values.\n    \"\"\"",
        "function_description": {
            "name": "create_product_listing",
            "description": "Creates a new product listing with details such as title, description, and price.",
            "parameters": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the product listing."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the product listing."
                    },
                    "price": {
                        "type": "number",
                        "description": "The price of the product listing."
                    }
                },
                "required": [
                    "title",
                    "description",
                    "price"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the product listing."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the product listing."
                    },
                    "price": {
                        "type": "number",
                        "description": "The price of the product listing."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_product_listing(\n    title: str,\n    description: str,\n    price: float,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates a new product listing with details such as title, description, and price.\n\n    Parameters:\n        title (str): The title of the product listing.\n        description (str): The description of the product listing.\n        price (float): The price of the product listing.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'title', 'description', and 'price' as keys and their respective values.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-2",
    "snippet": "def update_product_listing(\n    product_id: str,\n    price: float,\n    inventory: int,\n    tags: List[str],\n) -> None:\n    \"\"\"\n    Updates an existing product listing with new details.\n\n    Parameters:\n        product_id (str): The ID of the product to update.\n        price (float): The new price of the product.\n        inventory (int): The new inventory count of the product.\n        tags (List[str]): A list of tags to associate with the product.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def update_product_listing(\\n    product_id: str,\\n    price: float,\\n    inventory: int,\\n    tags: List[str],\\n) -> None:\\n    \\\"\\\"\\\"\\n    Updates an existing product listing with new details.\\n\\n    Parameters:\\n        product_id (str): The ID of the product to update.\\n        price (float): The new price of the product.\\n        inventory (int): The new inventory count of the product.\\n        tags (List[str]): A list of tags to associate with the product.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n    \",\n    \"function_description\": {\n        \"name\": \"update_product_listing\",\n        \"description\": \"Updates an existing product listing with new details.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the product to update.\"\n                },\n                \"price\": {\n                    \"type\": \"float\",\n                    \"description\": \"The new price of the product.\"\n                },\n                \"inventory\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The new inventory count of the product.\"\n                },\n                \"tags\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of tags to associate with the product.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"product_id\", \"price\", \"inventory\", \"tags\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def update_product_listing(\n    product_id: str,\n    price: float,\n    inventory: int,\n    tags: List[str],\n) -> None:\n    \"\"\"\n    Updates an existing product listing with new details.\n\n    Parameters:\n        product_id (str): The ID of the product to update.\n        price (float): The new price of the product.\n        inventory (int): The new inventory count of the product.\n        tags (List[str]): A list of tags to associate with the product.\n\n    Returns:\n        None\n    \"\"\"\n    ",
        "function_description": {
            "name": "update_product_listing",
            "description": "Updates an existing product listing with new details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product to update."
                    },
                    "price": {
                        "type": "float",
                        "description": "The new price of the product."
                    },
                    "inventory": {
                        "type": "integer",
                        "description": "The new inventory count of the product."
                    },
                    "tags": {
                        "type": "array",
                        "description": "A list of tags to associate with the product.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "product_id",
                    "price",
                    "inventory",
                    "tags"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_product_listing(\n    product_id: str,\n    price: float,\n    inventory: int,\n    tags: List[str],\n) -> None:\n    \"\"\"\n    Updates an existing product listing with new details.\n\n    Parameters:\n        product_id (str): The ID of the product to update.\n        price (float): The new price of the product.\n        inventory (int): The new inventory count of the product.\n        tags (List[str]): A list of tags to associate with the product.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-3",
    "snippet": "def delete_product_listing(\n    product_id: int,\n) -> None:\n    \"\"\"\n    Deletes a product listing from the store.\n\n    Parameters:\n        product_id (int): The ID of the product listing to delete.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def delete_product_listing(\\n    product_id: int,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Deletes a product listing from the store.\\n\\n    Parameters:\\n        product_id (int): The ID of the product listing to delete.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"delete_product_listing\",\n        \"description\": \"Deletes a product listing from the store.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the product listing to delete.\"\n                }\n            },\n            \"required\": [\"product_id\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def delete_product_listing(\n    product_id: int,\n) -> None:\n    \"\"\"\n    Deletes a product listing from the store.\n\n    Parameters:\n        product_id (int): The ID of the product listing to delete.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "delete_product_listing",
            "description": "Deletes a product listing from the store.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "description": "The ID of the product listing to delete."
                    }
                },
                "required": [
                    "product_id"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_product_listing(\n    product_id: int,\n) -> None:\n    \"\"\"\n    Deletes a product listing from the store.\n\n    Parameters:\n        product_id (int): The ID of the product listing to delete.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-4",
    "snippet": "def create_collections(products: List[Dict[str, str]]) -> Dict[str, List[str]]:\n    \"\"\"\n    Creates collections to categorize products.\n\n    Parameters:\n        products (List[Dict[str, str]]): A list of dictionaries containing product details.\n                                         Each dictionary should have 'name' and 'category' keys.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with category names as keys and a list of product names as values.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def create_collections(products: List[Dict[str, str]]) -> Dict[str, List[str]]:\\n    \\\"\\\"\\\"\\n    Creates collections to categorize products.\\n\\n    Parameters:\\n        products (List[Dict[str, str]]): A list of dictionaries containing product details.\\n                                         Each dictionary should have 'name' and 'category' keys.\\n\\n    Returns:\\n        Dict[str, List[str]]: A dictionary with category names as keys and a list of product names as values.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"create_collections\",\n        \"description\": \"Creates collections to categorize products.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"products\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing product details. Each dictionary should have 'name' and 'category' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"category\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\"name\", \"category\"]\n                    }\n                }\n            },\n            \"required\": [\"products\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_collections(products: List[Dict[str, str]]) -> Dict[str, List[str]]:\n    \"\"\"\n    Creates collections to categorize products.\n\n    Parameters:\n        products (List[Dict[str, str]]): A list of dictionaries containing product details.\n                                         Each dictionary should have 'name' and 'category' keys.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with category names as keys and a list of product names as values.\n    \"\"\"\n",
        "function_description": {
            "name": "create_collections",
            "description": "Creates collections to categorize products.",
            "parameters": {
                "type": "object",
                "properties": {
                    "products": {
                        "type": "array",
                        "description": "A list of dictionaries containing product details. Each dictionary should have 'name' and 'category' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "category": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "category"
                            ]
                        }
                    }
                },
                "required": [
                    "products"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_collections(products: List[Dict[str, str]]) -> Dict[str, List[str]]:\n    \"\"\"\n    Creates collections to categorize products.\n\n    Parameters:\n        products (List[Dict[str, str]]): A list of dictionaries containing product details.\n                                         Each dictionary should have 'name' and 'category' keys.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with category names as keys and a list of product names as values.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-5",
    "snippet": "def add_or_remove_products(\n    collection_id: int,\n    products: List[int],\n    action: str,\n) -> str:\n    \"\"\"\n    Add or remove products from existing collections.\n\n    Parameters:\n        collection_id (int): The ID of the collection to modify.\n        products (List[int]): A list of product IDs to add or remove.\n        action (str): The action to perform, either 'add' or 'remove'.\n\n    Returns:\n        str: A message indicating the success or failure of the operation.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def add_or_remove_products(\\n    collection_id: int,\\n    products: List[int],\\n    action: str,\\n) -> str:\\n    \\\"\\\"\\\"\\n    Add or remove products from existing collections.\\n\\n    Parameters:\\n        collection_id (int): The ID of the collection to modify.\\n        products (List[int]): A list of product IDs to add or remove.\\n        action (str): The action to perform, either 'add' or 'remove'.\\n\\n    Returns:\\n        str: A message indicating the success or failure of the operation.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"add_or_remove_products\",\n        \"description\": \"Add or remove products from existing collections.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"collection_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the collection to modify.\"\n                },\n                \"products\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of product IDs to add or remove.\",\n                    \"items\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to perform, either 'add' or 'remove'.\"\n                }\n            },\n            \"required\": [\"collection_id\", \"products\", \"action\"]\n        },\n        \"returns\": {\n            \"type\": \"string\",\n            \"description\": \"A message indicating the success or failure of the operation.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def add_or_remove_products(\n    collection_id: int,\n    products: List[int],\n    action: str,\n) -> str:\n    \"\"\"\n    Add or remove products from existing collections.\n\n    Parameters:\n        collection_id (int): The ID of the collection to modify.\n        products (List[int]): A list of product IDs to add or remove.\n        action (str): The action to perform, either 'add' or 'remove'.\n\n    Returns:\n        str: A message indicating the success or failure of the operation.\n    \"\"\"\n",
        "function_description": {
            "name": "add_or_remove_products",
            "description": "Add or remove products from existing collections.",
            "parameters": {
                "type": "object",
                "properties": {
                    "collection_id": {
                        "type": "integer",
                        "description": "The ID of the collection to modify."
                    },
                    "products": {
                        "type": "array",
                        "description": "A list of product IDs to add or remove.",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to perform, either 'add' or 'remove'."
                    }
                },
                "required": [
                    "collection_id",
                    "products",
                    "action"
                ]
            },
            "returns": {
                "type": "string",
                "description": "A message indicating the success or failure of the operation."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def add_or_remove_products(\n    collection_id: int,\n    products: List[int],\n    action: str,\n) -> str:\n    \"\"\"\n    Add or remove products from existing collections.\n\n    Parameters:\n        collection_id (int): The ID of the collection to modify.\n        products (List[int]): A list of product IDs to add or remove.\n        action (str): The action to perform, either 'add' or 'remove'.\n\n    Returns:\n        str: A message indicating the success or failure of the operation.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-6",
    "snippet": "def update_storefront_theme_settings(\n    theme_id: str,\n    settings: Dict[str, Union[str, int, bool]]\n) -> bool:\n    \"\"\"\n    Updates the storefront theme settings.\n\n    Parameters:\n        theme_id (str): The ID of the theme to update.\n        settings (Dict[str, Union[str, int, bool]]): A dictionary of settings to update.\n                                                     Each key should be a setting name and each value should be the new setting value.\n\n    Returns:\n        bool: True if the storefront theme settings were successfully updated, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def update_storefront_theme_settings(\\n    theme_id: str,\\n    settings: Dict[str, Union[str, int, bool]]\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Updates the storefront theme settings.\\n\\n    Parameters:\\n        theme_id (str): The ID of the theme to update.\\n        settings (Dict[str, Union[str, int, bool]]): A dictionary of settings to update.\\n                                                     Each key should be a setting name and each value should be the new setting value.\\n\\n    Returns:\\n        bool: True if the storefront theme settings were successfully updated, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"update_storefront_theme_settings\",\n        \"description\": \"Updates the storefront theme settings.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"theme_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the theme to update.\"\n                },\n                \"settings\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary of settings to update. Each key should be a setting name and each value should be the new setting value.\",\n                    \"additionalProperties\": {\n                        \"type\": [\"string\", \"integer\", \"boolean\"]\n                    }\n                }\n            },\n            \"required\": [\"theme_id\", \"settings\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if the storefront theme settings were successfully updated, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def update_storefront_theme_settings(\n    theme_id: str,\n    settings: Dict[str, Union[str, int, bool]]\n) -> bool:\n    \"\"\"\n    Updates the storefront theme settings.\n\n    Parameters:\n        theme_id (str): The ID of the theme to update.\n        settings (Dict[str, Union[str, int, bool]]): A dictionary of settings to update.\n                                                     Each key should be a setting name and each value should be the new setting value.\n\n    Returns:\n        bool: True if the storefront theme settings were successfully updated, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "update_storefront_theme_settings",
            "description": "Updates the storefront theme settings.",
            "parameters": {
                "type": "object",
                "properties": {
                    "theme_id": {
                        "type": "string",
                        "description": "The ID of the theme to update."
                    },
                    "settings": {
                        "type": "object",
                        "description": "A dictionary of settings to update. Each key should be a setting name and each value should be the new setting value.",
                        "additionalProperties": {
                            "type": [
                                "string",
                                "integer",
                                "boolean"
                            ]
                        }
                    }
                },
                "required": [
                    "theme_id",
                    "settings"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the storefront theme settings were successfully updated, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_storefront_theme_settings(\n    theme_id: str,\n    settings: Dict[str, Union[str, int, bool]]\n) -> bool:\n    \"\"\"\n    Updates the storefront theme settings.\n\n    Parameters:\n        theme_id (str): The ID of the theme to update.\n        settings (Dict[str, Union[str, int, bool]]): A dictionary of settings to update.\n                                                     Each key should be a setting name and each value should be the new setting value.\n\n    Returns:\n        bool: True if the storefront theme settings were successfully updated, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-7",
    "snippet": "def process_and_fulfill_orders(orders: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Process and fulfill orders, marking them as completed.\n\n    Parameters:\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\n                                       Each dictionary should have 'order_id' and 'status' keys.\n\n    Returns:\n        None\n    \"\"\"\n    for order in orders:\n        order_id = order['order_id']\n        status = order['status']\n        # Process and fulfill the order\n        # Mark the order as completed",
    "completion-content": "{\n    \"function_snippet\": \"def process_and_fulfill_orders(orders: List[Dict[str, Any]]) -> None:\\n    \\\"\\\"\\\"\\n    Process and fulfill orders, marking them as completed.\\n\\n    Parameters:\\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\\n                                       Each dictionary should have 'order_id' and 'status' keys.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n    for order in orders:\\n        order_id = order['order_id']\\n        status = order['status']\\n        # Process and fulfill the order\\n        # Mark the order as completed\",\n    \"function_description\": {\n        \"name\": \"process_and_fulfill_orders\",\n        \"description\": \"Process and fulfill orders, marking them as completed.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"orders\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing order details. Each dictionary should have 'order_id' and 'status' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"order_id\": {\n                                \"type\": \"string\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\"order_id\", \"status\"]\n                    }\n                }\n            },\n            \"required\": [\"orders\"]\n        },\n        \"returns\": {\n            \"type\": \"null\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def process_and_fulfill_orders(orders: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Process and fulfill orders, marking them as completed.\n\n    Parameters:\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\n                                       Each dictionary should have 'order_id' and 'status' keys.\n\n    Returns:\n        None\n    \"\"\"\n    for order in orders:\n        order_id = order['order_id']\n        status = order['status']\n        # Process and fulfill the order\n        # Mark the order as completed",
        "function_description": {
            "name": "process_and_fulfill_orders",
            "description": "Process and fulfill orders, marking them as completed.",
            "parameters": {
                "type": "object",
                "properties": {
                    "orders": {
                        "type": "array",
                        "description": "A list of dictionaries containing order details. Each dictionary should have 'order_id' and 'status' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "order_id": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "order_id",
                                "status"
                            ]
                        }
                    }
                },
                "required": [
                    "orders"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def process_and_fulfill_orders(orders: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Process and fulfill orders, marking them as completed.\n\n    Parameters:\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\n                                       Each dictionary should have 'order_id' and 'status' keys.\n\n    Returns:\n        None\n    \"\"\"\n    for order in orders:\n        order_id = order['order_id']\n        status = order['status']\n        # Process and fulfill the order\n        # Mark the order as completed",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-8",
    "snippet": "def generate_shipping_labels(\n    orders: List[Dict[str, Any]]\n) -> None:\n    \"\"\"\n    Generates and prints shipping labels for fulfilled orders.\n\n    Parameters:\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\n                                       Each dictionary should have 'order_id', 'customer_name',\n                                       'shipping_address' keys.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def generate_shipping_labels(\\n    orders: List[Dict[str, Any]]\\n) -> None:\\n    \\\"\\\"\\\"\\n    Generates and prints shipping labels for fulfilled orders.\\n\\n    Parameters:\\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\\n                                       Each dictionary should have 'order_id', 'customer_name',\\n                                       'shipping_address' keys.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"generate_shipping_labels\",\n        \"description\": \"Generates and prints shipping labels for fulfilled orders.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"orders\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing order details. Each dictionary should have 'order_id', 'customer_name', 'shipping_address' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"order_id\": {\n                                \"type\": \"string\"\n                            },\n                            \"customer_name\": {\n                                \"type\": \"string\"\n                            },\n                            \"shipping_address\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\"order_id\", \"customer_name\", \"shipping_address\"]\n                    }\n                }\n            },\n            \"required\": [\"orders\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def generate_shipping_labels(\n    orders: List[Dict[str, Any]]\n) -> None:\n    \"\"\"\n    Generates and prints shipping labels for fulfilled orders.\n\n    Parameters:\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\n                                       Each dictionary should have 'order_id', 'customer_name',\n                                       'shipping_address' keys.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "generate_shipping_labels",
            "description": "Generates and prints shipping labels for fulfilled orders.",
            "parameters": {
                "type": "object",
                "properties": {
                    "orders": {
                        "type": "array",
                        "description": "A list of dictionaries containing order details. Each dictionary should have 'order_id', 'customer_name', 'shipping_address' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "order_id": {
                                    "type": "string"
                                },
                                "customer_name": {
                                    "type": "string"
                                },
                                "shipping_address": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "order_id",
                                "customer_name",
                                "shipping_address"
                            ]
                        }
                    }
                },
                "required": [
                    "orders"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def generate_shipping_labels(\n    orders: List[Dict[str, Any]]\n) -> None:\n    \"\"\"\n    Generates and prints shipping labels for fulfilled orders.\n\n    Parameters:\n        orders (List[Dict[str, Any]]): A list of dictionaries containing order details.\n                                       Each dictionary should have 'order_id', 'customer_name',\n                                       'shipping_address' keys.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-9",
    "snippet": "def create_discount_codes(\n    num_codes: int,\n    discount_amount: float,\n    expiration_date: str,\n    promotion_type: str,\n) -> List[str]:\n    \"\"\"\n    Creates discount codes for sales and promotions.\n\n    Parameters:\n        num_codes (int): The number of discount codes to create.\n        discount_amount (float): The amount to discount from the original price.\n        expiration_date (str): The date when the discount codes expire in YYYY-MM-DD format.\n        promotion_type (str): The type of promotion (e.g. \"holiday sale\", \"end of season clearance\").\n\n    Returns:\n        List[str]: A list of discount codes.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def create_discount_codes(\\n    num_codes: int,\\n    discount_amount: float,\\n    expiration_date: str,\\n    promotion_type: str,\\n) -> List[str]:\\n    \\\"\\\"\\\"\\n    Creates discount codes for sales and promotions.\\n\\n    Parameters:\\n        num_codes (int): The number of discount codes to create.\\n        discount_amount (float): The amount to discount from the original price.\\n        expiration_date (str): The date when the discount codes expire in YYYY-MM-DD format.\\n        promotion_type (str): The type of promotion (e.g. \\\"holiday sale\\\", \\\"end of season clearance\\\").\\n\\n    Returns:\\n        List[str]: A list of discount codes.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"create_discount_codes\",\n        \"description\": \"Creates discount codes for sales and promotions.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"num_codes\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The number of discount codes to create.\"\n                },\n                \"discount_amount\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount to discount from the original price.\"\n                },\n                \"expiration_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The date when the discount codes expire in YYYY-MM-DD format.\"\n                },\n                \"promotion_type\": {\n                    \"type\": \"string\",\n                    \"description\": \"The type of promotion (e.g. \\\"holiday sale\\\", \\\"end of season clearance\\\").\"\n                }\n            },\n            \"required\": [\"num_codes\", \"discount_amount\", \"expiration_date\", \"promotion_type\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"discount_codes\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"A list of discount codes.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_discount_codes(\n    num_codes: int,\n    discount_amount: float,\n    expiration_date: str,\n    promotion_type: str,\n) -> List[str]:\n    \"\"\"\n    Creates discount codes for sales and promotions.\n\n    Parameters:\n        num_codes (int): The number of discount codes to create.\n        discount_amount (float): The amount to discount from the original price.\n        expiration_date (str): The date when the discount codes expire in YYYY-MM-DD format.\n        promotion_type (str): The type of promotion (e.g. \"holiday sale\", \"end of season clearance\").\n\n    Returns:\n        List[str]: A list of discount codes.\n    \"\"\"\n",
        "function_description": {
            "name": "create_discount_codes",
            "description": "Creates discount codes for sales and promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "num_codes": {
                        "type": "integer",
                        "description": "The number of discount codes to create."
                    },
                    "discount_amount": {
                        "type": "float",
                        "description": "The amount to discount from the original price."
                    },
                    "expiration_date": {
                        "type": "string",
                        "description": "The date when the discount codes expire in YYYY-MM-DD format."
                    },
                    "promotion_type": {
                        "type": "string",
                        "description": "The type of promotion (e.g. \"holiday sale\", \"end of season clearance\")."
                    }
                },
                "required": [
                    "num_codes",
                    "discount_amount",
                    "expiration_date",
                    "promotion_type"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "discount_codes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of discount codes."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_discount_codes(\n    num_codes: int,\n    discount_amount: float,\n    expiration_date: str,\n    promotion_type: str,\n) -> List[str]:\n    \"\"\"\n    Creates discount codes for sales and promotions.\n\n    Parameters:\n        num_codes (int): The number of discount codes to create.\n        discount_amount (float): The amount to discount from the original price.\n        expiration_date (str): The date when the discount codes expire in YYYY-MM-DD format.\n        promotion_type (str): The type of promotion (e.g. \"holiday sale\", \"end of season clearance\").\n\n    Returns:\n        List[str]: A list of discount codes.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-10",
    "snippet": "def track_and_update_inventory(products: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Track and update the inventory levels of products.\n\n    Parameters:\n        products (List[Dict[str, Any]]): A list of dictionaries containing product details.\n                                         Each dictionary should have 'name', 'quantity', and 'price' keys.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def track_and_update_inventory(products: List[Dict[str, Any]]) -> None:\\n    \\\"\\\"\\\"\\n    Track and update the inventory levels of products.\\n\\n    Parameters:\\n        products (List[Dict[str, Any]]): A list of dictionaries containing product details.\\n                                         Each dictionary should have 'name', 'quantity', and 'price' keys.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"track_and_update_inventory\",\n        \"description\": \"Track and update the inventory levels of products.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"products\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing product details. Each dictionary should have 'name', 'quantity', and 'price' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"quantity\": {\n                                \"type\": \"integer\"\n                            },\n                            \"price\": {\n                                \"type\": \"number\"\n                            }\n                        },\n                        \"required\": [\"name\", \"quantity\", \"price\"]\n                    }\n                }\n            },\n            \"required\": [\"products\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def track_and_update_inventory(products: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Track and update the inventory levels of products.\n\n    Parameters:\n        products (List[Dict[str, Any]]): A list of dictionaries containing product details.\n                                         Each dictionary should have 'name', 'quantity', and 'price' keys.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "track_and_update_inventory",
            "description": "Track and update the inventory levels of products.",
            "parameters": {
                "type": "object",
                "properties": {
                    "products": {
                        "type": "array",
                        "description": "A list of dictionaries containing product details. Each dictionary should have 'name', 'quantity', and 'price' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": "integer"
                                },
                                "price": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "name",
                                "quantity",
                                "price"
                            ]
                        }
                    }
                },
                "required": [
                    "products"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def track_and_update_inventory(products: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Track and update the inventory levels of products.\n\n    Parameters:\n        products (List[Dict[str, Any]]): A list of dictionaries containing product details.\n                                         Each dictionary should have 'name', 'quantity', and 'price' keys.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-11",
    "snippet": "def import_export_data(\n    file_path: str,\n    operation: str,\n) -> bool:\n    \"\"\"\n    Import or export products and customer data in bulk.\n\n    Parameters:\n        file_path (str): The path of the file to import/export.\n        operation (str): The operation to be performed, either 'import' or 'export'.\n\n    Returns:\n        bool: True if the operation is successful, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def import_export_data(\\nfile_path: str,\\noperation: str,\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Import or export products and customer data in bulk.\\n\\n    Parameters:\\n        file_path (str): The path of the file to import/export.\\n        operation (str): The operation to be performed, either 'import' or 'export'.\\n\\n    Returns:\\n        bool: True if the operation is successful, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"import_export_data\",\n        \"description\": \"Import or export products and customer data in bulk.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"file_path\": {\n                    \"type\": \"string\",\n                    \"description\": \"The path of the file to import/export.\"\n                },\n                \"operation\": {\n                    \"type\": \"string\",\n                    \"description\": \"The operation to be performed, either 'import' or 'export'.\"\n                }\n            },\n            \"required\": [\"file_path\", \"operation\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if the operation is successful, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def import_export_data(\nfile_path: str,\noperation: str,\n) -> bool:\n    \"\"\"\n    Import or export products and customer data in bulk.\n\n    Parameters:\n        file_path (str): The path of the file to import/export.\n        operation (str): The operation to be performed, either 'import' or 'export'.\n\n    Returns:\n        bool: True if the operation is successful, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "import_export_data",
            "description": "Import or export products and customer data in bulk.",
            "parameters": {
                "type": "object",
                "properties": {
                    "file_path": {
                        "type": "string",
                        "description": "The path of the file to import/export."
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation to be performed, either 'import' or 'export'."
                    }
                },
                "required": [
                    "file_path",
                    "operation"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the operation is successful, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def import_export_data(\n    file_path: str,\n    operation: str,\n) -> bool:\n    \"\"\"\n    Import or export products and customer data in bulk.\n\n    Parameters:\n        file_path (str): The path of the file to import/export.\n        operation (str): The operation to be performed, either 'import' or 'export'.\n\n    Returns:\n        bool: True if the operation is successful, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-12",
    "snippet": "def manage_customer_accounts(\n    action: str,\n    account_id: int,\n    account_info: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages customer accounts, including creation, update, and deletion.\n\n    Parameters:\n        action (str): The action to perform on the customer account (creation, update, or deletion).\n        account_id (int): The unique identifier of the customer account.\n        account_info (Dict[str, str]): A dictionary containing the account information.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_customer_accounts(\\n    action: str,\\n    account_id: int,\\n    account_info: Dict[str, str]\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Manages customer accounts, including creation, update, and deletion.\\n\\n    Parameters:\\n        action (str): The action to perform on the customer account (creation, update, or deletion).\\n        account_id (int): The unique identifier of the customer account.\\n        account_info (Dict[str, str]): A dictionary containing the account information.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"manage_customer_accounts\",\n        \"description\": \"Manages customer accounts, including creation, update, and deletion.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to perform on the customer account (creation, update, or deletion).\"\n                },\n                \"account_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The unique identifier of the customer account.\"\n                },\n                \"account_info\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the account information.\",\n                    \"properties\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"action\", \"account_id\", \"account_info\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status message.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_customer_accounts(\n    action: str,\n    account_id: int,\n    account_info: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages customer accounts, including creation, update, and deletion.\n\n    Parameters:\n        action (str): The action to perform on the customer account (creation, update, or deletion).\n        account_id (int): The unique identifier of the customer account.\n        account_info (Dict[str, str]): A dictionary containing the account information.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"\n",
        "function_description": {
            "name": "manage_customer_accounts",
            "description": "Manages customer accounts, including creation, update, and deletion.",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to perform on the customer account (creation, update, or deletion)."
                    },
                    "account_id": {
                        "type": "integer",
                        "description": "The unique identifier of the customer account."
                    },
                    "account_info": {
                        "type": "object",
                        "description": "A dictionary containing the account information.",
                        "properties": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "action",
                    "account_id",
                    "account_info"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status message."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_customer_accounts(\n    action: str,\n    account_id: int,\n    account_info: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages customer accounts, including creation, update, and deletion.\n\n    Parameters:\n        action (str): The action to perform on the customer account (creation, update, or deletion).\n        account_id (int): The unique identifier of the customer account.\n        account_info (Dict[str, str]): A dictionary containing the account information.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-13",
    "snippet": "def view_and_analyze_sales_reports() -> None:\n    \"\"\"\n    View and analyze sales reports for performance insights.\n    \n    This function allows the user to view and analyze sales reports to gain insights into the performance of the business.\n    It does not return any value.\n    \"\"\"\n    # Code to view and analyze sales reports goes here",
    "completion-content": "{\n    \"function_snippet\": \"def view_and_analyze_sales_reports() -> None:\\n    \\\"\\\"\\\"\\n    View and analyze sales reports for performance insights.\\n\\n    This function allows the user to view and analyze sales reports to gain insights into the performance of the business.\\n    It does not return any value.\\n    \\\"\\\"\\\"\\n    # Code to view and analyze sales reports goes here\",\n    \"function_description\": {\n        \"name\": \"view_and_analyze_sales_reports\",\n        \"description\": \"View and analyze sales reports for performance insights.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": []\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {}\n        }\n    }\n}",
    "description": {
        "function_snippet": "def view_and_analyze_sales_reports() -> None:\n    \"\"\"\n    View and analyze sales reports for performance insights.\n\n    This function allows the user to view and analyze sales reports to gain insights into the performance of the business.\n    It does not return any value.\n    \"\"\"\n    # Code to view and analyze sales reports goes here",
        "function_description": {
            "name": "view_and_analyze_sales_reports",
            "description": "View and analyze sales reports for performance insights.",
            "parameters": {
                "type": "object",
                "properties": {},
                "required": []
            },
            "returns": {
                "type": "object",
                "properties": {}
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def view_and_analyze_sales_reports() -> None:\n    \"\"\"\n    View and analyze sales reports for performance insights.\n    \n    This function allows the user to view and analyze sales reports to gain insights into the performance of the business.\n    It does not return any value.\n    \"\"\"\n    # Code to view and analyze sales reports goes here",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-14",
    "snippet": "def calculate_taxes(region: str, income: float) -> float:\n    \"\"\"\n    Automatically calculates taxes for different regions.\n\n    Parameters:\n        region (str): The region in which the taxes are to be calculated.\n        income (float): The income amount on which taxes are to be calculated.\n\n    Returns:\n        float: The calculated tax amount.\n    \"\"\"\n    tax_rate = get_tax_rate(region)\n    tax_amount = income * tax_rate\n    return tax_amount",
    "completion-content": "{\n    \"function_snippet\": \"def calculate_taxes(region: str, income: float) -> float:\\n    \\\"\\\"\\\"\\n    Automatically calculates taxes for different regions.\\n\\n    Parameters:\\n        region (str): The region in which the taxes are to be calculated.\\n        income (float): The income amount on which taxes are to be calculated.\\n\\n    Returns:\\n        float: The calculated tax amount.\\n    \\\"\\\"\\\"\\n    tax_rate = get_tax_rate(region)\\n    tax_amount = income * tax_rate\\n    return tax_amount\",\n    \"function_description\": {\n        \"name\": \"calculate_taxes\",\n        \"description\": \"Automatically calculates taxes for different regions.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"region\": {\n                    \"type\": \"string\",\n                    \"description\": \"The region in which the taxes are to be calculated.\"\n                },\n                \"income\": {\n                    \"type\": \"float\",\n                    \"description\": \"The income amount on which taxes are to be calculated.\"\n                }\n            },\n            \"required\": [\"region\", \"income\"]\n        },\n        \"returns\": {\n            \"type\": \"float\",\n            \"description\": \"The calculated tax amount.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def calculate_taxes(region: str, income: float) -> float:\n    \"\"\"\n    Automatically calculates taxes for different regions.\n\n    Parameters:\n        region (str): The region in which the taxes are to be calculated.\n        income (float): The income amount on which taxes are to be calculated.\n\n    Returns:\n        float: The calculated tax amount.\n    \"\"\"\n    tax_rate = get_tax_rate(region)\n    tax_amount = income * tax_rate\n    return tax_amount",
        "function_description": {
            "name": "calculate_taxes",
            "description": "Automatically calculates taxes for different regions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region in which the taxes are to be calculated."
                    },
                    "income": {
                        "type": "float",
                        "description": "The income amount on which taxes are to be calculated."
                    }
                },
                "required": [
                    "region",
                    "income"
                ]
            },
            "returns": {
                "type": "float",
                "description": "The calculated tax amount."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def calculate_taxes(region: str, income: float) -> float:\n    \"\"\"\n    Automatically calculates taxes for different regions.\n\n    Parameters:\n        region (str): The region in which the taxes are to be calculated.\n        income (float): The income amount on which taxes are to be calculated.\n\n    Returns:\n        float: The calculated tax amount.\n    \"\"\"\n    tax_rate = get_tax_rate(region)\n    tax_amount = income * tax_rate\n    return tax_amount",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-15",
    "snippet": "def manage_store_blog_posts(\n    action: str,\n    post_id: int,\n    post_title: str,\n    post_content: str,\n    post_tags: List[str],\n) -> str:\n    \"\"\"\n    Manages and updates store blog posts.\n\n    Parameters:\n        action (str): The action to perform on the blog post. Can be 'create', 'update', or 'delete'.\n        post_id (int): The ID of the blog post.\n        post_title (str): The title of the blog post.\n        post_content (str): The content of the blog post.\n        post_tags (List[str]): A list of tags associated with the blog post.\n\n    Returns:\n        str: A message indicating the success or failure of the action performed on the blog post.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_store_blog_posts(\\n    action: str,\\n    post_id: int,\\n    post_title: str,\\n    post_content: str,\\n    post_tags: List[str],\\n) -> str:\\n    \\\"\\\"\\\"\\n    Manages and updates store blog posts.\\n\\n    Parameters:\\n        action (str): The action to perform on the blog post. Can be 'create', 'update', or 'delete'.\\n        post_id (int): The ID of the blog post.\\n        post_title (str): The title of the blog post.\\n        post_content (str): The content of the blog post.\\n        post_tags (List[str]): A list of tags associated with the blog post.\\n\\n    Returns:\\n        str: A message indicating the success or failure of the action performed on the blog post.\\n    \\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"manage_store_blog_posts\",\n        \"description\": \"Manages and updates store blog posts.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to perform on the blog post. Can be 'create', 'update', or 'delete'.\"\n                },\n                \"post_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the blog post.\"\n                },\n                \"post_title\": {\n                    \"type\": \"string\",\n                    \"description\": \"The title of the blog post.\"\n                },\n                \"post_content\": {\n                    \"type\": \"string\",\n                    \"description\": \"The content of the blog post.\"\n                },\n                \"post_tags\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of tags associated with the blog post.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"action\", \"post_id\", \"post_title\", \"post_content\", \"post_tags\"]\n        },\n        \"returns\": {\n            \"type\": \"string\",\n            \"description\": \"A message indicating the success or failure of the action performed on the blog post.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_store_blog_posts(\n    action: str,\n    post_id: int,\n    post_title: str,\n    post_content: str,\n    post_tags: List[str],\n) -> str:\n    \"\"\"\n    Manages and updates store blog posts.\n\n    Parameters:\n        action (str): The action to perform on the blog post. Can be 'create', 'update', or 'delete'.\n        post_id (int): The ID of the blog post.\n        post_title (str): The title of the blog post.\n        post_content (str): The content of the blog post.\n        post_tags (List[str]): A list of tags associated with the blog post.\n\n    Returns:\n        str: A message indicating the success or failure of the action performed on the blog post.\n    \"\"\n",
        "function_description": {
            "name": "manage_store_blog_posts",
            "description": "Manages and updates store blog posts.",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to perform on the blog post. Can be 'create', 'update', or 'delete'."
                    },
                    "post_id": {
                        "type": "integer",
                        "description": "The ID of the blog post."
                    },
                    "post_title": {
                        "type": "string",
                        "description": "The title of the blog post."
                    },
                    "post_content": {
                        "type": "string",
                        "description": "The content of the blog post."
                    },
                    "post_tags": {
                        "type": "array",
                        "description": "A list of tags associated with the blog post.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "action",
                    "post_id",
                    "post_title",
                    "post_content",
                    "post_tags"
                ]
            },
            "returns": {
                "type": "string",
                "description": "A message indicating the success or failure of the action performed on the blog post."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_store_blog_posts(\n    action: str,\n    post_id: int,\n    post_title: str,\n    post_content: str,\n    post_tags: List[str],\n) -> str:\n    \"\"\"\n    Manages and updates store blog posts.\n\n    Parameters:\n        action (str): The action to perform on the blog post. Can be 'create', 'update', or 'delete'.\n        post_id (int): The ID of the blog post.\n        post_title (str): The title of the blog post.\n        post_content (str): The content of the blog post.\n        post_tags (List[str]): A list of tags associated with the blog post.\n\n    Returns:\n        str: A message indicating the success or failure of the action performed on the blog post.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-16",
    "snippet": "def add_or_update_product_reviews_and_ratings(\n    product_id: str,\n    reviews: List[Dict[str, Union[str, int, float]]],\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Adds or updates product reviews and ratings.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        reviews (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing review details.\n                                                           Each dictionary should have 'review_id', 'rating', and 'comment' keys.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary with 'product_id' as a key and the product ID as a value.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def add_or_update_product_reviews_and_ratings(\\n    product_id: str,\\n    reviews: List[Dict[str, Union[str, int, float]]],\\n) -> Dict[str, Union[str, int, float]]:\\n    \\\"\\\"\\\"\\n    Adds or updates product reviews and ratings.\\n\\n    Parameters:\\n        product_id (str): The ID of the product.\\n        reviews (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing review details.\\n                                                           Each dictionary should have 'review_id', 'rating', and 'comment' keys.\\n\\n    Returns:\\n        Dict[str, Union[str, int, float]]: A dictionary with 'product_id' as a key and the product ID as a value.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"add_or_update_product_reviews_and_ratings\",\n        \"description\": \"Adds or updates product reviews and ratings.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the product.\"\n                },\n                \"reviews\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing review details. Each dictionary should have 'review_id', 'rating', and 'comment' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"review_id\": {\n                                \"type\": \"string\"\n                            },\n                            \"rating\": {\n                                \"type\": \"integer\"\n                            },\n                            \"comment\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\"review_id\", \"rating\", \"comment\"]\n                    }\n                }\n            },\n            \"required\": [\"product_id\", \"reviews\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the product.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def add_or_update_product_reviews_and_ratings(\n    product_id: str,\n    reviews: List[Dict[str, Union[str, int, float]]],\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Adds or updates product reviews and ratings.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        reviews (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing review details.\n                                                           Each dictionary should have 'review_id', 'rating', and 'comment' keys.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary with 'product_id' as a key and the product ID as a value.\n    \"\"\"",
        "function_description": {
            "name": "add_or_update_product_reviews_and_ratings",
            "description": "Adds or updates product reviews and ratings.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product."
                    },
                    "reviews": {
                        "type": "array",
                        "description": "A list of dictionaries containing review details. Each dictionary should have 'review_id', 'rating', and 'comment' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "review_id": {
                                    "type": "string"
                                },
                                "rating": {
                                    "type": "integer"
                                },
                                "comment": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "review_id",
                                "rating",
                                "comment"
                            ]
                        }
                    }
                },
                "required": [
                    "product_id",
                    "reviews"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def add_or_update_product_reviews_and_ratings(\n    product_id: str,\n    reviews: List[Dict[str, Union[str, int, float]]],\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Adds or updates product reviews and ratings.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        reviews (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing review details.\n                                                           Each dictionary should have 'review_id', 'rating', and 'comment' keys.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary with 'product_id' as a key and the product ID as a value.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-17",
    "snippet": "def manage_customer_wishlist(\n    customer_id: int,\n    product_id: int,\n    action: str,\n) -> None:\n    \"\"\"\n    Manages the customer wishlist functionality.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n        product_id (int): The ID of the product.\n        action (str): The action to perform on the wishlist (e.g. \"add\", \"remove\").\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_customer_wishlist(\\n    customer_id: int,\\n    product_id: int,\\n    action: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Manages the customer wishlist functionality.\\n\\n    Parameters:\\n        customer_id (int): The ID of the customer.\\n        product_id (int): The ID of the product.\\n        action (str): The action to perform on the wishlist (e.g. \\\"add\\\", \\\"remove\\\").\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"manage_customer_wishlist\",\n        \"description\": \"Manages the customer wishlist functionality.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the customer.\"\n                },\n                \"product_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the product.\"\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to perform on the wishlist (e.g. \\\"add\\\", \\\"remove\\\").\"\n                }\n            },\n            \"required\": [\"customer_id\", \"product_id\", \"action\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {}\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_customer_wishlist(\n    customer_id: int,\n    product_id: int,\n    action: str,\n) -> None:\n    \"\"\"\n    Manages the customer wishlist functionality.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n        product_id (int): The ID of the product.\n        action (str): The action to perform on the wishlist (e.g. \"add\", \"remove\").\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "manage_customer_wishlist",
            "description": "Manages the customer wishlist functionality.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "integer",
                        "description": "The ID of the customer."
                    },
                    "product_id": {
                        "type": "integer",
                        "description": "The ID of the product."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to perform on the wishlist (e.g. \"add\", \"remove\")."
                    }
                },
                "required": [
                    "customer_id",
                    "product_id",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {}
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_customer_wishlist(\n    customer_id: int,\n    product_id: int,\n    action: str,\n) -> None:\n    \"\"\"\n    Manages the customer wishlist functionality.\n\n    Parameters:\n        customer_id (int): The ID of the customer.\n        product_id (int): The ID of the product.\n        action (str): The action to perform on the wishlist (e.g. \"add\", \"remove\").\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-18",
    "snippet": "def set_staff_roles_and_permissions(\n    staff_id: str,\n    roles: List[str],\n    permissions: List[str],\n) -> bool:\n    \"\"\"\n    Sets and manages staff roles and permissions.\n\n    Parameters:\n        staff_id (str): The unique identifier of the staff member.\n        roles (List[str]): A list of roles to assign to the staff member.\n        permissions (List[str]): A list of permissions to assign to the staff member.\n\n    Returns:\n        bool: True if the staff roles and permissions are set and managed successfully, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def set_staff_roles_and_permissions(\\n    staff_id: str,\\n    roles: List[str],\\n    permissions: List[str],\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Sets and manages staff roles and permissions.\\n\\n    Parameters:\\n        staff_id (str): The unique identifier of the staff member.\\n        roles (List[str]): A list of roles to assign to the staff member.\\n        permissions (List[str]): A list of permissions to assign to the staff member.\\n\\n    Returns:\\n        bool: True if the staff roles and permissions are set and managed successfully, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"set_staff_roles_and_permissions\",\n        \"description\": \"Sets and manages staff roles and permissions.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"staff_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the staff member.\"\n                },\n                \"roles\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of roles to assign to the staff member.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"permissions\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of permissions to assign to the staff member.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"staff_id\", \"roles\", \"permissions\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def set_staff_roles_and_permissions(\n    staff_id: str,\n    roles: List[str],\n    permissions: List[str],\n) -> bool:\n    \"\"\"\n    Sets and manages staff roles and permissions.\n\n    Parameters:\n        staff_id (str): The unique identifier of the staff member.\n        roles (List[str]): A list of roles to assign to the staff member.\n        permissions (List[str]): A list of permissions to assign to the staff member.\n\n    Returns:\n        bool: True if the staff roles and permissions are set and managed successfully, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "set_staff_roles_and_permissions",
            "description": "Sets and manages staff roles and permissions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "staff_id": {
                        "type": "string",
                        "description": "The unique identifier of the staff member."
                    },
                    "roles": {
                        "type": "array",
                        "description": "A list of roles to assign to the staff member.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "permissions": {
                        "type": "array",
                        "description": "A list of permissions to assign to the staff member.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "staff_id",
                    "roles",
                    "permissions"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def set_staff_roles_and_permissions(\n    staff_id: str,\n    roles: List[str],\n    permissions: List[str],\n) -> bool:\n    \"\"\"\n    Sets and manages staff roles and permissions.\n\n    Parameters:\n        staff_id (str): The unique identifier of the staff member.\n        roles (List[str]): A list of roles to assign to the staff member.\n        permissions (List[str]): A list of permissions to assign to the staff member.\n\n    Returns:\n        bool: True if the staff roles and permissions are set and managed successfully, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-19",
    "snippet": "def handle_returns_and_refunds(\n    order_id: str,\n    return_reason: str,\n    refund_amount: float,\n    return_address: str\n) -> Dict[str, str]:\n    \"\"\"\n    Handles returns and refunds for orders.\n\n    Parameters:\n        order_id (str): The unique identifier of the order.\n        return_reason (str): The reason for returning the order.\n        refund_amount (float): The amount to be refunded to the customer.\n        return_address (str): The address where the customer will return the order.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the return/refund process as a value.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def handle_returns_and_refunds(\\norder_id: str,\\nreturn_reason: str,\\nrefund_amount: float,\\nreturn_address: str\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Handles returns and refunds for orders.\\n\\n    Parameters:\\n        order_id (str): The unique identifier of the order.\\n        return_reason (str): The reason for returning the order.\\n        refund_amount (float): The amount to be refunded to the customer.\\n        return_address (str): The address where the customer will return the order.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the return/refund process as a value.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"handle_returns_and_refunds\",\n        \"description\": \"Handles returns and refunds for orders.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"order_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the order.\"\n                },\n                \"return_reason\": {\n                    \"type\": \"string\",\n                    \"description\": \"The reason for returning the order.\"\n                },\n                \"refund_amount\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount to be refunded to the customer.\"\n                },\n                \"return_address\": {\n                    \"type\": \"string\",\n                    \"description\": \"The address where the customer will return the order.\"\n                }\n            },\n            \"required\": [\"order_id\", \"return_reason\", \"refund_amount\", \"return_address\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status of the return/refund process.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def handle_returns_and_refunds(\norder_id: str,\nreturn_reason: str,\nrefund_amount: float,\nreturn_address: str\n) -> Dict[str, str]:\n    \"\"\"\n    Handles returns and refunds for orders.\n\n    Parameters:\n        order_id (str): The unique identifier of the order.\n        return_reason (str): The reason for returning the order.\n        refund_amount (float): The amount to be refunded to the customer.\n        return_address (str): The address where the customer will return the order.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the return/refund process as a value.\n    \"\"\"",
        "function_description": {
            "name": "handle_returns_and_refunds",
            "description": "Handles returns and refunds for orders.",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_id": {
                        "type": "string",
                        "description": "The unique identifier of the order."
                    },
                    "return_reason": {
                        "type": "string",
                        "description": "The reason for returning the order."
                    },
                    "refund_amount": {
                        "type": "float",
                        "description": "The amount to be refunded to the customer."
                    },
                    "return_address": {
                        "type": "string",
                        "description": "The address where the customer will return the order."
                    }
                },
                "required": [
                    "order_id",
                    "return_reason",
                    "refund_amount",
                    "return_address"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the return/refund process."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def handle_returns_and_refunds(\n    order_id: str,\n    return_reason: str,\n    refund_amount: float,\n    return_address: str\n) -> Dict[str, str]:\n    \"\"\"\n    Handles returns and refunds for orders.\n\n    Parameters:\n        order_id (str): The unique identifier of the order.\n        return_reason (str): The reason for returning the order.\n        refund_amount (float): The amount to be refunded to the customer.\n        return_address (str): The address where the customer will return the order.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status of the return/refund process as a value.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-20",
    "snippet": "def integrate_payment_gateways(\n    gateways: List[str],\n) -> List[str]:\n    \"\"\"\n    Integrate third-party payment gateways or update existing ones.\n\n    Parameters:\n        gateways (List[str]): A list of payment gateways to integrate or update.\n\n    Returns:\n        List[str]: A list of successfully integrated or updated payment gateways.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def integrate_payment_gateways(\\n    gateways: List[str],\\n) -> List[str]:\\n    \\\"\\\"\\\"\\n    Integrate third-party payment gateways or update existing ones.\\n\\n    Parameters:\\n        gateways (List[str]): A list of payment gateways to integrate or update.\\n\\n    Returns:\\n        List[str]: A list of successfully integrated or updated payment gateways.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"integrate_payment_gateways\",\n        \"description\": \"Integrate third-party payment gateways or update existing ones.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"gateways\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of payment gateways to integrate or update.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"gateways\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"A list of successfully integrated or updated payment gateways.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def integrate_payment_gateways(\n    gateways: List[str],\n) -> List[str]:\n    \"\"\"\n    Integrate third-party payment gateways or update existing ones.\n\n    Parameters:\n        gateways (List[str]): A list of payment gateways to integrate or update.\n\n    Returns:\n        List[str]: A list of successfully integrated or updated payment gateways.\n    \"\"\"\n",
        "function_description": {
            "name": "integrate_payment_gateways",
            "description": "Integrate third-party payment gateways or update existing ones.",
            "parameters": {
                "type": "object",
                "properties": {
                    "gateways": {
                        "type": "array",
                        "description": "A list of payment gateways to integrate or update.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "gateways"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of successfully integrated or updated payment gateways."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def integrate_payment_gateways(\n    gateways: List[str],\n) -> List[str]:\n    \"\"\"\n    Integrate third-party payment gateways or update existing ones.\n\n    Parameters:\n        gateways (List[str]): A list of payment gateways to integrate or update.\n\n    Returns:\n        List[str]: A list of successfully integrated or updated payment gateways.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-21",
    "snippet": "def schedule_flash_sales(\n    start_date: str,\n    end_date: str,\n    discount_percentage: float,\n) -> None:\n    \"\"\"\n    Schedule and manage flash sales or special events.\n\n    Parameters:\n        start_date (str): The start date of the flash sale in YYYY-MM-DD format.\n        end_date (str): The end date of the flash sale in YYYY-MM-DD format.\n        discount_percentage (float): The percentage discount for the flash sale.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def schedule_flash_sales(\\nstart_date: str,\\nend_date: str,\\ndiscount_percentage: float,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Schedule and manage flash sales or special events.\\n\\n    Parameters:\\n        start_date (str): The start date of the flash sale in YYYY-MM-DD format.\\n        end_date (str): The end date of the flash sale in YYYY-MM-DD format.\\n        discount_percentage (float): The percentage discount for the flash sale.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"schedule_flash_sales\",\n        \"description\": \"Schedule and manage flash sales or special events.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the flash sale in YYYY-MM-DD format.\"\n                },\n                \"end_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The end date of the flash sale in YYYY-MM-DD format.\"\n                },\n                \"discount_percentage\": {\n                    \"type\": \"float\",\n                    \"description\": \"The percentage discount for the flash sale.\"\n                }\n            },\n            \"required\": [\"start_date\", \"end_date\", \"discount_percentage\"]\n        },\n        \"returns\": {\n            \"type\": \"null\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def schedule_flash_sales(\nstart_date: str,\nend_date: str,\ndiscount_percentage: float,\n) -> None:\n    \"\"\"\n    Schedule and manage flash sales or special events.\n\n    Parameters:\n        start_date (str): The start date of the flash sale in YYYY-MM-DD format.\n        end_date (str): The end date of the flash sale in YYYY-MM-DD format.\n        discount_percentage (float): The percentage discount for the flash sale.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "schedule_flash_sales",
            "description": "Schedule and manage flash sales or special events.",
            "parameters": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the flash sale in YYYY-MM-DD format."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "The end date of the flash sale in YYYY-MM-DD format."
                    },
                    "discount_percentage": {
                        "type": "float",
                        "description": "The percentage discount for the flash sale."
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "discount_percentage"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_flash_sales(\n    start_date: str,\n    end_date: str,\n    discount_percentage: float,\n) -> None:\n    \"\"\"\n    Schedule and manage flash sales or special events.\n\n    Parameters:\n        start_date (str): The start date of the flash sale in YYYY-MM-DD format.\n        end_date (str): The end date of the flash sale in YYYY-MM-DD format.\n        discount_percentage (float): The percentage discount for the flash sale.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-22",
    "snippet": "def setup_subscription_products(\n    product_name: str,\n    price: float,\n    description: str,\n    duration: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Set up and manage subscription-based products.\n\n    Parameters:\n        product_name (str): The name of the product.\n        price (float): The price of the product.\n        description (str): The description of the product.\n        duration (int): The duration of the subscription in months.\n\n    Returns:\n        Dict[str, Any]: A dictionary with information about the product.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def setup_subscription_products(\\n    product_name: str,\\n    price: float,\\n    description: str,\\n    duration: int,\\n) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Set up and manage subscription-based products.\\n\\n    Parameters:\\n        product_name (str): The name of the product.\\n        price (float): The price of the product.\\n        description (str): The description of the product.\\n        duration (int): The duration of the subscription in months.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary with information about the product.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"setup_subscription_products\",\n        \"description\": \"Set up and manage subscription-based products.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the product.\"\n                },\n                \"price\": {\n                    \"type\": \"float\",\n                    \"description\": \"The price of the product.\"\n                },\n                \"description\": {\n                    \"type\": \"string\",\n                    \"description\": \"The description of the product.\"\n                },\n                \"duration\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The duration of the subscription in months.\"\n                }\n            },\n            \"required\": [\"product_name\", \"price\", \"description\", \"duration\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_info\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary with information about the product.\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"price\": {\n                            \"type\": \"float\"\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        },\n                        \"duration\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    \"required\": [\"name\", \"price\", \"description\", \"duration\"]\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def setup_subscription_products(\n    product_name: str,\n    price: float,\n    description: str,\n    duration: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Set up and manage subscription-based products.\n\n    Parameters:\n        product_name (str): The name of the product.\n        price (float): The price of the product.\n        description (str): The description of the product.\n        duration (int): The duration of the subscription in months.\n\n    Returns:\n        Dict[str, Any]: A dictionary with information about the product.\n    \"\"\"",
        "function_description": {
            "name": "setup_subscription_products",
            "description": "Set up and manage subscription-based products.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_name": {
                        "type": "string",
                        "description": "The name of the product."
                    },
                    "price": {
                        "type": "float",
                        "description": "The price of the product."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the product."
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration of the subscription in months."
                    }
                },
                "required": [
                    "product_name",
                    "price",
                    "description",
                    "duration"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "product_info": {
                        "type": "object",
                        "description": "A dictionary with information about the product.",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "price": {
                                "type": "float"
                            },
                            "description": {
                                "type": "string"
                            },
                            "duration": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name",
                            "price",
                            "description",
                            "duration"
                        ]
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def setup_subscription_products(\n    product_name: str,\n    price: float,\n    description: str,\n    duration: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Set up and manage subscription-based products.\n\n    Parameters:\n        product_name (str): The name of the product.\n        price (float): The price of the product.\n        description (str): The description of the product.\n        duration (int): The duration of the subscription in months.\n\n    Returns:\n        Dict[str, Any]: A dictionary with information about the product.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-23",
    "snippet": "def send_abandoned_cart_emails(\n    cart_items: List[Dict[str, str]],\n    customer_email: str,\n    email_subject: str,\n    email_body: str,\n) -> None:\n    \"\"\"\n    Sends automated emails for abandoned cart recovery.\n\n    Parameters:\n        cart_items (List[Dict[str, str]]): A list of dictionaries containing cart item details.\n                                           Each dictionary should have 'product_name' and 'price' keys.\n        customer_email (str): The customer's email address.\n        email_subject (str): The subject of the email.\n        email_body (str): The body of the email.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def send_abandoned_cart_emails(\\n    cart_items: List[Dict[str, str]],\\n    customer_email: str,\\n    email_subject: str,\\n    email_body: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Sends automated emails for abandoned cart recovery.\\n\\n    Parameters:\\n        cart_items (List[Dict[str, str]]): A list of dictionaries containing cart item details.\\n                                           Each dictionary should have 'product_name' and 'price' keys.\\n        customer_email (str): The customer's email address.\\n        email_subject (str): The subject of the email.\\n        email_body (str): The body of the email.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"send_abandoned_cart_emails\",\n        \"description\": \"Sends automated emails for abandoned cart recovery.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"cart_items\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing cart item details. Each dictionary should have 'product_name' and 'price' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"product_name\": {\n                                \"type\": \"string\"\n                            },\n                            \"price\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\"product_name\", \"price\"]\n                    }\n                },\n                \"customer_email\": {\n                    \"type\": \"string\",\n                    \"description\": \"The customer's email address.\"\n                },\n                \"email_subject\": {\n                    \"type\": \"string\",\n                    \"description\": \"The subject of the email.\"\n                },\n                \"email_body\": {\n                    \"type\": \"string\",\n                    \"description\": \"The body of the email.\"\n                }\n            },\n            \"required\": [\"cart_items\", \"customer_email\", \"email_subject\", \"email_body\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def send_abandoned_cart_emails(\n    cart_items: List[Dict[str, str]],\n    customer_email: str,\n    email_subject: str,\n    email_body: str,\n) -> None:\n    \"\"\"\n    Sends automated emails for abandoned cart recovery.\n\n    Parameters:\n        cart_items (List[Dict[str, str]]): A list of dictionaries containing cart item details.\n                                           Each dictionary should have 'product_name' and 'price' keys.\n        customer_email (str): The customer's email address.\n        email_subject (str): The subject of the email.\n        email_body (str): The body of the email.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "send_abandoned_cart_emails",
            "description": "Sends automated emails for abandoned cart recovery.",
            "parameters": {
                "type": "object",
                "properties": {
                    "cart_items": {
                        "type": "array",
                        "description": "A list of dictionaries containing cart item details. Each dictionary should have 'product_name' and 'price' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "product_name": {
                                    "type": "string"
                                },
                                "price": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "product_name",
                                "price"
                            ]
                        }
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The customer's email address."
                    },
                    "email_subject": {
                        "type": "string",
                        "description": "The subject of the email."
                    },
                    "email_body": {
                        "type": "string",
                        "description": "The body of the email."
                    }
                },
                "required": [
                    "cart_items",
                    "customer_email",
                    "email_subject",
                    "email_body"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_abandoned_cart_emails(\n    cart_items: List[Dict[str, str]],\n    customer_email: str,\n    email_subject: str,\n    email_body: str,\n) -> None:\n    \"\"\"\n    Sends automated emails for abandoned cart recovery.\n\n    Parameters:\n        cart_items (List[Dict[str, str]]): A list of dictionaries containing cart item details.\n                                           Each dictionary should have 'product_name' and 'price' keys.\n        customer_email (str): The customer's email address.\n        email_subject (str): The subject of the email.\n        email_body (str): The body of the email.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-24",
    "snippet": "def integrate_with_social_media(\n    product: str,\n    platform: str,\n    listing: Dict[str, str],\n    advertising: bool,\n) -> None:\n    \"\"\"\n    Integrates with social media platforms for product listing and advertising.\n\n    Parameters:\n        product (str): The name of the product.\n        platform (str): The social media platform to integrate with.\n        listing (Dict[str, str]): A dictionary containing the product listing details.\n                                  Each key represents a detail (e.g., 'title', 'description', 'price').\n        advertising (bool): Whether to advertise the product on the social media platform.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def integrate_with_social_media(\\n    product: str,\\n    platform: str,\\n    listing: Dict[str, str],\\n    advertising: bool,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Integrates with social media platforms for product listing and advertising.\\n\\n    Parameters:\\n        product (str): The name of the product.\\n        platform (str): The social media platform to integrate with.\\n        listing (Dict[str, str]): A dictionary containing the product listing details.\\n                                  Each key represents a detail (e.g., 'title', 'description', 'price').\\n        advertising (bool): Whether to advertise the product on the social media platform.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"integrate_with_social_media\",\n        \"description\": \"Integrates with social media platforms for product listing and advertising.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the product.\"\n                },\n                \"platform\": {\n                    \"type\": \"string\",\n                    \"description\": \"The social media platform to integrate with.\"\n                },\n                \"listing\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the product listing details. Each key represents a detail (e.g., 'title', 'description', 'price').\",\n                    \"properties\": {\n                        \"title\": {\n                            \"type\": \"string\"\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        },\n                        \"price\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"title\", \"description\", \"price\"]\n                },\n                \"advertising\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether to advertise the product on the social media platform.\"\n                }\n            },\n            \"required\": [\"product\", \"platform\", \"listing\", \"advertising\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def integrate_with_social_media(\n    product: str,\n    platform: str,\n    listing: Dict[str, str],\n    advertising: bool,\n) -> None:\n    \"\"\"\n    Integrates with social media platforms for product listing and advertising.\n\n    Parameters:\n        product (str): The name of the product.\n        platform (str): The social media platform to integrate with.\n        listing (Dict[str, str]): A dictionary containing the product listing details.\n                                  Each key represents a detail (e.g., 'title', 'description', 'price').\n        advertising (bool): Whether to advertise the product on the social media platform.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "integrate_with_social_media",
            "description": "Integrates with social media platforms for product listing and advertising.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product": {
                        "type": "string",
                        "description": "The name of the product."
                    },
                    "platform": {
                        "type": "string",
                        "description": "The social media platform to integrate with."
                    },
                    "listing": {
                        "type": "object",
                        "description": "A dictionary containing the product listing details. Each key represents a detail (e.g., 'title', 'description', 'price').",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "price": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "title",
                            "description",
                            "price"
                        ]
                    },
                    "advertising": {
                        "type": "boolean",
                        "description": "Whether to advertise the product on the social media platform."
                    }
                },
                "required": [
                    "product",
                    "platform",
                    "listing",
                    "advertising"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def integrate_with_social_media(\n    product: str,\n    platform: str,\n    listing: Dict[str, str],\n    advertising: bool,\n) -> None:\n    \"\"\"\n    Integrates with social media platforms for product listing and advertising.\n\n    Parameters:\n        product (str): The name of the product.\n        platform (str): The social media platform to integrate with.\n        listing (Dict[str, str]): A dictionary containing the product listing details.\n                                  Each key represents a detail (e.g., 'title', 'description', 'price').\n        advertising (bool): Whether to advertise the product on the social media platform.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-25",
    "snippet": "def manage_seo_settings(\n    meta_description: str,\n    url_structure: str,\n) -> None:\n    \"\"\"\n    Manage SEO settings including meta descriptions and URL structures.\n\n    Parameters:\n        meta_description (str): The meta description for the website.\n        url_structure (str): The desired URL structure for the website.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_seo_settings(meta_description: str, url_structure: str,) -> None:\",\n    \"function_description\": {\n        \"name\": \"manage_seo_settings\",\n        \"description\": \"Manage SEO settings including meta descriptions and URL structures.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meta_description\": {\n                    \"type\": \"string\",\n                    \"description\": \"The meta description for the website.\"\n                },\n                \"url_structure\": {\n                    \"type\": \"string\",\n                    \"description\": \"The desired URL structure for the website.\"\n                }\n            },\n            \"required\": [\"meta_description\", \"url_structure\"]\n        },\n        \"returns\": {\n            \"type\": \"null\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_seo_settings(meta_description: str, url_structure: str,) -> None:",
        "function_description": {
            "name": "manage_seo_settings",
            "description": "Manage SEO settings including meta descriptions and URL structures.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meta_description": {
                        "type": "string",
                        "description": "The meta description for the website."
                    },
                    "url_structure": {
                        "type": "string",
                        "description": "The desired URL structure for the website."
                    }
                },
                "required": [
                    "meta_description",
                    "url_structure"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_seo_settings(\n    meta_description: str,\n    url_structure: str,\n) -> None:\n    \"\"\"\n    Manage SEO settings including meta descriptions and URL structures.\n\n    Parameters:\n        meta_description (str): The meta description for the website.\n        url_structure (str): The desired URL structure for the website.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "shopify-26",
    "snippet": "def run_manage_affiliate_programs() -> None:\n    \"\"\"\n    Runs and manages affiliate programs.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def run_manage_affiliate_programs() -> None:\\n    \\\"\\\"\\\"\\n    Runs and manages affiliate programs.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"run_manage_affiliate_programs\",\n        \"description\": \"Runs and manages affiliate programs.\",\n        \"parameters\": {},\n        \"returns\": {\n            \"type\": \"None\",\n            \"description\": \"This function does not return any value.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def run_manage_affiliate_programs() -> None:\n    \"\"\"\n    Runs and manages affiliate programs.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "run_manage_affiliate_programs",
            "description": "Runs and manages affiliate programs.",
            "parameters": {},
            "returns": {
                "type": "None",
                "description": "This function does not return any value."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def run_manage_affiliate_programs() -> None:\n    \"\"\"\n    Runs and manages affiliate programs.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}

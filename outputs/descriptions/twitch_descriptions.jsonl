{
    "function_id": "twitch-1",
    "snippet": "def start_stop_twitch_stream(stream_status: str) -> str:\n    \"\"\"\n    Start or stop the Twitch stream.\n\n    Parameters:\n        stream_status (str): The current status of the stream.\n\n    Returns:\n        str: The updated status of the stream.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def start_stop_twitch_stream(stream_status: str) -> str:\\n    \\\"\\\"\\\"\\n    Start or stop the Twitch stream.\\n\\n    Parameters:\\n        stream_status (str): The current status of the stream.\\n\\n    Returns:\\n        str: The updated status of the stream.\\n    \\\"\\\"\\\"\\n    \",\n    \"function_description\": {\n        \"name\": \"start_stop_twitch_stream\",\n        \"description\": \"Start or stop the Twitch stream.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"stream_status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current status of the stream.\"\n                }\n            },\n            \"required\": [\"stream_status\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"updated_status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The updated status of the stream.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def start_stop_twitch_stream(stream_status: str) -> str:\n    \"\"\"\n    Start or stop the Twitch stream.\n\n    Parameters:\n        stream_status (str): The current status of the stream.\n\n    Returns:\n        str: The updated status of the stream.\n    \"\"\"\n    ",
        "function_description": {
            "name": "start_stop_twitch_stream",
            "description": "Start or stop the Twitch stream.",
            "parameters": {
                "type": "object",
                "properties": {
                    "stream_status": {
                        "type": "string",
                        "description": "The current status of the stream."
                    }
                },
                "required": [
                    "stream_status"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "updated_status": {
                        "type": "string",
                        "description": "The updated status of the stream."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def start_stop_twitch_stream(stream_status: str) -> str:\n    \"\"\"\n    Start or stop the Twitch stream.\n\n    Parameters:\n        stream_status (str): The current status of the stream.\n\n    Returns:\n        str: The updated status of the stream.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-2",
    "snippet": "def schedule_twitch_stream(\n    stream_name: str,\n    stream_date: str,\n    stream_time: str,\n    stream_duration: int,\n    stream_category: str,\n) -> None:\n    \"\"\"\n    Schedule a future Twitch stream.\n\n    Parameters:\n        stream_name (str): The name of the Twitch stream.\n        stream_date (str): The date of the Twitch stream in YYYY-MM-DD format.\n        stream_time (str): The time of the Twitch stream in HH:MM format.\n        stream_duration (int): The duration of the Twitch stream in minutes.\n        stream_category (str): The category of the Twitch stream.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def schedule_twitch_stream(\\n    stream_name: str,\\n    stream_date: str,\\n    stream_time: str,\\n    stream_duration: int,\\n    stream_category: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Schedule a future Twitch stream.\\n\\n    Parameters:\\n        stream_name (str): The name of the Twitch stream.\\n        stream_date (str): The date of the Twitch stream in YYYY-MM-DD format.\\n        stream_time (str): The time of the Twitch stream in HH:MM format.\\n        stream_duration (int): The duration of the Twitch stream in minutes.\\n        stream_category (str): The category of the Twitch stream.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"schedule_twitch_stream\",\n        \"description\": \"Schedule a future Twitch stream.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"stream_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the Twitch stream.\"\n                },\n                \"stream_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The date of the Twitch stream in YYYY-MM-DD format.\"\n                },\n                \"stream_time\": {\n                    \"type\": \"string\",\n                    \"description\": \"The time of the Twitch stream in HH:MM format.\"\n                },\n                \"stream_duration\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The duration of the Twitch stream in minutes.\"\n                },\n                \"stream_category\": {\n                    \"type\": \"string\",\n                    \"description\": \"The category of the Twitch stream.\"\n                }\n            },\n            \"required\": [\"stream_name\", \"stream_date\", \"stream_time\", \"stream_duration\", \"stream_category\"]\n        },\n        \"returns\": {\n            \"type\": \"null\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def schedule_twitch_stream(\n    stream_name: str,\n    stream_date: str,\n    stream_time: str,\n    stream_duration: int,\n    stream_category: str,\n) -> None:\n    \"\"\"\n    Schedule a future Twitch stream.\n\n    Parameters:\n        stream_name (str): The name of the Twitch stream.\n        stream_date (str): The date of the Twitch stream in YYYY-MM-DD format.\n        stream_time (str): The time of the Twitch stream in HH:MM format.\n        stream_duration (int): The duration of the Twitch stream in minutes.\n        stream_category (str): The category of the Twitch stream.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "schedule_twitch_stream",
            "description": "Schedule a future Twitch stream.",
            "parameters": {
                "type": "object",
                "properties": {
                    "stream_name": {
                        "type": "string",
                        "description": "The name of the Twitch stream."
                    },
                    "stream_date": {
                        "type": "string",
                        "description": "The date of the Twitch stream in YYYY-MM-DD format."
                    },
                    "stream_time": {
                        "type": "string",
                        "description": "The time of the Twitch stream in HH:MM format."
                    },
                    "stream_duration": {
                        "type": "integer",
                        "description": "The duration of the Twitch stream in minutes."
                    },
                    "stream_category": {
                        "type": "string",
                        "description": "The category of the Twitch stream."
                    }
                },
                "required": [
                    "stream_name",
                    "stream_date",
                    "stream_time",
                    "stream_duration",
                    "stream_category"
                ]
            },
            "returns": {
                "type": "null"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def schedule_twitch_stream(\n    stream_name: str,\n    stream_date: str,\n    stream_time: str,\n    stream_duration: int,\n    stream_category: str,\n) -> None:\n    \"\"\"\n    Schedule a future Twitch stream.\n\n    Parameters:\n        stream_name (str): The name of the Twitch stream.\n        stream_date (str): The date of the Twitch stream in YYYY-MM-DD format.\n        stream_time (str): The time of the Twitch stream in HH:MM format.\n        stream_duration (int): The duration of the Twitch stream in minutes.\n        stream_category (str): The category of the Twitch stream.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-3",
    "snippet": "def change_stream_title_category(\n    stream_id: str,\n    new_title: str,\n    new_category: str,\n) -> None:\n    \"\"\"\n    Changes the title and category of the current stream.\n\n    Parameters:\n        stream_id (str): The ID of the current stream.\n        new_title (str): The new title for the stream.\n        new_category (str): The new category for the stream.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def change_stream_title_category(\\n    stream_id: str,\\n    new_title: str,\\n    new_category: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Changes the title and category of the current stream.\\n\\n    Parameters:\\n        stream_id (str): The ID of the current stream.\\n        new_title (str): The new title for the stream.\\n        new_category (str): The new category for the stream.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"change_stream_title_category\",\n        \"description\": \"Changes the title and category of the current stream.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"stream_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the current stream.\"\n                },\n                \"new_title\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new title for the stream.\"\n                },\n                \"new_category\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new category for the stream.\"\n                }\n            },\n            \"required\": [\"stream_id\", \"new_title\", \"new_category\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {}\n        }\n    }\n}",
    "description": {
        "function_snippet": "def change_stream_title_category(\n    stream_id: str,\n    new_title: str,\n    new_category: str,\n) -> None:\n    \"\"\"\n    Changes the title and category of the current stream.\n\n    Parameters:\n        stream_id (str): The ID of the current stream.\n        new_title (str): The new title for the stream.\n        new_category (str): The new category for the stream.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "change_stream_title_category",
            "description": "Changes the title and category of the current stream.",
            "parameters": {
                "type": "object",
                "properties": {
                    "stream_id": {
                        "type": "string",
                        "description": "The ID of the current stream."
                    },
                    "new_title": {
                        "type": "string",
                        "description": "The new title for the stream."
                    },
                    "new_category": {
                        "type": "string",
                        "description": "The new category for the stream."
                    }
                },
                "required": [
                    "stream_id",
                    "new_title",
                    "new_category"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {}
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def change_stream_title_category(\n    stream_id: str,\n    new_title: str,\n    new_category: str,\n) -> None:\n    \"\"\"\n    Changes the title and category of the current stream.\n\n    Parameters:\n        stream_id (str): The ID of the current stream.\n        new_title (str): The new title for the stream.\n        new_category (str): The new category for the stream.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-4",
    "snippet": "def retrieve_viewer_count_and_analytics() -> Dict[str, Any]:\n    \"\"\"\n    Retrieves the current viewer count and other analytics.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the viewer count and other analytics.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_viewer_count_and_analytics() -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Retrieves the current viewer count and other analytics.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary containing the viewer count and other analytics.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"retrieve_viewer_count_and_analytics\",\n        \"description\": \"Retrieves the current viewer count and other analytics.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": []\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"float\",\n                \"description\": \"A dictionary containing the viewer count and other analytics.\"\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_viewer_count_and_analytics() -> Dict[str, Any]:\n    \"\"\"\n    Retrieves the current viewer count and other analytics.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the viewer count and other analytics.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "retrieve_viewer_count_and_analytics",
            "description": "Retrieves the current viewer count and other analytics.",
            "parameters": {
                "type": "object",
                "properties": {},
                "required": []
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "float",
                    "description": "A dictionary containing the viewer count and other analytics."
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_viewer_count_and_analytics() -> Dict[str, Any]:\n    \"\"\"\n    Retrieves the current viewer count and other analytics.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the viewer count and other analytics.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-5",
    "snippet": "def manage_and_post_messages(\n    chat_id: int,\n    messages: List[str],\n    interval: int,\n) -> None:\n    \"\"\"\n    Manages and posts automated messages in the chat.\n\n    Parameters:\n        chat_id (int): The ID of the chat where the messages will be posted.\n        messages (List[str]): A list of messages to be posted.\n        interval (int): The time interval in seconds between each message.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_and_post_messages(\\n    chat_id: int,\\n    messages: List[str],\\n    interval: int,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Manages and posts automated messages in the chat.\\n\\n    Parameters:\\n        chat_id (int): The ID of the chat where the messages will be posted.\\n        messages (List[str]): A list of messages to be posted.\\n        interval (int): The time interval in seconds between each message.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"manage_and_post_messages\",\n        \"description\": \"Manages and posts automated messages in the chat.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"chat_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the chat where the messages will be posted.\"\n                },\n                \"messages\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of messages to be posted.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"interval\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The time interval in seconds between each message.\"\n                }\n            },\n            \"required\": [\"chat_id\", \"messages\", \"interval\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_and_post_messages(\n    chat_id: int,\n    messages: List[str],\n    interval: int,\n) -> None:\n    \"\"\"\n    Manages and posts automated messages in the chat.\n\n    Parameters:\n        chat_id (int): The ID of the chat where the messages will be posted.\n        messages (List[str]): A list of messages to be posted.\n        interval (int): The time interval in seconds between each message.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "manage_and_post_messages",
            "description": "Manages and posts automated messages in the chat.",
            "parameters": {
                "type": "object",
                "properties": {
                    "chat_id": {
                        "type": "integer",
                        "description": "The ID of the chat where the messages will be posted."
                    },
                    "messages": {
                        "type": "array",
                        "description": "A list of messages to be posted.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The time interval in seconds between each message."
                    }
                },
                "required": [
                    "chat_id",
                    "messages",
                    "interval"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_and_post_messages(\n    chat_id: int,\n    messages: List[str],\n    interval: int,\n) -> None:\n    \"\"\"\n    Manages and posts automated messages in the chat.\n\n    Parameters:\n        chat_id (int): The ID of the chat where the messages will be posted.\n        messages (List[str]): A list of messages to be posted.\n        interval (int): The time interval in seconds between each message.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-6",
    "snippet": "def activate_deactivate_emotes(\n    emotes: List[str],\n    activate: bool,\n) -> None:\n    \"\"\"\n    Activate or deactivate certain emotes in the chat.\n\n    Parameters:\n        emotes (List[str]): A list of emotes to activate or deactivate.\n        activate (bool): A boolean value indicating whether to activate or deactivate the emotes.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def activate_deactivate_emotes(\\nemotes: List[str],\\nactivate: bool,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Activate or deactivate certain emotes in the chat.\\n\\n    Parameters:\\n        emotes (List[str]): A list of emotes to activate or deactivate.\\n        activate (bool): A boolean value indicating whether to activate or deactivate the emotes.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"activate_deactivate_emotes\",\n        \"description\": \"Activate or deactivate certain emotes in the chat.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"emotes\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of emotes to activate or deactivate.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"activate\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A boolean value indicating whether to activate or deactivate the emotes.\"\n                }\n            },\n            \"required\": [\"emotes\", \"activate\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def activate_deactivate_emotes(\nemotes: List[str],\nactivate: bool,\n) -> None:\n    \"\"\"\n    Activate or deactivate certain emotes in the chat.\n\n    Parameters:\n        emotes (List[str]): A list of emotes to activate or deactivate.\n        activate (bool): A boolean value indicating whether to activate or deactivate the emotes.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "activate_deactivate_emotes",
            "description": "Activate or deactivate certain emotes in the chat.",
            "parameters": {
                "type": "object",
                "properties": {
                    "emotes": {
                        "type": "array",
                        "description": "A list of emotes to activate or deactivate.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "activate": {
                        "type": "boolean",
                        "description": "A boolean value indicating whether to activate or deactivate the emotes."
                    }
                },
                "required": [
                    "emotes",
                    "activate"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def activate_deactivate_emotes(\n    emotes: List[str],\n    activate: bool,\n) -> None:\n    \"\"\"\n    Activate or deactivate certain emotes in the chat.\n\n    Parameters:\n        emotes (List[str]): A list of emotes to activate or deactivate.\n        activate (bool): A boolean value indicating whether to activate or deactivate the emotes.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-7",
    "snippet": "def initiate_subscriber_only_mode() -> None:\n    \"\"\"\n    Initiates subscriber-only mode in the chat.\n    \"\"\"\n    # Code implementation goes here",
    "completion-content": "{\n    \"function_snippet\": \"def initiate_subscriber_only_mode() -> None:\\n    \\\"\\\"\\\"\\n    Initiates subscriber-only mode in the chat.\\n    \\\"\\\"\\\"\\n    # Code implementation goes here\",\n    \"function_description\": {\n        \"name\": \"initiate_subscriber_only_mode\",\n        \"description\": \"Initiates subscriber-only mode in the chat.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": []\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def initiate_subscriber_only_mode() -> None:\n    \"\"\"\n    Initiates subscriber-only mode in the chat.\n    \"\"\"\n    # Code implementation goes here",
        "function_description": {
            "name": "initiate_subscriber_only_mode",
            "description": "Initiates subscriber-only mode in the chat.",
            "parameters": {
                "type": "object",
                "properties": {},
                "required": []
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def initiate_subscriber_only_mode() -> None:\n    \"\"\"\n    Initiates subscriber-only mode in the chat.\n    \"\"\"\n    # Code implementation goes here",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-8",
    "snippet": "def run_advertisements(\n    intervals: List[int],\n    advertisements: List[str]\n) -> None:\n    \"\"\"\n    Run advertisements at specified intervals.\n\n    Parameters:\n        intervals (List[int]): A list of intervals in seconds.\n        advertisements (List[str]): A list of advertisements to be displayed.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def run_advertisements(\\n    intervals: List[int],\\n    advertisements: List[str]\\n) -> None:\\n    \\\"\\\"\\\"\\n    Run advertisements at specified intervals.\\n\\n    Parameters:\\n        intervals (List[int]): A list of intervals in seconds.\\n        advertisements (List[str]): A list of advertisements to be displayed.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"run_advertisements\",\n        \"description\": \"Run advertisements at specified intervals.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"intervals\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of intervals in seconds.\",\n                    \"items\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"advertisements\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of advertisements to be displayed.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"intervals\", \"advertisements\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def run_advertisements(\n    intervals: List[int],\n    advertisements: List[str]\n) -> None:\n    \"\"\"\n    Run advertisements at specified intervals.\n\n    Parameters:\n        intervals (List[int]): A list of intervals in seconds.\n        advertisements (List[str]): A list of advertisements to be displayed.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "run_advertisements",
            "description": "Run advertisements at specified intervals.",
            "parameters": {
                "type": "object",
                "properties": {
                    "intervals": {
                        "type": "array",
                        "description": "A list of intervals in seconds.",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "advertisements": {
                        "type": "array",
                        "description": "A list of advertisements to be displayed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "intervals",
                    "advertisements"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def run_advertisements(\n    intervals: List[int],\n    advertisements: List[str]\n) -> None:\n    \"\"\"\n    Run advertisements at specified intervals.\n\n    Parameters:\n        intervals (List[int]): A list of intervals in seconds.\n        advertisements (List[str]): A list of advertisements to be displayed.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-9",
    "snippet": "def create_chat_command(\n    command_name: str,\n    command_function: Callable,\n    command_description: str,\n    command_usage: str,\n) -> None:\n    \"\"\"\n    Creates a custom chat command.\n\n    Parameters:\n        command_name (str): The name of the command.\n        command_function (Callable): The function to be executed when the command is called.\n        command_description (str): A description of the command.\n        command_usage (str): An example of how to use the command.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def create_chat_command(\\n    command_name: str,\\n    command_function: Callable,\\n    command_description: str,\\n    command_usage: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Creates a custom chat command.\\n\\n    Parameters:\\n        command_name (str): The name of the command.\\n        command_function (Callable): The function to be executed when the command is called.\\n        command_description (str): A description of the command.\\n        command_usage (str): An example of how to use the command.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"create_chat_command\",\n        \"description\": \"Creates a custom chat command.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"command_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the command.\"\n                },\n                \"command_function\": {\n                    \"type\": \"function\",\n                    \"description\": \"The function to be executed when the command is called.\"\n                },\n                \"command_description\": {\n                    \"type\": \"string\",\n                    \"description\": \"A description of the command.\"\n                },\n                \"command_usage\": {\n                    \"type\": \"string\",\n                    \"description\": \"An example of how to use the command.\"\n                }\n            },\n            \"required\": [\"command_name\", \"command_function\", \"command_description\", \"command_usage\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_chat_command(\n    command_name: str,\n    command_function: Callable,\n    command_description: str,\n    command_usage: str,\n) -> None:\n    \"\"\"\n    Creates a custom chat command.\n\n    Parameters:\n        command_name (str): The name of the command.\n        command_function (Callable): The function to be executed when the command is called.\n        command_description (str): A description of the command.\n        command_usage (str): An example of how to use the command.\n\n    Returns:\n        None\n    \"\"\"",
        "function_description": {
            "name": "create_chat_command",
            "description": "Creates a custom chat command.",
            "parameters": {
                "type": "object",
                "properties": {
                    "command_name": {
                        "type": "string",
                        "description": "The name of the command."
                    },
                    "command_function": {
                        "type": "function",
                        "description": "The function to be executed when the command is called."
                    },
                    "command_description": {
                        "type": "string",
                        "description": "A description of the command."
                    },
                    "command_usage": {
                        "type": "string",
                        "description": "An example of how to use the command."
                    }
                },
                "required": [
                    "command_name",
                    "command_function",
                    "command_description",
                    "command_usage"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_chat_command(\n    command_name: str,\n    command_function: Callable,\n    command_description: str,\n    command_usage: str,\n) -> None:\n    \"\"\"\n    Creates a custom chat command.\n\n    Parameters:\n        command_name (str): The name of the command.\n        command_function (Callable): The function to be executed when the command is called.\n        command_description (str): A description of the command.\n        command_usage (str): An example of how to use the command.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-10",
    "snippet": "def shout_out_to_new_subscribers_followers_donors():\n    \"\"\"\n    Automatically shout-out to new subscribers, followers, or donors.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def shout_out_to_new_subscribers_followers_donors():\\n    \\\"\\\"\\\"\\n    Automatically shout-out to new subscribers, followers, or donors.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"shout_out_to_new_subscribers_followers_donors\",\n        \"description\": \"Automatically shout-out to new subscribers, followers, or donors.\",\n        \"parameters\": {},\n        \"returns\": {}\n    }\n}",
    "description": {
        "function_snippet": "def shout_out_to_new_subscribers_followers_donors():\n    \"\"\"\n    Automatically shout-out to new subscribers, followers, or donors.\n    \"\"\"",
        "function_description": {
            "name": "shout_out_to_new_subscribers_followers_donors",
            "description": "Automatically shout-out to new subscribers, followers, or donors.",
            "parameters": {},
            "returns": {}
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def shout_out_to_new_subscribers_followers_donors():\n    \"\"\"\n    Automatically shout-out to new subscribers, followers, or donors.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-11",
    "snippet": "def create_stream_marker(\n    stream_id: str,\n    marker_time: int,\n    marker_title: str,\n) -> str:\n    \"\"\"\n    Creates a stream marker for a highlight.\n\n    Parameters:\n        stream_id (str): The ID of the stream.\n        marker_time (int): The timestamp of the marker in seconds.\n        marker_title (str): The title of the marker.\n\n    Returns:\n        str: The ID of the created stream marker.\n    \"\"\"\n\ndef get_stream_marker(\n    stream_marker_id: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Retrieves information about a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker.\n\n    Returns:\n        Dict[str, Union[str, int]]: A dictionary containing information about the stream marker.\n                                   The dictionary should have 'stream_id', 'marker_time', and 'marker_title' keys.\n    \"\"\"\n\ndef update_stream_marker(\n    stream_marker_id: str,\n    new_marker_title: str,\n) -> None:\n    \"\"\"\n    Updates the title of a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to update.\n        new_marker_title (str): The new title for the stream marker.\n\n    Returns:\n        None\n    \"\"\"\n\ndef delete_stream_marker(\n    stream_marker_id: str,\n) -> None:\n    \"\"\"\n    Deletes a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to delete.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def create_stream_marker(\\n    stream_id: str,\\n    marker_time: int,\\n    marker_title: str,\\n) -> str:\\n    \\\"\\\"\\\"\\n    Creates a stream marker for a highlight.\\n\\n    Parameters:\\n        stream_id (str): The ID of the stream.\\n        marker_time (int): The timestamp of the marker in seconds.\\n        marker_title (str): The title of the marker.\\n\\n    Returns:\\n        str: The ID of the created stream marker.\\n    \\\"\\\"\\\"\\n\\n\\n\\ndef get_stream_marker(\\n    stream_marker_id: str,\\n) -> Dict[str, Union[str, int]]:\\n    \\\"\\\"\\\"\\n    Retrieves information about a stream marker.\\n\\n    Parameters:\\n        stream_marker_id (str): The ID of the stream marker.\\n\\n    Returns:\\n        Dict[str, Union[str, int]]: A dictionary containing information about the stream marker.\\n                                   The dictionary should have 'stream_id', 'marker_time', and 'marker_title' keys.\\n    \\\"\\\"\\\"\\n\\n\\ndef update_stream_marker(\\n    stream_marker_id: str,\\n    new_marker_title: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Updates the title of a stream marker.\\n\\n    Parameters:\\n        stream_marker_id (str): The ID of the stream marker to update.\\n        new_marker_title (str): The new title for the stream marker.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\\ndef delete_stream_marker(\\n    stream_marker_id: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Deletes a stream marker.\\n\\n    Parameters:\\n        stream_marker_id (str): The ID of the stream marker to delete.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"create_stream_marker\",\n        \"description\": \"Creates a stream marker for a highlight.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"stream_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the stream.\"\n                },\n                \"marker_time\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The timestamp of the marker in seconds.\"\n                },\n                \"marker_title\": {\n                    \"type\": \"string\",\n                    \"description\": \"The title of the marker.\"\n                }\n            },\n            \"required\": [\"stream_id\", \"marker_time\", \"marker_title\"]\n        },\n        \"returns\": {\n            \"type\": \"string\",\n            \"description\": \"The ID of the created stream marker.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_stream_marker(\n    stream_id: str,\n    marker_time: int,\n    marker_title: str,\n) -> str:\n    \"\"\"\n    Creates a stream marker for a highlight.\n\n    Parameters:\n        stream_id (str): The ID of the stream.\n        marker_time (int): The timestamp of the marker in seconds.\n        marker_title (str): The title of the marker.\n\n    Returns:\n        str: The ID of the created stream marker.\n    \"\"\"\n\n\n\ndef get_stream_marker(\n    stream_marker_id: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Retrieves information about a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker.\n\n    Returns:\n        Dict[str, Union[str, int]]: A dictionary containing information about the stream marker.\n                                   The dictionary should have 'stream_id', 'marker_time', and 'marker_title' keys.\n    \"\"\"\n\n\ndef update_stream_marker(\n    stream_marker_id: str,\n    new_marker_title: str,\n) -> None:\n    \"\"\"\n    Updates the title of a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to update.\n        new_marker_title (str): The new title for the stream marker.\n\n    Returns:\n        None\n    \"\"\"\n\n\ndef delete_stream_marker(\n    stream_marker_id: str,\n) -> None:\n    \"\"\"\n    Deletes a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to delete.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "create_stream_marker",
            "description": "Creates a stream marker for a highlight.",
            "parameters": {
                "type": "object",
                "properties": {
                    "stream_id": {
                        "type": "string",
                        "description": "The ID of the stream."
                    },
                    "marker_time": {
                        "type": "integer",
                        "description": "The timestamp of the marker in seconds."
                    },
                    "marker_title": {
                        "type": "string",
                        "description": "The title of the marker."
                    }
                },
                "required": [
                    "stream_id",
                    "marker_time",
                    "marker_title"
                ]
            },
            "returns": {
                "type": "string",
                "description": "The ID of the created stream marker."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_stream_marker(\n    stream_id: str,\n    marker_time: int,\n    marker_title: str,\n) -> str:\n    \"\"\"\n    Creates a stream marker for a highlight.\n\n    Parameters:\n        stream_id (str): The ID of the stream.\n        marker_time (int): The timestamp of the marker in seconds.\n        marker_title (str): The title of the marker.\n\n    Returns:\n        str: The ID of the created stream marker.\n    \"\"\"\n\ndef get_stream_marker(\n    stream_marker_id: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Retrieves information about a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker.\n\n    Returns:\n        Dict[str, Union[str, int]]: A dictionary containing information about the stream marker.\n                                   The dictionary should have 'stream_id', 'marker_time', and 'marker_title' keys.\n    \"\"\"\n\ndef update_stream_marker(\n    stream_marker_id: str,\n    new_marker_title: str,\n) -> None:\n    \"\"\"\n    Updates the title of a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to update.\n        new_marker_title (str): The new title for the stream marker.\n\n    Returns:\n        None\n    \"\"\"\n\ndef delete_stream_marker(\n    stream_marker_id: str,\n) -> None:\n    \"\"\"\n    Deletes a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to delete.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-12",
    "snippet": "def get_current_subscribers() -> List[str]:\n    \"\"\"\n    Retrieves a list of current subscribers.\n\n    Returns:\n        List[str]: A list of current subscribers.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def get_current_subscribers() -> List[str]:\\n    \\\"\\\"\\\"\\n    Retrieves a list of current subscribers.\\n\\n    Returns:\\n        List[str]: A list of current subscribers.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"get_current_subscribers\",\n        \"description\": \"Retrieves a list of current subscribers.\",\n        \"parameters\": {},\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"current_subscribers\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"A list of current subscribers.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def get_current_subscribers() -> List[str]:\n    \"\"\"\n    Retrieves a list of current subscribers.\n\n    Returns:\n        List[str]: A list of current subscribers.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "get_current_subscribers",
            "description": "Retrieves a list of current subscribers.",
            "parameters": {},
            "returns": {
                "type": "object",
                "properties": {
                    "current_subscribers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of current subscribers."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_current_subscribers() -> List[str]:\n    \"\"\"\n    Retrieves a list of current subscribers.\n\n    Returns:\n        List[str]: A list of current subscribers.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-13",
    "snippet": "def ban_or_timeout_users(\n    chat_logs: List[str],\n    ban_keywords: List[str],\n    timeout_keywords: List[str],\n) -> None:\n    \"\"\"\n    Automatically bans or times out users based on their chat behavior.\n\n    Parameters:\n        chat_logs (List[str]): A list of chat logs.\n        ban_keywords (List[str]): A list of keywords indicating ban-worthy behavior.\n        timeout_keywords (List[str]): A list of keywords indicating timeout-worthy behavior.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def ban_or_timeout_users(\\nchat_logs: List[str],\\nban_keywords: List[str],\\ntimeout_keywords: List[str],\\n) -> None:\\n    \\\"\\\"\\\"\\n    Automatically bans or times out users based on their chat behavior.\\n\\n    Parameters:\\n        chat_logs (List[str]): A list of chat logs.\\n        ban_keywords (List[str]): A list of keywords indicating ban-worthy behavior.\\n        timeout_keywords (List[str]): A list of keywords indicating timeout-worthy behavior.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"ban_or_timeout_users\",\n        \"description\": \"Automatically bans or times out users based on their chat behavior.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"chat_logs\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of chat logs.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"ban_keywords\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of keywords indicating ban-worthy behavior.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"timeout_keywords\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of keywords indicating timeout-worthy behavior.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"chat_logs\", \"ban_keywords\", \"timeout_keywords\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def ban_or_timeout_users(\nchat_logs: List[str],\nban_keywords: List[str],\ntimeout_keywords: List[str],\n) -> None:\n    \"\"\"\n    Automatically bans or times out users based on their chat behavior.\n\n    Parameters:\n        chat_logs (List[str]): A list of chat logs.\n        ban_keywords (List[str]): A list of keywords indicating ban-worthy behavior.\n        timeout_keywords (List[str]): A list of keywords indicating timeout-worthy behavior.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "ban_or_timeout_users",
            "description": "Automatically bans or times out users based on their chat behavior.",
            "parameters": {
                "type": "object",
                "properties": {
                    "chat_logs": {
                        "type": "array",
                        "description": "A list of chat logs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ban_keywords": {
                        "type": "array",
                        "description": "A list of keywords indicating ban-worthy behavior.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeout_keywords": {
                        "type": "array",
                        "description": "A list of keywords indicating timeout-worthy behavior.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "chat_logs",
                    "ban_keywords",
                    "timeout_keywords"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def ban_or_timeout_users(\n    chat_logs: List[str],\n    ban_keywords: List[str],\n    timeout_keywords: List[str],\n) -> None:\n    \"\"\"\n    Automatically bans or times out users based on their chat behavior.\n\n    Parameters:\n        chat_logs (List[str]): A list of chat logs.\n        ban_keywords (List[str]): A list of keywords indicating ban-worthy behavior.\n        timeout_keywords (List[str]): A list of keywords indicating timeout-worthy behavior.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-14",
    "snippet": "def create_poll(\n    question: str,\n    options: List[str],\n    allow_multiple: bool = False,\n    allow_anonymous: bool = False,\n    allow_comments: bool = False,\n) -> int:\n    \"\"\"\n    Creates a poll with the given question and options.\n\n    Parameters:\n        question (str): The question for the poll.\n        options (List[str]): A list of options for the poll.\n        allow_multiple (bool): Whether to allow multiple options to be selected. Default is False.\n        allow_anonymous (bool): Whether to allow anonymous voting. Default is False.\n        allow_comments (bool): Whether to allow comments on the poll. Default is False.\n\n    Returns:\n        int: The ID of the created poll.\n    \"\"\"\n    pass\n\ndef vote_poll(\n    poll_id: int,\n    user_id: int,\n    selected_options: List[int],\n    comment: str = None,\n) -> None:\n    \"\"\"\n    Votes on a poll with the given ID.\n\n    Parameters:\n        poll_id (int): The ID of the poll to vote on.\n        user_id (int): The ID of the user voting.\n        selected_options (List[int]): A list of selected option indices.\n        comment (str): An optional comment to leave on the poll. Default is None.\n\n    Returns:\n        None\n    \"\"\"\n    pass\n\ndef get_poll_results(\n    poll_id: int,\n) -> Dict[int, int]:\n    \"\"\"\n    Retrieves the results of a poll.\n\n    Parameters:\n        poll_id (int): The ID of the poll to retrieve results for.\n\n    Returns:\n        Dict[int, int]: A dictionary mapping option indices to vote counts.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def example_function(\\n    num_tickets: int,\\n    ticket_type: Dict[str, str],\\n    event_details: str,\\n    attendees: List[Dict[str, str]],\\n) -> Dict[str, float]:\\n    \\\"\\\"\\\"\\n    Orders event tickets and returns the total price.\\n\\n    Parameters:\\n        num_tickets (int): The number of tickets to buy.\\n        ticket_type (str): The type of ticket.\\n        event_details (Dict[str, str]): Details about the event, should contain a date in YYYY-MM-DD format.\\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\\n                                          Each dictionary should have 'name' and 'age' keys.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"example_function\",\n        \"description\": \"Orders event tickets and returns the total price.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"num_tickets\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The number of tickets to buy.\"\n                },\n                \"ticket_type\": {\n                    \"type\": \"object\",\n                    \"description\": \"The type of ticket.\",\n                    \"properties\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"event_details\": {\n                    \"type\": \"object\",\n                    \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                    \"properties\": {\n                        \"date\": {\n                            \"type\": \"string\",\n                            \"description\": \"Event data in YYYY-MM-DD format.\"\n                        }\n                    },\n                    \"required\": [\"date\"]\n                },\n                \"attendees\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"age\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\"name\", \"age\"]\n                    }\n                }\n            },\n            \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"total_price\": {\n                    \"type\": \"float\",\n                    \"description\": \"The total price for the tickets ordered.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str],\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details about the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "function_description": {
            "name": "example_function",
            "description": "Orders event tickets and returns the total price.",
            "parameters": {
                "type": "object",
                "properties": {
                    "num_tickets": {
                        "type": "integer",
                        "description": "The number of tickets to buy."
                    },
                    "ticket_type": {
                        "type": "object",
                        "description": "The type of ticket.",
                        "properties": {
                            "type": "string"
                        }
                    },
                    "event_details": {
                        "type": "object",
                        "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                        "properties": {
                            "date": {
                                "type": "string",
                                "description": "Event data in YYYY-MM-DD format."
                            }
                        },
                        "required": [
                            "date"
                        ]
                    },
                    "attendees": {
                        "type": "array",
                        "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "age": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "age"
                            ]
                        }
                    }
                },
                "required": [
                    "num_tickets",
                    "ticket_type",
                    "event_details",
                    "attendees"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "total_price": {
                        "type": "float",
                        "description": "The total price for the tickets ordered."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_poll(\n    question: str,\n    options: List[str],\n    allow_multiple: bool = False,\n    allow_anonymous: bool = False,\n    allow_comments: bool = False,\n) -> int:\n    \"\"\"\n    Creates a poll with the given question and options.\n\n    Parameters:\n        question (str): The question for the poll.\n        options (List[str]): A list of options for the poll.\n        allow_multiple (bool): Whether to allow multiple options to be selected. Default is False.\n        allow_anonymous (bool): Whether to allow anonymous voting. Default is False.\n        allow_comments (bool): Whether to allow comments on the poll. Default is False.\n\n    Returns:\n        int: The ID of the created poll.\n    \"\"\"\n    pass\n\ndef vote_poll(\n    poll_id: int,\n    user_id: int,\n    selected_options: List[int],\n    comment: str = None,\n) -> None:\n    \"\"\"\n    Votes on a poll with the given ID.\n\n    Parameters:\n        poll_id (int): The ID of the poll to vote on.\n        user_id (int): The ID of the user voting.\n        selected_options (List[int]): A list of selected option indices.\n        comment (str): An optional comment to leave on the poll. Default is None.\n\n    Returns:\n        None\n    \"\"\"\n    pass\n\ndef get_poll_results(\n    poll_id: int,\n) -> Dict[int, int]:\n    \"\"\"\n    Retrieves the results of a poll.\n\n    Parameters:\n        poll_id (int): The ID of the poll to retrieve results for.\n\n    Returns:\n        Dict[int, int]: A dictionary mapping option indices to vote counts.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-15",
    "snippet": "def display_notifications(event: str) -> None:\n    \"\"\"\n    Display alerts or notifications for in-stream events.\n\n    Parameters:\n        event (str): The event that occurred.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def display_notifications(event: str) -> None:\\n    \\\"\\\"\\\"\\n    Display alerts or notifications for in-stream events.\\n\\n    Parameters:\\n        event (str): The event that occurred.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"display_notifications\",\n        \"description\": \"Display alerts or notifications for in-stream events.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"event\": {\n                    \"type\": \"string\",\n                    \"description\": \"The event that occurred.\"\n                }\n            },\n            \"required\": [\"event\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def display_notifications(event: str) -> None:\n    \"\"\"\n    Display alerts or notifications for in-stream events.\n\n    Parameters:\n        event (str): The event that occurred.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "display_notifications",
            "description": "Display alerts or notifications for in-stream events.",
            "parameters": {
                "type": "object",
                "properties": {
                    "event": {
                        "type": "string",
                        "description": "The event that occurred."
                    }
                },
                "required": [
                    "event"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def display_notifications(event: str) -> None:\n    \"\"\"\n    Display alerts or notifications for in-stream events.\n\n    Parameters:\n        event (str): The event that occurred.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-16",
    "snippet": "def retrieve_historical_data() -> Tuple[List[str], List[Dict[str, str]], List[str]]:\n    \"\"\"\n    Retrieves historical data such as past streams, viewer metrics, and chat logs.\n\n    Returns:\n        Tuple[List[str], List[Dict[str, str]], List[str]]: A tuple containing the following lists:\n                                                           - A list of past streams.\n                                                           - A list of viewer metrics.\n                                                           - A list of chat logs.\n    \"\"\"\n    streams = []\n    viewer_metrics = []\n    chat_logs = []\n\n    # Code to retrieve past streams, viewer metrics, and chat logs\n\n    return streams, viewer_metrics, chat_logs",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_historical_data() -> Tuple[List[str], List[Dict[str, str]], List[str]]:\\n    \\\"\\\"\\\"\\n    Retrieves historical data such as past streams, viewer metrics, and chat logs.\\n\\n    Returns:\\n        Tuple[List[str], List[Dict[str, str]], List[str]]: A tuple containing the following lists:\\n                                                           - A list of past streams.\\n                                                           - A list of viewer metrics.\\n                                                           - A list of chat logs.\\n    \\\"\\\"\\\"\\n    streams = []\\n    viewer_metrics = []\\n    chat_logs = []\\n\\n    # Code to retrieve past streams, viewer metrics, and chat logs\\n\\n    return streams, viewer_metrics, chat_logs\",\n    \"function_description\": {\n        \"name\": \"retrieve_historical_data\",\n        \"description\": \"Retrieves historical data such as past streams, viewer metrics, and chat logs.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": []\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"streams\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of past streams.\"\n                },\n                \"viewer_metrics\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of viewer metrics.\"\n                },\n                \"chat_logs\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of chat logs.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_historical_data() -> Tuple[List[str], List[Dict[str, str]], List[str]]:\n    \"\"\"\n    Retrieves historical data such as past streams, viewer metrics, and chat logs.\n\n    Returns:\n        Tuple[List[str], List[Dict[str, str]], List[str]]: A tuple containing the following lists:\n                                                           - A list of past streams.\n                                                           - A list of viewer metrics.\n                                                           - A list of chat logs.\n    \"\"\"\n    streams = []\n    viewer_metrics = []\n    chat_logs = []\n\n    # Code to retrieve past streams, viewer metrics, and chat logs\n\n    return streams, viewer_metrics, chat_logs",
        "function_description": {
            "name": "retrieve_historical_data",
            "description": "Retrieves historical data such as past streams, viewer metrics, and chat logs.",
            "parameters": {
                "type": "object",
                "properties": {},
                "required": []
            },
            "returns": {
                "type": "object",
                "properties": {
                    "streams": {
                        "type": "array",
                        "description": "A list of past streams."
                    },
                    "viewer_metrics": {
                        "type": "array",
                        "description": "A list of viewer metrics."
                    },
                    "chat_logs": {
                        "type": "array",
                        "description": "A list of chat logs."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_historical_data() -> Tuple[List[str], List[Dict[str, str]], List[str]]:\n    \"\"\"\n    Retrieves historical data such as past streams, viewer metrics, and chat logs.\n\n    Returns:\n        Tuple[List[str], List[Dict[str, str]], List[str]]: A tuple containing the following lists:\n                                                           - A list of past streams.\n                                                           - A list of viewer metrics.\n                                                           - A list of chat logs.\n    \"\"\"\n    streams = []\n    viewer_metrics = []\n    chat_logs = []\n\n    # Code to retrieve past streams, viewer metrics, and chat logs\n\n    return streams, viewer_metrics, chat_logs",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-17",
    "snippet": "def manage_and_redeem_channel_points_or_rewards(\n    user_id: str,\n    action: str,\n    points: int = None,\n    rewards: List[str] = None,\n) -> Union[str, List[str]]:\n    \"\"\"\n    Manages and redeems channel points or rewards for a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        action (str): The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'.\n        points (int): The number of points to redeem. Optional, only required for 'redeem_points' action.\n        rewards (List[str]): The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.\n\n    Returns:\n        Union[str, List[str]]: The result of the action performed. Can be a string message or a list of redeemed rewards.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_and_redeem_channel_points_or_rewards(user_id: str, action: str, points: int = None, rewards: List[str] = None) -> Union[str, List[str]]:\\n    \\\"\\\"\\\"\\n    Manages and redeems channel points or rewards for a specific user.\\n\\n    Parameters:\\n        user_id (str): The ID of the user.\\n        action (str): The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'.\\n        points (int): The number of points to redeem. Optional, only required for 'redeem_points' action.\\n        rewards (List[str]): The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.\\n\\n    Returns:\\n        Union[str, List[str]]: The result of the action performed. Can be a string message or a list of redeemed rewards.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"manage_and_redeem_channel_points_or_rewards\",\n        \"description\": \"Manages and redeems channel points or rewards for a specific user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the user.\"\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'.\"\n                },\n                \"points\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The number of points to redeem. Optional, only required for 'redeem_points' action.\"\n                },\n                \"rewards\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"user_id\",\n                \"action\"\n            ]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"string\",\n                \"description\": \"The result of the action performed. Can be a string message or a list of redeemed rewards.\"\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_and_redeem_channel_points_or_rewards(user_id: str, action: str, points: int = None, rewards: List[str] = None) -> Union[str, List[str]]:\n    \"\"\"\n    Manages and redeems channel points or rewards for a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        action (str): The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'.\n        points (int): The number of points to redeem. Optional, only required for 'redeem_points' action.\n        rewards (List[str]): The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.\n\n    Returns:\n        Union[str, List[str]]: The result of the action performed. Can be a string message or a list of redeemed rewards.\n    \"\"\"\n",
        "function_description": {
            "name": "manage_and_redeem_channel_points_or_rewards",
            "description": "Manages and redeems channel points or rewards for a specific user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'."
                    },
                    "points": {
                        "type": "integer",
                        "description": "The number of points to redeem. Optional, only required for 'redeem_points' action."
                    },
                    "rewards": {
                        "type": "array",
                        "description": "The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "user_id",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "string",
                    "description": "The result of the action performed. Can be a string message or a list of redeemed rewards."
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_and_redeem_channel_points_or_rewards(\n    user_id: str,\n    action: str,\n    points: int = None,\n    rewards: List[str] = None,\n) -> Union[str, List[str]]:\n    \"\"\"\n    Manages and redeems channel points or rewards for a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        action (str): The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'.\n        points (int): The number of points to redeem. Optional, only required for 'redeem_points' action.\n        rewards (List[str]): The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.\n\n    Returns:\n        Union[str, List[str]]: The result of the action performed. Can be a string message or a list of redeemed rewards.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-18",
    "snippet": "def clip_segments(current_stream: str) -> str:\n    \"\"\"\n    Clip segments of the current stream.\n\n    Parameters:\n        current_stream (str): The current stream to clip segments from.\n\n    Returns:\n        str: The clipped segments of the current stream.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def clip_segments(current_stream: str) -> str:\\n    \\\"\\\"\\\"\\n    Clip segments of the current stream.\\n\\n    Parameters:\\n        current_stream (str): The current stream to clip segments from.\\n\\n    Returns:\\n        str: The clipped segments of the current stream.\\n    \\\"\\\"\\\"    \",\n    \"function_description\": {\n        \"name\": \"clip_segments\",\n        \"description\": \"Clip segments of the current stream.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"current_stream\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current stream to clip segments from.\"\n                }\n            },\n            \"required\": [\"current_stream\"]\n        },\n        \"returns\": {\n            \"type\": \"string\",\n            \"description\": \"The clipped segments of the current stream.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def clip_segments(current_stream: str) -> str:\n    \"\"\"\n    Clip segments of the current stream.\n\n    Parameters:\n        current_stream (str): The current stream to clip segments from.\n\n    Returns:\n        str: The clipped segments of the current stream.\n    \"\"\"    ",
        "function_description": {
            "name": "clip_segments",
            "description": "Clip segments of the current stream.",
            "parameters": {
                "type": "object",
                "properties": {
                    "current_stream": {
                        "type": "string",
                        "description": "The current stream to clip segments from."
                    }
                },
                "required": [
                    "current_stream"
                ]
            },
            "returns": {
                "type": "string",
                "description": "The clipped segments of the current stream."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def clip_segments(current_stream: str) -> str:\n    \"\"\"\n    Clip segments of the current stream.\n\n    Parameters:\n        current_stream (str): The current stream to clip segments from.\n\n    Returns:\n        str: The clipped segments of the current stream.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-19",
    "snippet": "def configure_audio_video_settings(\n    audio_bitrate: int,\n    video_bitrate: int,\n    resolution: str,\n) -> None:\n    \"\"\"\n    Configure audio and video settings, including bitrate and resolution.\n\n    Parameters:\n        audio_bitrate (int): The audio bitrate in kilobits per second.\n        video_bitrate (int): The video bitrate in kilobits per second.\n        resolution (str): The resolution of the video.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def configure_audio_video_settings(\\n    audio_bitrate: int,\\n    video_bitrate: int,\\n    resolution: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Configure audio and video settings, including bitrate and resolution.\\n\\n    Parameters:\\n        audio_bitrate (int): The audio bitrate in kilobits per second.\\n        video_bitrate (int): The video bitrate in kilobits per second.\\n        resolution (str): The resolution of the video.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"configure_audio_video_settings\",\n        \"description\": \"Configure audio and video settings, including bitrate and resolution.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"audio_bitrate\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The audio bitrate in kilobits per second.\"\n                },\n                \"video_bitrate\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The video bitrate in kilobits per second.\"\n                },\n                \"resolution\": {\n                    \"type\": \"string\",\n                    \"description\": \"The resolution of the video.\"\n                }\n            },\n            \"required\": [\"audio_bitrate\", \"video_bitrate\", \"resolution\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def configure_audio_video_settings(\n    audio_bitrate: int,\n    video_bitrate: int,\n    resolution: str,\n) -> None:\n    \"\"\"\n    Configure audio and video settings, including bitrate and resolution.\n\n    Parameters:\n        audio_bitrate (int): The audio bitrate in kilobits per second.\n        video_bitrate (int): The video bitrate in kilobits per second.\n        resolution (str): The resolution of the video.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "configure_audio_video_settings",
            "description": "Configure audio and video settings, including bitrate and resolution.",
            "parameters": {
                "type": "object",
                "properties": {
                    "audio_bitrate": {
                        "type": "integer",
                        "description": "The audio bitrate in kilobits per second."
                    },
                    "video_bitrate": {
                        "type": "integer",
                        "description": "The video bitrate in kilobits per second."
                    },
                    "resolution": {
                        "type": "string",
                        "description": "The resolution of the video."
                    }
                },
                "required": [
                    "audio_bitrate",
                    "video_bitrate",
                    "resolution"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def configure_audio_video_settings(\n    audio_bitrate: int,\n    video_bitrate: int,\n    resolution: str,\n) -> None:\n    \"\"\"\n    Configure audio and video settings, including bitrate and resolution.\n\n    Parameters:\n        audio_bitrate (int): The audio bitrate in kilobits per second.\n        video_bitrate (int): The video bitrate in kilobits per second.\n        resolution (str): The resolution of the video.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-20",
    "snippet": "def host_or_raid_channel(\n    channel_name: str,\n    action: str,\n) -> str:\n    \"\"\"\n    Hosts or raids another Twitch channel.\n\n    Parameters:\n        channel_name (str): The name of the channel to host or raid.\n        action (str): The action to perform, either 'host' or 'raid'.\n\n    Returns:\n        str: A message confirming the action performed.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def host_or_raid_channel(\\n    channel_name: str,\\n    action: str,\\n) -> str:\\n    \\\"\\\"\\\"\\n    Hosts or raids another Twitch channel.\\n\\n    Parameters:\\n        channel_name (str): The name of the channel to host or raid.\\n        action (str): The action to perform, either 'host' or 'raid'.\\n\\n    Returns:\\n        str: A message confirming the action performed.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"host_or_raid_channel\",\n        \"description\": \"Hosts or raids another Twitch channel.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"channel_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the channel to host or raid.\"\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to perform, either 'host' or 'raid'.\"\n                }\n            },\n            \"required\": [\"channel_name\", \"action\"]\n        },\n        \"returns\": {\n            \"type\": \"string\",\n            \"description\": \"A message confirming the action performed.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def host_or_raid_channel(\n    channel_name: str,\n    action: str,\n) -> str:\n    \"\"\"\n    Hosts or raids another Twitch channel.\n\n    Parameters:\n        channel_name (str): The name of the channel to host or raid.\n        action (str): The action to perform, either 'host' or 'raid'.\n\n    Returns:\n        str: A message confirming the action performed.\n    \"\"\"\n",
        "function_description": {
            "name": "host_or_raid_channel",
            "description": "Hosts or raids another Twitch channel.",
            "parameters": {
                "type": "object",
                "properties": {
                    "channel_name": {
                        "type": "string",
                        "description": "The name of the channel to host or raid."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to perform, either 'host' or 'raid'."
                    }
                },
                "required": [
                    "channel_name",
                    "action"
                ]
            },
            "returns": {
                "type": "string",
                "description": "A message confirming the action performed."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def host_or_raid_channel(\n    channel_name: str,\n    action: str,\n) -> str:\n    \"\"\"\n    Hosts or raids another Twitch channel.\n\n    Parameters:\n        channel_name (str): The name of the channel to host or raid.\n        action (str): The action to perform, either 'host' or 'raid'.\n\n    Returns:\n        str: A message confirming the action performed.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-21",
    "snippet": "def initiate_costream(streamer_id: str) -> str:\n    \"\"\"\n    Initiates a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the co-stream initiation.\n    \"\"\"\n    pass\n\ndef manage_costream(streamer_id: str) -> str:\n    \"\"\"\n    Manages a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the successful management of the co-stream.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def initiate_costream(streamer_id: str) -> str:\\n    \\\"\\\"\\\"\\n    Initiates a co-stream with another streamer.\\n\\n    Parameters:\\n        streamer_id (str): The ID of the streamer to co-stream with.\\n\\n    Returns:\\n        str: A message confirming the co-stream initiation.\\n    \\\"\\\"\\\"\\n    pass\\n\\n\\ndef manage_costream(streamer_id: str) -> str:\\n    \\\"\\\"\\\"\\n    Manages a co-stream with another streamer.\\n\\n    Parameters:\\n        streamer_id (str): The ID of the streamer to co-stream with.\\n\\n    Returns:\\n        str: A message confirming the successful management of the co-stream.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"initiate_costream\",\n        \"description\": \"Initiates a co-stream with another streamer.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"streamer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the streamer to co-stream with.\"\n                }\n            },\n            \"required\": [\"streamer_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"A message confirming the co-stream initiation.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def initiate_costream(streamer_id: str) -> str:\n    \"\"\"\n    Initiates a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the co-stream initiation.\n    \"\"\"\n    pass\n\n\ndef manage_costream(streamer_id: str) -> str:\n    \"\"\"\n    Manages a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the successful management of the co-stream.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "initiate_costream",
            "description": "Initiates a co-stream with another streamer.",
            "parameters": {
                "type": "object",
                "properties": {
                    "streamer_id": {
                        "type": "string",
                        "description": "The ID of the streamer to co-stream with."
                    }
                },
                "required": [
                    "streamer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A message confirming the co-stream initiation."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def initiate_costream(streamer_id: str) -> str:\n    \"\"\"\n    Initiates a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the co-stream initiation.\n    \"\"\"\n    pass\n\ndef manage_costream(streamer_id: str) -> str:\n    \"\"\"\n    Manages a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the successful management of the co-stream.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-22",
    "snippet": "def manage_and_update_panels() -> None:\n    \"\"\"\n    Manages and updates panels and other customizable areas below the video player.\n    \"\"\"\n    # Code implementation to manage and update panels and other customizable areas below the video player",
    "completion-content": "{\n    \"function_snippet\": \"def manage_and_update_panels() -> None:\\n    \\\"\\\"\\\"\\n    Manages and updates panels and other customizable areas below the video player.\\n    \\\"\\\"\\\"\\n    # Code implementation to manage and update panels and other customizable areas below the video player\",\n    \"function_description\": {\n        \"name\": \"manage_and_update_panels\",\n        \"description\": \"Manages and updates panels and other customizable areas below the video player.\",\n        \"parameters\": {\n            \"type\": \"None\"\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_and_update_panels() -> None:\n    \"\"\"\n    Manages and updates panels and other customizable areas below the video player.\n    \"\"\"\n    # Code implementation to manage and update panels and other customizable areas below the video player",
        "function_description": {
            "name": "manage_and_update_panels",
            "description": "Manages and updates panels and other customizable areas below the video player.",
            "parameters": {
                "type": "None"
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_and_update_panels() -> None:\n    \"\"\"\n    Manages and updates panels and other customizable areas below the video player.\n    \"\"\"\n    # Code implementation to manage and update panels and other customizable areas below the video player",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-23",
    "snippet": "def activate_scenes_or_overlays(\n    scenes: List[str],\n    overlays: List[str],\n) -> None:\n    \"\"\"\n    Activates specific scenes or overlays.\n\n    Parameters:\n        scenes (List[str]): A list of scene names to activate.\n        overlays (List[str]): A list of overlay names to activate.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def activate_scenes_or_overlays(scenes: List[str], overlays: List[str]) -> None:\",\n    \"function_description\": {\n        \"name\": \"activate_scenes_or_overlays\",\n        \"description\": \"Activates specific scenes or overlays.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"scenes\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of scene names to activate.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"overlays\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of overlay names to activate.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"scenes\", \"overlays\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def activate_scenes_or_overlays(scenes: List[str], overlays: List[str]) -> None:",
        "function_description": {
            "name": "activate_scenes_or_overlays",
            "description": "Activates specific scenes or overlays.",
            "parameters": {
                "type": "object",
                "properties": {
                    "scenes": {
                        "type": "array",
                        "description": "A list of scene names to activate.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "overlays": {
                        "type": "array",
                        "description": "A list of overlay names to activate.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "scenes",
                    "overlays"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def activate_scenes_or_overlays(\n    scenes: List[str],\n    overlays: List[str],\n) -> None:\n    \"\"\"\n    Activates specific scenes or overlays.\n\n    Parameters:\n        scenes (List[str]): A list of scene names to activate.\n        overlays (List[str]): A list of overlay names to activate.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-24",
    "snippet": "def automatically_archive_past_broadcasts(\n    channel_id: str,\n    archive_duration: int,\n    api_key: str,\n) -> None:\n    \"\"\"\n    Automatically archives past broadcasts of a given channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel to archive broadcasts for.\n        archive_duration (int): The duration (in days) for which to archive the broadcasts.\n        api_key (str): The API key for accessing the Twitch API.\n\n    Returns:\n        None\n    \"\"\"\n    # Implementation goes here",
    "completion-content": "{\n    \"function_snippet\": \"def automatically_archive_past_broadcasts(\\n    channel_id: str,\\n    archive_duration: int,\\n    api_key: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Automatically archives past broadcasts of a given channel.\\n\\n    Parameters:\\n        channel_id (str): The ID of the channel to archive broadcasts for.\\n        archive_duration (int): The duration (in days) for which to archive the broadcasts.\\n        api_key (str): The API key for accessing the Twitch API.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n    # Implementation goes here\",\n    \"function_description\": {\n        \"name\": \"automatically_archive_past_broadcasts\",\n        \"description\": \"Automatically archives past broadcasts of a given channel.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"channel_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the channel to archive broadcasts for.\"\n                },\n                \"archive_duration\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The duration (in days) for which to archive the broadcasts.\"\n                },\n                \"api_key\": {\n                    \"type\": \"string\",\n                    \"description\": \"The API key for accessing the Twitch API.\"\n                }\n            },\n            \"required\": [\"channel_id\", \"archive_duration\", \"api_key\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {},\n            \"description\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def automatically_archive_past_broadcasts(\n    channel_id: str,\n    archive_duration: int,\n    api_key: str,\n) -> None:\n    \"\"\"\n    Automatically archives past broadcasts of a given channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel to archive broadcasts for.\n        archive_duration (int): The duration (in days) for which to archive the broadcasts.\n        api_key (str): The API key for accessing the Twitch API.\n\n    Returns:\n        None\n    \"\"\"\n    # Implementation goes here",
        "function_description": {
            "name": "automatically_archive_past_broadcasts",
            "description": "Automatically archives past broadcasts of a given channel.",
            "parameters": {
                "type": "object",
                "properties": {
                    "channel_id": {
                        "type": "string",
                        "description": "The ID of the channel to archive broadcasts for."
                    },
                    "archive_duration": {
                        "type": "integer",
                        "description": "The duration (in days) for which to archive the broadcasts."
                    },
                    "api_key": {
                        "type": "string",
                        "description": "The API key for accessing the Twitch API."
                    }
                },
                "required": [
                    "channel_id",
                    "archive_duration",
                    "api_key"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {},
                "description": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def automatically_archive_past_broadcasts(\n    channel_id: str,\n    archive_duration: int,\n    api_key: str,\n) -> None:\n    \"\"\"\n    Automatically archives past broadcasts of a given channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel to archive broadcasts for.\n        archive_duration (int): The duration (in days) for which to archive the broadcasts.\n        api_key (str): The API key for accessing the Twitch API.\n\n    Returns:\n        None\n    \"\"\"\n    # Implementation goes here",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-25",
    "snippet": "def enable_disable_slow_mode(chat_id: int, enable: bool) -> bool:\n    \"\"\"\n    Enable or disable slow mode in the chat.\n\n    Parameters:\n        chat_id (int): The unique identifier of the chat.\n        enable (bool): Whether to enable or disable slow mode.\n\n    Returns:\n        bool: True if slow mode is successfully enabled or disabled, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def enable_disable_slow_mode(chat_id: int, enable: bool) -> bool:\\n    \\\"\\\"\\\"\\n    Enable or disable slow mode in the chat.\\n\\n    Parameters:\\n        chat_id (int): The unique identifier of the chat.\\n        enable (bool): Whether to enable or disable slow mode.\\n\\n    Returns:\\n        bool: True if slow mode is successfully enabled or disabled, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"enable_disable_slow_mode\",\n        \"description\": \"Enable or disable slow mode in the chat.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"chat_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The unique identifier of the chat.\"\n                },\n                \"enable\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether to enable or disable slow mode.\"\n                }\n            },\n            \"required\": [\"chat_id\", \"enable\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if slow mode is successfully enabled or disabled, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def enable_disable_slow_mode(chat_id: int, enable: bool) -> bool:\n    \"\"\"\n    Enable or disable slow mode in the chat.\n\n    Parameters:\n        chat_id (int): The unique identifier of the chat.\n        enable (bool): Whether to enable or disable slow mode.\n\n    Returns:\n        bool: True if slow mode is successfully enabled or disabled, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "enable_disable_slow_mode",
            "description": "Enable or disable slow mode in the chat.",
            "parameters": {
                "type": "object",
                "properties": {
                    "chat_id": {
                        "type": "integer",
                        "description": "The unique identifier of the chat."
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Whether to enable or disable slow mode."
                    }
                },
                "required": [
                    "chat_id",
                    "enable"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if slow mode is successfully enabled or disabled, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def enable_disable_slow_mode(chat_id: int, enable: bool) -> bool:\n    \"\"\"\n    Enable or disable slow mode in the chat.\n\n    Parameters:\n        chat_id (int): The unique identifier of the chat.\n        enable (bool): Whether to enable or disable slow mode.\n\n    Returns:\n        bool: True if slow mode is successfully enabled or disabled, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-26",
    "snippet": "def manage_subscriptions(channel_id: str, action: str, user_id: str) -> bool:\n    \"\"\"\n    Monitor and manage subscriptions to other channels.\n\n    Parameters:\n        channel_id (str): The ID of the channel to manage subscriptions for.\n        action (str): The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe').\n        user_id (str): The ID of the user performing the action.\n\n    Returns:\n        bool: True if the subscription was successfully managed, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_subscriptions(channel_id: str, action: str, user_id: str) -> bool:\\n    \\\"\\\"\\\"\\n    Monitor and manage subscriptions to other channels.\\n\\n    Parameters:\\n        channel_id (str): The ID of the channel to manage subscriptions for.\\n        action (str): The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe').\\n        user_id (str): The ID of the user performing the action.\\n\\n    Returns:\\n        bool: True if the subscription was successfully managed, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"manage_subscriptions\",\n        \"description\": \"Monitor and manage subscriptions to other channels.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"channel_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the channel to manage subscriptions for.\"\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe').\"\n                },\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the user performing the action.\"\n                }\n            },\n            \"required\": [\"channel_id\", \"action\", \"user_id\"]\n        },\n        \"returns\": {\n            \"type\": \"bool\",\n            \"description\": \"True if the subscription was successfully managed, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_subscriptions(channel_id: str, action: str, user_id: str) -> bool:\n    \"\"\"\n    Monitor and manage subscriptions to other channels.\n\n    Parameters:\n        channel_id (str): The ID of the channel to manage subscriptions for.\n        action (str): The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe').\n        user_id (str): The ID of the user performing the action.\n\n    Returns:\n        bool: True if the subscription was successfully managed, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "manage_subscriptions",
            "description": "Monitor and manage subscriptions to other channels.",
            "parameters": {
                "type": "object",
                "properties": {
                    "channel_id": {
                        "type": "string",
                        "description": "The ID of the channel to manage subscriptions for."
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe')."
                    },
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user performing the action."
                    }
                },
                "required": [
                    "channel_id",
                    "action",
                    "user_id"
                ]
            },
            "returns": {
                "type": "bool",
                "description": "True if the subscription was successfully managed, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_subscriptions(channel_id: str, action: str, user_id: str) -> bool:\n    \"\"\"\n    Monitor and manage subscriptions to other channels.\n\n    Parameters:\n        channel_id (str): The ID of the channel to manage subscriptions for.\n        action (str): The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe').\n        user_id (str): The ID of the user performing the action.\n\n    Returns:\n        bool: True if the subscription was successfully managed, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-27",
    "snippet": "def set_donation_goals(\n    goals: Dict[str, float],\n    donations: Dict[str, float],\n) -> Dict[str, Tuple[float, float]]:\n    \"\"\"\n    Set up donation goals and progress bars.\n\n    Parameters:\n        goals (Dict[str, float]): A dictionary with donation goals as keys and the target amounts as values.\n        donations (Dict[str, float]): A dictionary with donation amounts as keys and the current amounts as values.\n\n    Returns:\n        Dict[str, Tuple[float, float]]: A dictionary with donation goals as keys and a tuple of current amount and target amount as values.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def set_donation_goals(goals: Dict[str, float], donations: Dict[str, float]) -> Dict[str, Tuple[float, float]]:\\n    \\n    Parameters:\\n        goals (Dict[str, float]): A dictionary with donation goals as keys and the target amounts as values.\\n        donations (Dict[str, float]): A dictionary with donation amounts as keys and the current amounts as values.\\n\\n    Returns:\\n        Dict[str, Tuple[float, float]]: A dictionary with donation goals as keys and a tuple of current amount and target amount as values.\\n\",\n    \"function_description\": {\n        \"name\": \"set_donation_goals\",\n        \"description\": \"Set up donation goals and progress bars.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"goals\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary with donation goals as keys and the target amounts as values.\"\n                },\n                \"donations\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary with donation amounts as keys and the current amounts as values.\"\n                }\n            },\n            \"required\": [\"goals\", \"donations\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"donation_goals\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary with donation goals as keys and a tuple of current amount and target amount as values.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def set_donation_goals(goals: Dict[str, float], donations: Dict[str, float]) -> Dict[str, Tuple[float, float]]:\n    \n    Parameters:\n        goals (Dict[str, float]): A dictionary with donation goals as keys and the target amounts as values.\n        donations (Dict[str, float]): A dictionary with donation amounts as keys and the current amounts as values.\n\n    Returns:\n        Dict[str, Tuple[float, float]]: A dictionary with donation goals as keys and a tuple of current amount and target amount as values.\n",
        "function_description": {
            "name": "set_donation_goals",
            "description": "Set up donation goals and progress bars.",
            "parameters": {
                "type": "object",
                "properties": {
                    "goals": {
                        "type": "object",
                        "description": "A dictionary with donation goals as keys and the target amounts as values."
                    },
                    "donations": {
                        "type": "object",
                        "description": "A dictionary with donation amounts as keys and the current amounts as values."
                    }
                },
                "required": [
                    "goals",
                    "donations"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "donation_goals": {
                        "type": "object",
                        "description": "A dictionary with donation goals as keys and a tuple of current amount and target amount as values."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def set_donation_goals(\n    goals: Dict[str, float],\n    donations: Dict[str, float],\n) -> Dict[str, Tuple[float, float]]:\n    \"\"\"\n    Set up donation goals and progress bars.\n\n    Parameters:\n        goals (Dict[str, float]): A dictionary with donation goals as keys and the target amounts as values.\n        donations (Dict[str, float]): A dictionary with donation amounts as keys and the current amounts as values.\n\n    Returns:\n        Dict[str, Tuple[float, float]]: A dictionary with donation goals as keys and a tuple of current amount and target amount as values.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-28",
    "snippet": "def manage_and_send_direct_messages(\n    recipients: List[str],\n    message: str,\n    subject: str,\n    attachments: List[str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and sends direct messages.\n\n    Parameters:\n        recipients (List[str]): A list of usernames or email addresses of the recipients.\n        message (str): The content of the direct message.\n        subject (str): The subject of the direct message.\n        attachments (List[str]): A list of file paths to be attached to the direct message.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def manage_and_send_direct_messages(\\n    recipients: List[str],\\n    message: str,\\n    subject: str,\\n    attachments: List[str]\\n) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Manages and sends direct messages.\\n\\n    Parameters:\\n        recipients (List[str]): A list of usernames or email addresses of the recipients.\\n        message (str): The content of the direct message.\\n        subject (str): The subject of the direct message.\\n        attachments (List[str]): A list of file paths to be attached to the direct message.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"manage_and_send_direct_messages\",\n        \"description\": \"Manages and sends direct messages.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"recipients\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of usernames or email addresses of the recipients.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"The content of the direct message.\"\n                },\n                \"subject\": {\n                    \"type\": \"string\",\n                    \"description\": \"The subject of the direct message.\"\n                },\n                \"attachments\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of file paths to be attached to the direct message.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"recipients\", \"message\", \"subject\", \"attachments\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status message.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def manage_and_send_direct_messages(\n    recipients: List[str],\n    message: str,\n    subject: str,\n    attachments: List[str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and sends direct messages.\n\n    Parameters:\n        recipients (List[str]): A list of usernames or email addresses of the recipients.\n        message (str): The content of the direct message.\n        subject (str): The subject of the direct message.\n        attachments (List[str]): A list of file paths to be attached to the direct message.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
        "function_description": {
            "name": "manage_and_send_direct_messages",
            "description": "Manages and sends direct messages.",
            "parameters": {
                "type": "object",
                "properties": {
                    "recipients": {
                        "type": "array",
                        "description": "A list of usernames or email addresses of the recipients.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "message": {
                        "type": "string",
                        "description": "The content of the direct message."
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject of the direct message."
                    },
                    "attachments": {
                        "type": "array",
                        "description": "A list of file paths to be attached to the direct message.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "recipients",
                    "message",
                    "subject",
                    "attachments"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status message."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def manage_and_send_direct_messages(\n    recipients: List[str],\n    message: str,\n    subject: str,\n    attachments: List[str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and sends direct messages.\n\n    Parameters:\n        recipients (List[str]): A list of usernames or email addresses of the recipients.\n        message (str): The content of the direct message.\n        subject (str): The subject of the direct message.\n        attachments (List[str]): A list of file paths to be attached to the direct message.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitch-29",
    "snippet": "def configure_bots(\n    bot_name: str,\n    bot_type: str,\n    bot_token: str,\n    bot_config: Dict[str, str],\n) -> str:\n    \"\"\"\n    Configures and manages bots for chat moderation or entertainment.\n\n    Parameters:\n        bot_name (str): The name of the bot.\n        bot_type (str): The type of the bot (e.g., chat moderation, entertainment).\n        bot_token (str): The token for the bot's API access.\n        bot_config (Dict[str, str]): A dictionary containing additional configuration options for the bot.\n\n    Returns:\n        str: A string indicating the success or failure of the bot configuration.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def configure_bots(\\n    bot_name: str,\\n    bot_type: str,\\n    bot_token: str,\\n    bot_config: Dict[str, str],\\n) -> str:\\n    \\\"\\\"\\\"\\n    Configures and manages bots for chat moderation or entertainment.\\n\\n    Parameters:\\n        bot_name (str): The name of the bot.\\n        bot_type (str): The type of the bot (e.g., chat moderation, entertainment).\\n        bot_token (str): The token for the bot's API access.\\n        bot_config (Dict[str, str]): A dictionary containing additional configuration options for the bot.\\n\\n    Returns:\\n        str: A string indicating the success or failure of the bot configuration.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"configure_bots\",\n        \"description\": \"Configures and manages bots for chat moderation or entertainment.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"bot_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the bot.\"\n                },\n                \"bot_type\": {\n                    \"type\": \"string\",\n                    \"description\": \"The type of the bot (e.g., chat moderation, entertainment).\"\n                },\n                \"bot_token\": {\n                    \"type\": \"string\",\n                    \"description\": \"The token for the bot's API access.\"\n                },\n                \"bot_config\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing additional configuration options for the bot.\",\n                    \"properties\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"bot_name\", \"bot_type\", \"bot_token\", \"bot_config\"]\n        }\n    }\n}",
    "description": {
        "function_snippet": "def configure_bots(\n    bot_name: str,\n    bot_type: str,\n    bot_token: str,\n    bot_config: Dict[str, str],\n) -> str:\n    \"\"\"\n    Configures and manages bots for chat moderation or entertainment.\n\n    Parameters:\n        bot_name (str): The name of the bot.\n        bot_type (str): The type of the bot (e.g., chat moderation, entertainment).\n        bot_token (str): The token for the bot's API access.\n        bot_config (Dict[str, str]): A dictionary containing additional configuration options for the bot.\n\n    Returns:\n        str: A string indicating the success or failure of the bot configuration.\n    \"\"\"\n",
        "function_description": {
            "name": "configure_bots",
            "description": "Configures and manages bots for chat moderation or entertainment.",
            "parameters": {
                "type": "object",
                "properties": {
                    "bot_name": {
                        "type": "string",
                        "description": "The name of the bot."
                    },
                    "bot_type": {
                        "type": "string",
                        "description": "The type of the bot (e.g., chat moderation, entertainment)."
                    },
                    "bot_token": {
                        "type": "string",
                        "description": "The token for the bot's API access."
                    },
                    "bot_config": {
                        "type": "object",
                        "description": "A dictionary containing additional configuration options for the bot.",
                        "properties": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "bot_name",
                    "bot_type",
                    "bot_token",
                    "bot_config"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def configure_bots(\n    bot_name: str,\n    bot_type: str,\n    bot_token: str,\n    bot_config: Dict[str, str],\n) -> str:\n    \"\"\"\n    Configures and manages bots for chat moderation or entertainment.\n\n    Parameters:\n        bot_name (str): The name of the bot.\n        bot_type (str): The type of the bot (e.g., chat moderation, entertainment).\n        bot_token (str): The token for the bot's API access.\n        bot_config (Dict[str, str]): A dictionary containing additional configuration options for the bot.\n\n    Returns:\n        str: A string indicating the success or failure of the bot configuration.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}

user: 
Below is a snippet of a python function:
    def start_stop_twitch_stream(stream_status: str) -> str:
    """
    Start or stop the Twitch stream.

    Parameters:
        stream_status (str): The current status of the stream.

    Returns:
        str: The updated status of the stream.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def start_stop_twitch_stream(stream_status: str) -> str:\n    \"\"\"\n    Start or stop the Twitch stream.\n\n    Parameters:\n        stream_status (str): The current status of the stream.\n\n    Returns:\n        str: The updated status of the stream.\n    \"\"\"\n    ",
    "function_description": {
        "name": "start_stop_twitch_stream",
        "description": "Start or stop the Twitch stream.",
        "parameters": {
            "type": "object",
            "properties": {
                "stream_status": {
                    "type": "string",
                    "description": "The current status of the stream."
                }
            },
            "required": ["stream_status"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "updated_status": {
                    "type": "string",
                    "description": "The updated status of the stream."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def schedule_twitch_stream(
    stream_name: str,
    stream_date: str,
    stream_time: str,
    stream_duration: int,
    stream_category: str,
) -> None:
    """
    Schedule a future Twitch stream.

    Parameters:
        stream_name (str): The name of the Twitch stream.
        stream_date (str): The date of the Twitch stream in YYYY-MM-DD format.
        stream_time (str): The time of the Twitch stream in HH:MM format.
        stream_duration (int): The duration of the Twitch stream in minutes.
        stream_category (str): The category of the Twitch stream.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def schedule_twitch_stream(\n    stream_name: str,\n    stream_date: str,\n    stream_time: str,\n    stream_duration: int,\n    stream_category: str,\n) -> None:\n    \"\"\"\n    Schedule a future Twitch stream.\n\n    Parameters:\n        stream_name (str): The name of the Twitch stream.\n        stream_date (str): The date of the Twitch stream in YYYY-MM-DD format.\n        stream_time (str): The time of the Twitch stream in HH:MM format.\n        stream_duration (int): The duration of the Twitch stream in minutes.\n        stream_category (str): The category of the Twitch stream.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "schedule_twitch_stream",
        "description": "Schedule a future Twitch stream.",
        "parameters": {
            "type": "object",
            "properties": {
                "stream_name": {
                    "type": "string",
                    "description": "The name of the Twitch stream."
                },
                "stream_date": {
                    "type": "string",
                    "description": "The date of the Twitch stream in YYYY-MM-DD format."
                },
                "stream_time": {
                    "type": "string",
                    "description": "The time of the Twitch stream in HH:MM format."
                },
                "stream_duration": {
                    "type": "integer",
                    "description": "The duration of the Twitch stream in minutes."
                },
                "stream_category": {
                    "type": "string",
                    "description": "The category of the Twitch stream."
                }
            },
            "required": ["stream_name", "stream_date", "stream_time", "stream_duration", "stream_category"]
        },
        "returns": {
            "type": "null"
        }
    }
}

user: 
Below is a snippet of a python function:
    def change_stream_title_category(
    stream_id: str,
    new_title: str,
    new_category: str,
) -> None:
    """
    Changes the title and category of the current stream.

    Parameters:
        stream_id (str): The ID of the current stream.
        new_title (str): The new title for the stream.
        new_category (str): The new category for the stream.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def change_stream_title_category(\n    stream_id: str,\n    new_title: str,\n    new_category: str,\n) -> None:\n    \"\"\"\n    Changes the title and category of the current stream.\n\n    Parameters:\n        stream_id (str): The ID of the current stream.\n        new_title (str): The new title for the stream.\n        new_category (str): The new category for the stream.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "change_stream_title_category",
        "description": "Changes the title and category of the current stream.",
        "parameters": {
            "type": "object",
            "properties": {
                "stream_id": {
                    "type": "string",
                    "description": "The ID of the current stream."
                },
                "new_title": {
                    "type": "string",
                    "description": "The new title for the stream."
                },
                "new_category": {
                    "type": "string",
                    "description": "The new category for the stream."
                }
            },
            "required": ["stream_id", "new_title", "new_category"]
        },
        "returns": {
            "type": "object",
            "properties": {}
        }
    }
}

user: 
Below is a snippet of a python function:
    def retrieve_viewer_count_and_analytics() -> Dict[str, Any]:
    """
    Retrieves the current viewer count and other analytics.

    Returns:
        Dict[str, Any]: A dictionary containing the viewer count and other analytics.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def retrieve_viewer_count_and_analytics() -> Dict[str, Any]:\n    \"\"\"\n    Retrieves the current viewer count and other analytics.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the viewer count and other analytics.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "retrieve_viewer_count_and_analytics",
        "description": "Retrieves the current viewer count and other analytics.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "float",
                "description": "A dictionary containing the viewer count and other analytics."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def manage_and_post_messages(
    chat_id: int,
    messages: List[str],
    interval: int,
) -> None:
    """
    Manages and posts automated messages in the chat.

    Parameters:
        chat_id (int): The ID of the chat where the messages will be posted.
        messages (List[str]): A list of messages to be posted.
        interval (int): The time interval in seconds between each message.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def manage_and_post_messages(\n    chat_id: int,\n    messages: List[str],\n    interval: int,\n) -> None:\n    \"\"\"\n    Manages and posts automated messages in the chat.\n\n    Parameters:\n        chat_id (int): The ID of the chat where the messages will be posted.\n        messages (List[str]): A list of messages to be posted.\n        interval (int): The time interval in seconds between each message.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "manage_and_post_messages",
        "description": "Manages and posts automated messages in the chat.",
        "parameters": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer",
                    "description": "The ID of the chat where the messages will be posted."
                },
                "messages": {
                    "type": "array",
                    "description": "A list of messages to be posted.",
                    "items": {
                        "type": "string"
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "The time interval in seconds between each message."
                }
            },
            "required": ["chat_id", "messages", "interval"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def activate_deactivate_emotes(
    emotes: List[str],
    activate: bool,
) -> None:
    """
    Activate or deactivate certain emotes in the chat.

    Parameters:
        emotes (List[str]): A list of emotes to activate or deactivate.
        activate (bool): A boolean value indicating whether to activate or deactivate the emotes.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def activate_deactivate_emotes(\nemotes: List[str],\nactivate: bool,\n) -> None:\n    \"\"\"\n    Activate or deactivate certain emotes in the chat.\n\n    Parameters:\n        emotes (List[str]): A list of emotes to activate or deactivate.\n        activate (bool): A boolean value indicating whether to activate or deactivate the emotes.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "activate_deactivate_emotes",
        "description": "Activate or deactivate certain emotes in the chat.",
        "parameters": {
            "type": "object",
            "properties": {
                "emotes": {
                    "type": "array",
                    "description": "A list of emotes to activate or deactivate.",
                    "items": {
                        "type": "string"
                    }
                },
                "activate": {
                    "type": "boolean",
                    "description": "A boolean value indicating whether to activate or deactivate the emotes."
                }
            },
            "required": ["emotes", "activate"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def initiate_subscriber_only_mode() -> None:
    """
    Initiates subscriber-only mode in the chat.
    """
    # Code implementation goes here    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def initiate_subscriber_only_mode() -> None:\n    \"\"\"\n    Initiates subscriber-only mode in the chat.\n    \"\"\"\n    # Code implementation goes here",
    "function_description": {
        "name": "initiate_subscriber_only_mode",
        "description": "Initiates subscriber-only mode in the chat.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def run_advertisements(
    intervals: List[int],
    advertisements: List[str]
) -> None:
    """
    Run advertisements at specified intervals.

    Parameters:
        intervals (List[int]): A list of intervals in seconds.
        advertisements (List[str]): A list of advertisements to be displayed.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def run_advertisements(\n    intervals: List[int],\n    advertisements: List[str]\n) -> None:\n    \"\"\"\n    Run advertisements at specified intervals.\n\n    Parameters:\n        intervals (List[int]): A list of intervals in seconds.\n        advertisements (List[str]): A list of advertisements to be displayed.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "run_advertisements",
        "description": "Run advertisements at specified intervals.",
        "parameters": {
            "type": "object",
            "properties": {
                "intervals": {
                    "type": "array",
                    "description": "A list of intervals in seconds.",
                    "items": {
                        "type": "integer"
                    }
                },
                "advertisements": {
                    "type": "array",
                    "description": "A list of advertisements to be displayed.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["intervals", "advertisements"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def create_chat_command(
    command_name: str,
    command_function: Callable,
    command_description: str,
    command_usage: str,
) -> None:
    """
    Creates a custom chat command.

    Parameters:
        command_name (str): The name of the command.
        command_function (Callable): The function to be executed when the command is called.
        command_description (str): A description of the command.
        command_usage (str): An example of how to use the command.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def create_chat_command(\n    command_name: str,\n    command_function: Callable,\n    command_description: str,\n    command_usage: str,\n) -> None:\n    \"\"\"\n    Creates a custom chat command.\n\n    Parameters:\n        command_name (str): The name of the command.\n        command_function (Callable): The function to be executed when the command is called.\n        command_description (str): A description of the command.\n        command_usage (str): An example of how to use the command.\n\n    Returns:\n        None\n    \"\"\"",
    "function_description": {
        "name": "create_chat_command",
        "description": "Creates a custom chat command.",
        "parameters": {
            "type": "object",
            "properties": {
                "command_name": {
                    "type": "string",
                    "description": "The name of the command."
                },
                "command_function": {
                    "type": "function",
                    "description": "The function to be executed when the command is called."
                },
                "command_description": {
                    "type": "string",
                    "description": "A description of the command."
                },
                "command_usage": {
                    "type": "string",
                    "description": "An example of how to use the command."
                }
            },
            "required": ["command_name", "command_function", "command_description", "command_usage"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def shout_out_to_new_subscribers_followers_donors():
    """
    Automatically shout-out to new subscribers, followers, or donors.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def shout_out_to_new_subscribers_followers_donors():\n    \"\"\"\n    Automatically shout-out to new subscribers, followers, or donors.\n    \"\"\"",
    "function_description": {
        "name": "shout_out_to_new_subscribers_followers_donors",
        "description": "Automatically shout-out to new subscribers, followers, or donors.",
        "parameters": {},
        "returns": {}
    }
}

user: 
Below is a snippet of a python function:
    def create_stream_marker(
    stream_id: str,
    marker_time: int,
    marker_title: str,
) -> str:
    """
    Creates a stream marker for a highlight.

    Parameters:
        stream_id (str): The ID of the stream.
        marker_time (int): The timestamp of the marker in seconds.
        marker_title (str): The title of the marker.

    Returns:
        str: The ID of the created stream marker.
    """

def get_stream_marker(
    stream_marker_id: str,
) -> Dict[str, Union[str, int]]:
    """
    Retrieves information about a stream marker.

    Parameters:
        stream_marker_id (str): The ID of the stream marker.

    Returns:
        Dict[str, Union[str, int]]: A dictionary containing information about the stream marker.
                                   The dictionary should have 'stream_id', 'marker_time', and 'marker_title' keys.
    """

def update_stream_marker(
    stream_marker_id: str,
    new_marker_title: str,
) -> None:
    """
    Updates the title of a stream marker.

    Parameters:
        stream_marker_id (str): The ID of the stream marker to update.
        new_marker_title (str): The new title for the stream marker.

    Returns:
        None
    """

def delete_stream_marker(
    stream_marker_id: str,
) -> None:
    """
    Deletes a stream marker.

    Parameters:
        stream_marker_id (str): The ID of the stream marker to delete.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def create_stream_marker(\n    stream_id: str,\n    marker_time: int,\n    marker_title: str,\n) -> str:\n    \"\"\"\n    Creates a stream marker for a highlight.\n\n    Parameters:\n        stream_id (str): The ID of the stream.\n        marker_time (int): The timestamp of the marker in seconds.\n        marker_title (str): The title of the marker.\n\n    Returns:\n        str: The ID of the created stream marker.\n    \"\"\"\n\n\n\ndef get_stream_marker(\n    stream_marker_id: str,\n) -> Dict[str, Union[str, int]]:\n    \"\"\"\n    Retrieves information about a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker.\n\n    Returns:\n        Dict[str, Union[str, int]]: A dictionary containing information about the stream marker.\n                                   The dictionary should have 'stream_id', 'marker_time', and 'marker_title' keys.\n    \"\"\"\n\n\ndef update_stream_marker(\n    stream_marker_id: str,\n    new_marker_title: str,\n) -> None:\n    \"\"\"\n    Updates the title of a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to update.\n        new_marker_title (str): The new title for the stream marker.\n\n    Returns:\n        None\n    \"\"\"\n\n\ndef delete_stream_marker(\n    stream_marker_id: str,\n) -> None:\n    \"\"\"\n    Deletes a stream marker.\n\n    Parameters:\n        stream_marker_id (str): The ID of the stream marker to delete.\n\n    Returns:\n        None\n    \"\"\"\n\n",
    "function_description": {
        "name": "create_stream_marker",
        "description": "Creates a stream marker for a highlight.",
        "parameters": {
            "type": "object",
            "properties": {
                "stream_id": {
                    "type": "string",
                    "description": "The ID of the stream."
                },
                "marker_time": {
                    "type": "integer",
                    "description": "The timestamp of the marker in seconds."
                },
                "marker_title": {
                    "type": "string",
                    "description": "The title of the marker."
                }
            },
            "required": ["stream_id", "marker_time", "marker_title"]
        },
        "returns": {
            "type": "string",
            "description": "The ID of the created stream marker."
        }
    }
}

user: 
Below is a snippet of a python function:
    def get_current_subscribers() -> List[str]:
    """
    Retrieves a list of current subscribers.

    Returns:
        List[str]: A list of current subscribers.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def get_current_subscribers() -> List[str]:\n    \"\"\"\n    Retrieves a list of current subscribers.\n\n    Returns:\n        List[str]: A list of current subscribers.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "get_current_subscribers",
        "description": "Retrieves a list of current subscribers.",
        "parameters": {},
        "returns": {
            "type": "object",
            "properties": {
                "current_subscribers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of current subscribers."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def ban_or_timeout_users(
    chat_logs: List[str],
    ban_keywords: List[str],
    timeout_keywords: List[str],
) -> None:
    """
    Automatically bans or times out users based on their chat behavior.

    Parameters:
        chat_logs (List[str]): A list of chat logs.
        ban_keywords (List[str]): A list of keywords indicating ban-worthy behavior.
        timeout_keywords (List[str]): A list of keywords indicating timeout-worthy behavior.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def ban_or_timeout_users(\nchat_logs: List[str],\nban_keywords: List[str],\ntimeout_keywords: List[str],\n) -> None:\n    \"\"\"\n    Automatically bans or times out users based on their chat behavior.\n\n    Parameters:\n        chat_logs (List[str]): A list of chat logs.\n        ban_keywords (List[str]): A list of keywords indicating ban-worthy behavior.\n        timeout_keywords (List[str]): A list of keywords indicating timeout-worthy behavior.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "ban_or_timeout_users",
        "description": "Automatically bans or times out users based on their chat behavior.",
        "parameters": {
            "type": "object",
            "properties": {
                "chat_logs": {
                    "type": "array",
                    "description": "A list of chat logs.",
                    "items": {
                        "type": "string"
                    }
                },
                "ban_keywords": {
                    "type": "array",
                    "description": "A list of keywords indicating ban-worthy behavior.",
                    "items": {
                        "type": "string"
                    }
                },
                "timeout_keywords": {
                    "type": "array",
                    "description": "A list of keywords indicating timeout-worthy behavior.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["chat_logs", "ban_keywords", "timeout_keywords"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def create_poll(
    question: str,
    options: List[str],
    allow_multiple: bool = False,
    allow_anonymous: bool = False,
    allow_comments: bool = False,
) -> int:
    """
    Creates a poll with the given question and options.

    Parameters:
        question (str): The question for the poll.
        options (List[str]): A list of options for the poll.
        allow_multiple (bool): Whether to allow multiple options to be selected. Default is False.
        allow_anonymous (bool): Whether to allow anonymous voting. Default is False.
        allow_comments (bool): Whether to allow comments on the poll. Default is False.

    Returns:
        int: The ID of the created poll.
    """
    pass

def vote_poll(
    poll_id: int,
    user_id: int,
    selected_options: List[int],
    comment: str = None,
) -> None:
    """
    Votes on a poll with the given ID.

    Parameters:
        poll_id (int): The ID of the poll to vote on.
        user_id (int): The ID of the user voting.
        selected_options (List[int]): A list of selected option indices.
        comment (str): An optional comment to leave on the poll. Default is None.

    Returns:
        None
    """
    pass

def get_poll_results(
    poll_id: int,
) -> Dict[int, int]:
    """
    Retrieves the results of a poll.

    Parameters:
        poll_id (int): The ID of the poll to retrieve results for.

    Returns:
        Dict[int, int]: A dictionary mapping option indices to vote counts.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str],\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details about the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "example_function",
        "description": "Orders event tickets and returns the total price.",
        "parameters": {
            "type": "object",
            "properties": {
                "num_tickets": {
                    "type": "integer",
                    "description": "The number of tickets to buy."
                },
                "ticket_type": {
                    "type": "object",
                    "description": "The type of ticket.",
                    "properties": {
                        "type": "string"
                    }
                },
                "event_details": {
                    "type": "object",
                    "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "Event data in YYYY-MM-DD format."
                        }
                    },
                    "required": ["date"]
                },
                "attendees": {
                    "type": "array",
                    "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "age": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "age"]
                    }
                }
            },
            "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_price": {
                    "type": "float",
                    "description": "The total price for the tickets ordered."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def display_notifications(event: str) -> None:
    """
    Display alerts or notifications for in-stream events.

    Parameters:
        event (str): The event that occurred.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def display_notifications(event: str) -> None:\n    \"\"\"\n    Display alerts or notifications for in-stream events.\n\n    Parameters:\n        event (str): The event that occurred.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "display_notifications",
        "description": "Display alerts or notifications for in-stream events.",
        "parameters": {
            "type": "object",
            "properties": {
                "event": {
                    "type": "string",
                    "description": "The event that occurred."
                }
            },
            "required": ["event"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def retrieve_historical_data() -> Tuple[List[str], List[Dict[str, str]], List[str]]:
    """
    Retrieves historical data such as past streams, viewer metrics, and chat logs.

    Returns:
        Tuple[List[str], List[Dict[str, str]], List[str]]: A tuple containing the following lists:
                                                           - A list of past streams.
                                                           - A list of viewer metrics.
                                                           - A list of chat logs.
    """
    streams = []
    viewer_metrics = []
    chat_logs = []

    # Code to retrieve past streams, viewer metrics, and chat logs

    return streams, viewer_metrics, chat_logs    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def retrieve_historical_data() -> Tuple[List[str], List[Dict[str, str]], List[str]]:\n    \"\"\"\n    Retrieves historical data such as past streams, viewer metrics, and chat logs.\n\n    Returns:\n        Tuple[List[str], List[Dict[str, str]], List[str]]: A tuple containing the following lists:\n                                                           - A list of past streams.\n                                                           - A list of viewer metrics.\n                                                           - A list of chat logs.\n    \"\"\"\n    streams = []\n    viewer_metrics = []\n    chat_logs = []\n\n    # Code to retrieve past streams, viewer metrics, and chat logs\n\n    return streams, viewer_metrics, chat_logs",
    "function_description": {
        "name": "retrieve_historical_data",
        "description": "Retrieves historical data such as past streams, viewer metrics, and chat logs.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        },
        "returns": {
            "type": "object",
            "properties": {
                "streams": {
                    "type": "array",
                    "description": "A list of past streams."
                },
                "viewer_metrics": {
                    "type": "array",
                    "description": "A list of viewer metrics."
                },
                "chat_logs": {
                    "type": "array",
                    "description": "A list of chat logs."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def manage_and_redeem_channel_points_or_rewards(
    user_id: str,
    action: str,
    points: int = None,
    rewards: List[str] = None,
) -> Union[str, List[str]]:
    """
    Manages and redeems channel points or rewards for a specific user.

    Parameters:
        user_id (str): The ID of the user.
        action (str): The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'.
        points (int): The number of points to redeem. Optional, only required for 'redeem_points' action.
        rewards (List[str]): The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.

    Returns:
        Union[str, List[str]]: The result of the action performed. Can be a string message or a list of redeemed rewards.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def manage_and_redeem_channel_points_or_rewards(user_id: str, action: str, points: int = None, rewards: List[str] = None) -> Union[str, List[str]]:\n    \"\"\"\n    Manages and redeems channel points or rewards for a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        action (str): The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'.\n        points (int): The number of points to redeem. Optional, only required for 'redeem_points' action.\n        rewards (List[str]): The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.\n\n    Returns:\n        Union[str, List[str]]: The result of the action performed. Can be a string message or a list of redeemed rewards.\n    \"\"\"\n",
    "function_description": {
        "name": "manage_and_redeem_channel_points_or_rewards",
        "description": "Manages and redeems channel points or rewards for a specific user.",
        "parameters": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "description": "The ID of the user."
                },
                "action": {
                    "type": "string",
                    "description": "The action to be performed. Can be 'check_points', 'redeem_points', or 'redeem_rewards'."
                },
                "points": {
                    "type": "integer",
                    "description": "The number of points to redeem. Optional, only required for 'redeem_points' action."
                },
                "rewards": {
                    "type": "array",
                    "description": "The list of rewards to redeem. Optional, only required for 'redeem_rewards' action.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "user_id",
                "action"
            ]
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "string",
                "description": "The result of the action performed. Can be a string message or a list of redeemed rewards."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def clip_segments(current_stream: str) -> str:
    """
    Clip segments of the current stream.

    Parameters:
        current_stream (str): The current stream to clip segments from.

    Returns:
        str: The clipped segments of the current stream.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def clip_segments(current_stream: str) -> str:\n    \"\"\"\n    Clip segments of the current stream.\n\n    Parameters:\n        current_stream (str): The current stream to clip segments from.\n\n    Returns:\n        str: The clipped segments of the current stream.\n    \"\"\"    ",
    "function_description": {
        "name": "clip_segments",
        "description": "Clip segments of the current stream.",
        "parameters": {
            "type": "object",
            "properties": {
                "current_stream": {
                    "type": "string",
                    "description": "The current stream to clip segments from."
                }
            },
            "required": ["current_stream"]
        },
        "returns": {
            "type": "string",
            "description": "The clipped segments of the current stream."
        }
    }
}

user: 
Below is a snippet of a python function:
    def configure_audio_video_settings(
    audio_bitrate: int,
    video_bitrate: int,
    resolution: str,
) -> None:
    """
    Configure audio and video settings, including bitrate and resolution.

    Parameters:
        audio_bitrate (int): The audio bitrate in kilobits per second.
        video_bitrate (int): The video bitrate in kilobits per second.
        resolution (str): The resolution of the video.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def configure_audio_video_settings(\n    audio_bitrate: int,\n    video_bitrate: int,\n    resolution: str,\n) -> None:\n    \"\"\"\n    Configure audio and video settings, including bitrate and resolution.\n\n    Parameters:\n        audio_bitrate (int): The audio bitrate in kilobits per second.\n        video_bitrate (int): The video bitrate in kilobits per second.\n        resolution (str): The resolution of the video.\n\n    Returns:\n        None\n    \"\"\"\n",
    "function_description": {
        "name": "configure_audio_video_settings",
        "description": "Configure audio and video settings, including bitrate and resolution.",
        "parameters": {
            "type": "object",
            "properties": {
                "audio_bitrate": {
                    "type": "integer",
                    "description": "The audio bitrate in kilobits per second."
                },
                "video_bitrate": {
                    "type": "integer",
                    "description": "The video bitrate in kilobits per second."
                },
                "resolution": {
                    "type": "string",
                    "description": "The resolution of the video."
                }
            },
            "required": ["audio_bitrate", "video_bitrate", "resolution"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def host_or_raid_channel(
    channel_name: str,
    action: str,
) -> str:
    """
    Hosts or raids another Twitch channel.

    Parameters:
        channel_name (str): The name of the channel to host or raid.
        action (str): The action to perform, either 'host' or 'raid'.

    Returns:
        str: A message confirming the action performed.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def host_or_raid_channel(\n    channel_name: str,\n    action: str,\n) -> str:\n    \"\"\"\n    Hosts or raids another Twitch channel.\n\n    Parameters:\n        channel_name (str): The name of the channel to host or raid.\n        action (str): The action to perform, either 'host' or 'raid'.\n\n    Returns:\n        str: A message confirming the action performed.\n    \"\"\"\n",
    "function_description": {
        "name": "host_or_raid_channel",
        "description": "Hosts or raids another Twitch channel.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_name": {
                    "type": "string",
                    "description": "The name of the channel to host or raid."
                },
                "action": {
                    "type": "string",
                    "description": "The action to perform, either 'host' or 'raid'."
                }
            },
            "required": ["channel_name", "action"]
        },
        "returns": {
            "type": "string",
            "description": "A message confirming the action performed."
        }
    }
}

user: 
Below is a snippet of a python function:
    def initiate_costream(streamer_id: str) -> str:
    """
    Initiates a co-stream with another streamer.

    Parameters:
        streamer_id (str): The ID of the streamer to co-stream with.

    Returns:
        str: A message confirming the co-stream initiation.
    """
    pass

def manage_costream(streamer_id: str) -> str:
    """
    Manages a co-stream with another streamer.

    Parameters:
        streamer_id (str): The ID of the streamer to co-stream with.

    Returns:
        str: A message confirming the successful management of the co-stream.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def initiate_costream(streamer_id: str) -> str:\n    \"\"\"\n    Initiates a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the co-stream initiation.\n    \"\"\"\n    pass\n\n\ndef manage_costream(streamer_id: str) -> str:\n    \"\"\"\n    Manages a co-stream with another streamer.\n\n    Parameters:\n        streamer_id (str): The ID of the streamer to co-stream with.\n\n    Returns:\n        str: A message confirming the successful management of the co-stream.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "initiate_costream",
        "description": "Initiates a co-stream with another streamer.",
        "parameters": {
            "type": "object",
            "properties": {
                "streamer_id": {
                    "type": "string",
                    "description": "The ID of the streamer to co-stream with."
                }
            },
            "required": ["streamer_id"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message confirming the co-stream initiation."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def manage_and_update_panels() -> None:
    """
    Manages and updates panels and other customizable areas below the video player.
    """
    # Code implementation to manage and update panels and other customizable areas below the video player    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def manage_and_update_panels() -> None:\n    \"\"\"\n    Manages and updates panels and other customizable areas below the video player.\n    \"\"\"\n    # Code implementation to manage and update panels and other customizable areas below the video player",
    "function_description": {
        "name": "manage_and_update_panels",
        "description": "Manages and updates panels and other customizable areas below the video player.",
        "parameters": {
            "type": "None"
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def activate_scenes_or_overlays(
    scenes: List[str],
    overlays: List[str],
) -> None:
    """
    Activates specific scenes or overlays.

    Parameters:
        scenes (List[str]): A list of scene names to activate.
        overlays (List[str]): A list of overlay names to activate.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def activate_scenes_or_overlays(scenes: List[str], overlays: List[str]) -> None:",
    "function_description": {
        "name": "activate_scenes_or_overlays",
        "description": "Activates specific scenes or overlays.",
        "parameters": {
            "type": "object",
            "properties": {
                "scenes": {
                    "type": "array",
                    "description": "A list of scene names to activate.",
                    "items": {
                        "type": "string"
                    }
                },
                "overlays": {
                    "type": "array",
                    "description": "A list of overlay names to activate.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["scenes", "overlays"]
        },
        "returns": {
            "type": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def automatically_archive_past_broadcasts(
    channel_id: str,
    archive_duration: int,
    api_key: str,
) -> None:
    """
    Automatically archives past broadcasts of a given channel.

    Parameters:
        channel_id (str): The ID of the channel to archive broadcasts for.
        archive_duration (int): The duration (in days) for which to archive the broadcasts.
        api_key (str): The API key for accessing the Twitch API.

    Returns:
        None
    """
    # Implementation goes here    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def automatically_archive_past_broadcasts(\n    channel_id: str,\n    archive_duration: int,\n    api_key: str,\n) -> None:\n    \"\"\"\n    Automatically archives past broadcasts of a given channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel to archive broadcasts for.\n        archive_duration (int): The duration (in days) for which to archive the broadcasts.\n        api_key (str): The API key for accessing the Twitch API.\n\n    Returns:\n        None\n    \"\"\"\n    # Implementation goes here",
    "function_description": {
        "name": "automatically_archive_past_broadcasts",
        "description": "Automatically archives past broadcasts of a given channel.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string",
                    "description": "The ID of the channel to archive broadcasts for."
                },
                "archive_duration": {
                    "type": "integer",
                    "description": "The duration (in days) for which to archive the broadcasts."
                },
                "api_key": {
                    "type": "string",
                    "description": "The API key for accessing the Twitch API."
                }
            },
            "required": ["channel_id", "archive_duration", "api_key"]
        },
        "returns": {
            "type": "object",
            "properties": {},
            "description": "None"
        }
    }
}

user: 
Below is a snippet of a python function:
    def enable_disable_slow_mode(chat_id: int, enable: bool) -> bool:
    """
    Enable or disable slow mode in the chat.

    Parameters:
        chat_id (int): The unique identifier of the chat.
        enable (bool): Whether to enable or disable slow mode.

    Returns:
        bool: True if slow mode is successfully enabled or disabled, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def enable_disable_slow_mode(chat_id: int, enable: bool) -> bool:\n    \"\"\"\n    Enable or disable slow mode in the chat.\n\n    Parameters:\n        chat_id (int): The unique identifier of the chat.\n        enable (bool): Whether to enable or disable slow mode.\n\n    Returns:\n        bool: True if slow mode is successfully enabled or disabled, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "enable_disable_slow_mode",
        "description": "Enable or disable slow mode in the chat.",
        "parameters": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer",
                    "description": "The unique identifier of the chat."
                },
                "enable": {
                    "type": "boolean",
                    "description": "Whether to enable or disable slow mode."
                }
            },
            "required": ["chat_id", "enable"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if slow mode is successfully enabled or disabled, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def manage_subscriptions(channel_id: str, action: str, user_id: str) -> bool:
    """
    Monitor and manage subscriptions to other channels.

    Parameters:
        channel_id (str): The ID of the channel to manage subscriptions for.
        action (str): The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe').
        user_id (str): The ID of the user performing the action.

    Returns:
        bool: True if the subscription was successfully managed, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def manage_subscriptions(channel_id: str, action: str, user_id: str) -> bool:\n    \"\"\"\n    Monitor and manage subscriptions to other channels.\n\n    Parameters:\n        channel_id (str): The ID of the channel to manage subscriptions for.\n        action (str): The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe').\n        user_id (str): The ID of the user performing the action.\n\n    Returns:\n        bool: True if the subscription was successfully managed, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "manage_subscriptions",
        "description": "Monitor and manage subscriptions to other channels.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string",
                    "description": "The ID of the channel to manage subscriptions for."
                },
                "action": {
                    "type": "string",
                    "description": "The action to perform on the subscription (e.g. 'subscribe', 'unsubscribe')."
                },
                "user_id": {
                    "type": "string",
                    "description": "The ID of the user performing the action."
                }
            },
            "required": ["channel_id", "action", "user_id"]
        },
        "returns": {
            "type": "bool",
            "description": "True if the subscription was successfully managed, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def set_donation_goals(
    goals: Dict[str, float],
    donations: Dict[str, float],
) -> Dict[str, Tuple[float, float]]:
    """
    Set up donation goals and progress bars.

    Parameters:
        goals (Dict[str, float]): A dictionary with donation goals as keys and the target amounts as values.
        donations (Dict[str, float]): A dictionary with donation amounts as keys and the current amounts as values.

    Returns:
        Dict[str, Tuple[float, float]]: A dictionary with donation goals as keys and a tuple of current amount and target amount as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def set_donation_goals(goals: Dict[str, float], donations: Dict[str, float]) -> Dict[str, Tuple[float, float]]:\n    \n    Parameters:\n        goals (Dict[str, float]): A dictionary with donation goals as keys and the target amounts as values.\n        donations (Dict[str, float]): A dictionary with donation amounts as keys and the current amounts as values.\n\n    Returns:\n        Dict[str, Tuple[float, float]]: A dictionary with donation goals as keys and a tuple of current amount and target amount as values.\n",
    "function_description": {
        "name": "set_donation_goals",
        "description": "Set up donation goals and progress bars.",
        "parameters": {
            "type": "object",
            "properties": {
                "goals": {
                    "type": "object",
                    "description": "A dictionary with donation goals as keys and the target amounts as values."
                },
                "donations": {
                    "type": "object",
                    "description": "A dictionary with donation amounts as keys and the current amounts as values."
                }
            },
            "required": ["goals", "donations"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "donation_goals": {
                    "type": "object",
                    "description": "A dictionary with donation goals as keys and a tuple of current amount and target amount as values."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def manage_and_send_direct_messages(
    recipients: List[str],
    message: str,
    subject: str,
    attachments: List[str]
) -> Dict[str, str]:
    """
    Manages and sends direct messages.

    Parameters:
        recipients (List[str]): A list of usernames or email addresses of the recipients.
        message (str): The content of the direct message.
        subject (str): The subject of the direct message.
        attachments (List[str]): A list of file paths to be attached to the direct message.

    Returns:
        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def manage_and_send_direct_messages(\n    recipients: List[str],\n    message: str,\n    subject: str,\n    attachments: List[str]\n) -> Dict[str, str]:\n    \"\"\"\n    Manages and sends direct messages.\n\n    Parameters:\n        recipients (List[str]): A list of usernames or email addresses of the recipients.\n        message (str): The content of the direct message.\n        subject (str): The subject of the direct message.\n        attachments (List[str]): A list of file paths to be attached to the direct message.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
    "function_description": {
        "name": "manage_and_send_direct_messages",
        "description": "Manages and sends direct messages.",
        "parameters": {
            "type": "object",
            "properties": {
                "recipients": {
                    "type": "array",
                    "description": "A list of usernames or email addresses of the recipients.",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The content of the direct message."
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the direct message."
                },
                "attachments": {
                    "type": "array",
                    "description": "A list of file paths to be attached to the direct message.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["recipients", "message", "subject", "attachments"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The status message."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def configure_bots(
    bot_name: str,
    bot_type: str,
    bot_token: str,
    bot_config: Dict[str, str],
) -> str:
    """
    Configures and manages bots for chat moderation or entertainment.

    Parameters:
        bot_name (str): The name of the bot.
        bot_type (str): The type of the bot (e.g., chat moderation, entertainment).
        bot_token (str): The token for the bot's API access.
        bot_config (Dict[str, str]): A dictionary containing additional configuration options for the bot.

    Returns:
        str: A string indicating the success or failure of the bot configuration.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def configure_bots(\n    bot_name: str,\n    bot_type: str,\n    bot_token: str,\n    bot_config: Dict[str, str],\n) -> str:\n    \"\"\"\n    Configures and manages bots for chat moderation or entertainment.\n\n    Parameters:\n        bot_name (str): The name of the bot.\n        bot_type (str): The type of the bot (e.g., chat moderation, entertainment).\n        bot_token (str): The token for the bot's API access.\n        bot_config (Dict[str, str]): A dictionary containing additional configuration options for the bot.\n\n    Returns:\n        str: A string indicating the success or failure of the bot configuration.\n    \"\"\"\n",
    "function_description": {
        "name": "configure_bots",
        "description": "Configures and manages bots for chat moderation or entertainment.",
        "parameters": {
            "type": "object",
            "properties": {
                "bot_name": {
                    "type": "string",
                    "description": "The name of the bot."
                },
                "bot_type": {
                    "type": "string",
                    "description": "The type of the bot (e.g., chat moderation, entertainment)."
                },
                "bot_token": {
                    "type": "string",
                    "description": "The token for the bot's API access."
                },
                "bot_config": {
                    "type": "object",
                    "description": "A dictionary containing additional configuration options for the bot.",
                    "properties": {
                        "type": "string"
                    }
                }
            },
            "required": ["bot_name", "bot_type", "bot_token", "bot_config"]
        }
    }
}


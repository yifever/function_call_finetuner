{
    "function_id": "twitter-1",
    "snippet": "def post_tweet(user_id: str, tweet: str) -> bool:\n    \"\"\"\n    Posts a tweet to a user's timeline.\n\n    Parameters:\n        user_id (str): The user's ID.\n        tweet (str): The content of the tweet.\n\n    Returns:\n        bool: True if the tweet was successfully posted, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def post_tweet(user_id: str, tweet: str) -> bool:\\n    \\\"\\\"\\\"\\n    Posts a tweet to a user's timeline.\\n\\n    Parameters:\\n        user_id (str): The user's ID.\\n        tweet (str): The content of the tweet.\\n\\n    Returns:\\n        bool: True if the tweet was successfully posted, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"post_tweet\",\n        \"description\": \"Posts a tweet to a user's timeline.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The user's ID.\"\n                },\n                \"tweet\": {\n                    \"type\": \"string\",\n                    \"description\": \"The content of the tweet.\"\n                }\n            },\n            \"required\": [\"user_id\", \"tweet\"]\n        },\n        \"returns\": {\n            \"type\": \"bool\",\n            \"description\": \"True if the tweet was successfully posted, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def post_tweet(user_id: str, tweet: str) -> bool:\n    \"\"\"\n    Posts a tweet to a user's timeline.\n\n    Parameters:\n        user_id (str): The user's ID.\n        tweet (str): The content of the tweet.\n\n    Returns:\n        bool: True if the tweet was successfully posted, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "post_tweet",
            "description": "Posts a tweet to a user's timeline.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The user's ID."
                    },
                    "tweet": {
                        "type": "string",
                        "description": "The content of the tweet."
                    }
                },
                "required": [
                    "user_id",
                    "tweet"
                ]
            },
            "returns": {
                "type": "bool",
                "description": "True if the tweet was successfully posted, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def post_tweet(user_id: str, tweet: str) -> bool:\n    \"\"\"\n    Posts a tweet to a user's timeline.\n\n    Parameters:\n        user_id (str): The user's ID.\n        tweet (str): The content of the tweet.\n\n    Returns:\n        bool: True if the tweet was successfully posted, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-2",
    "snippet": "def delete_tweet(user_id: str, tweet_id: str) -> None:\n    \"\"\"\n    Deletes a specific tweet from a user's timeline.\n\n    Parameters:\n        user_id (str): The ID of the user whose tweet to delete.\n        tweet_id (str): The ID of the tweet to delete.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def delete_tweet(user_id: str, tweet_id: str) -> None:\\n    \\\"\\\"\\\"\\n    Deletes a specific tweet from a user's timeline.\\n\\n    Parameters:\\n        user_id (str): The ID of the user whose tweet to delete.\\n        tweet_id (str): The ID of the tweet to delete.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"delete_tweet\",\n        \"description\": \"Deletes a specific tweet from a user's timeline.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the user whose tweet to delete.\"\n                },\n                \"tweet_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the tweet to delete.\"\n                }\n            },\n            \"required\": [\"user_id\", \"tweet_id\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def delete_tweet(user_id: str, tweet_id: str) -> None:\n    \"\"\"\n    Deletes a specific tweet from a user's timeline.\n\n    Parameters:\n        user_id (str): The ID of the user whose tweet to delete.\n        tweet_id (str): The ID of the tweet to delete.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "delete_tweet",
            "description": "Deletes a specific tweet from a user's timeline.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user whose tweet to delete."
                    },
                    "tweet_id": {
                        "type": "string",
                        "description": "The ID of the tweet to delete."
                    }
                },
                "required": [
                    "user_id",
                    "tweet_id"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_tweet(user_id: str, tweet_id: str) -> None:\n    \"\"\"\n    Deletes a specific tweet from a user's timeline.\n\n    Parameters:\n        user_id (str): The ID of the user whose tweet to delete.\n        tweet_id (str): The ID of the tweet to delete.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-3",
    "snippet": "def retrieve_user_timeline(user_id: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a user's timeline, including tweets, retweets, and replies.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries representing each tweet\n                              in the user's timeline. Each dictionary should have\n                              'tweet_id', 'text', 'author', and 'date' keys.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_user_timeline(user_id: str) -> List[Dict[str, str]]:\\n    \\\"\\\"\\\"\\n    Retrieves a user's timeline, including tweets, retweets, and replies.\\n\\n    Parameters:\\n        user_id (str): The ID of the user.\\n\\n    Returns:\\n        List[Dict[str, str]]: A list of dictionaries representing each tweet\\n                              in the user's timeline. Each dictionary should have\\n                              'tweet_id', 'text', 'author', and 'date' keys.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"retrieve_user_timeline\",\n        \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the user.\"\n                }\n            },\n            \"required\": [\"user_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_id\": {\n                    \"type\": \"string\"\n                },\n                \"text\": {\n                    \"type\": \"string\"\n                },\n                \"author\": {\n                    \"type\": \"string\"\n                },\n                \"date\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_user_timeline(user_id: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a user's timeline, including tweets, retweets, and replies.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries representing each tweet\n                              in the user's timeline. Each dictionary should have\n                              'tweet_id', 'text', 'author', and 'date' keys.\n    \"\"\"\n",
        "function_description": {
            "name": "retrieve_user_timeline",
            "description": "Retrieves a user's timeline, including tweets, retweets, and replies.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user."
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "author": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_user_timeline(user_id: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a user's timeline, including tweets, retweets, and replies.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries representing each tweet\n                              in the user's timeline. Each dictionary should have\n                              'tweet_id', 'text', 'author', and 'date' keys.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-4",
    "snippet": "def retrieve_user_info(username: str) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve information about a specific user based on their username.\n\n    Parameters:\n        username (str): The username of the user.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing information about the user.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_user_info(username: str) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Retrieve information about a specific user based on their username.\\n\\n    Parameters:\\n        username (str): The username of the user.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary containing information about the user.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"retrieve_user_info\",\n        \"description\": \"Retrieve information about a specific user based on their username.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"username\": {\n                    \"type\": \"string\",\n                    \"description\": \"The username of the user.\"\n                }\n            },\n            \"required\": [\"username\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"information\": {\n                    \"type\": \"any\",\n                    \"description\": \"A dictionary containing information about the user.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_user_info(username: str) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve information about a specific user based on their username.\n\n    Parameters:\n        username (str): The username of the user.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing information about the user.\n    \"\"\"\n",
        "function_description": {
            "name": "retrieve_user_info",
            "description": "Retrieve information about a specific user based on their username.",
            "parameters": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the user."
                    }
                },
                "required": [
                    "username"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "information": {
                        "type": "any",
                        "description": "A dictionary containing information about the user."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_user_info(username: str) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve information about a specific user based on their username.\n\n    Parameters:\n        username (str): The username of the user.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing information about the user.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-5",
    "snippet": "def follow_user(username: str) -> bool:\n    \"\"\"\n    Follows a specific user.\n\n    Parameters:\n        username (str): The username of the user to follow.\n\n    Returns:\n        bool: True if the user was successfully followed, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def follow_user(username: str) -> bool:\\n    \\\"\\\"\\\"\\n    Follows a specific user.\\n\\n    Parameters:\\n        username (str): The username of the user to follow.\\n\\n    Returns:\\n        bool: True if the user was successfully followed, False otherwise.\\n    \\\"\\\"\\\"\\n    \",\n    \"function_description\": {\n        \"name\": \"follow_user\",\n        \"description\": \"Follows a specific user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"username\": {\n                    \"type\": \"string\",\n                    \"description\": \"The username of the user to follow.\"\n                }\n            },\n            \"required\": [\"username\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"result\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"True if the user was successfully followed, False otherwise.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def follow_user(username: str) -> bool:\n    \"\"\"\n    Follows a specific user.\n\n    Parameters:\n        username (str): The username of the user to follow.\n\n    Returns:\n        bool: True if the user was successfully followed, False otherwise.\n    \"\"\"\n    ",
        "function_description": {
            "name": "follow_user",
            "description": "Follows a specific user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the user to follow."
                    }
                },
                "required": [
                    "username"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "boolean",
                        "description": "True if the user was successfully followed, False otherwise."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def follow_user(username: str) -> bool:\n    \"\"\"\n    Follows a specific user.\n\n    Parameters:\n        username (str): The username of the user to follow.\n\n    Returns:\n        bool: True if the user was successfully followed, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-6",
    "snippet": "def unfollow_user(username: str) -> None:\n    \"\"\"\n    Unfollows a specific user.\n\n    Parameters:\n        username (str): The username of the user to unfollow.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def unfollow_user(username: str) -> None:\\n    \\\"\\\"\\\"\\n    Unfollows a specific user.\\n\\n    Parameters:\\n        username (str): The username of the user to unfollow.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"unfollow_user\",\n        \"description\": \"Unfollows a specific user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"username\": {\n                    \"type\": \"string\",\n                    \"description\": \"The username of the user to unfollow.\"\n                }\n            },\n            \"required\": [\"username\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {}\n        }\n    }\n}",
    "description": {
        "function_snippet": "def unfollow_user(username: str) -> None:\n    \"\"\"\n    Unfollows a specific user.\n\n    Parameters:\n        username (str): The username of the user to unfollow.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "unfollow_user",
            "description": "Unfollows a specific user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the user to unfollow."
                    }
                },
                "required": [
                    "username"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {}
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def unfollow_user(username: str) -> None:\n    \"\"\"\n    Unfollows a specific user.\n\n    Parameters:\n        username (str): The username of the user to unfollow.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-7",
    "snippet": "def like_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Likes a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to like.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def like_tweet(tweet_id: str) -> None:\\n    \\\"\\\"\\\"\\n    Likes a specific tweet.\\n\\n    Parameters:\\n        tweet_id (str): The ID of the tweet to like.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"like_tweet\",\n        \"description\": \"Likes a specific tweet.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the tweet to like.\"\n                }\n            },\n            \"required\": [\"tweet_id\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def like_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Likes a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to like.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "like_tweet",
            "description": "Likes a specific tweet.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "string",
                        "description": "The ID of the tweet to like."
                    }
                },
                "required": [
                    "tweet_id"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def like_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Likes a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to like.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-8",
    "snippet": "def unlike_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Unlike a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to unlike.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def unlike_tweet(tweet_id: str) -> None:\\n    \\\"\\\"\\\"\\n    Unlike a specific tweet.\\n\\n    Parameters:\\n        tweet_id (str): The ID of the tweet to unlike.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"unlike_tweet\",\n        \"description\": \"Unlike a specific tweet.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the tweet to unlike.\"\n                }\n            },\n            \"required\": [\"tweet_id\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def unlike_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Unlike a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to unlike.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "unlike_tweet",
            "description": "Unlike a specific tweet.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "string",
                        "description": "The ID of the tweet to unlike."
                    }
                },
                "required": [
                    "tweet_id"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def unlike_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Unlike a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to unlike.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-9",
    "snippet": "def retweet_tweet(\n    tweet_id: str,\n) -> bool:\n    \"\"\"\n    Retweets a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to retweet.\n\n    Returns:\n        bool: True if the tweet was successfully retweeted, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def retweet_tweet(\\n    tweet_id: str,\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Retweets a specific tweet.\\n\\n    Parameters:\\n        tweet_id (str): The ID of the tweet to retweet.\\n\\n    Returns:\\n        bool: True if the tweet was successfully retweeted, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"retweet_tweet\",\n        \"description\": \"Retweets a specific tweet.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the tweet to retweet.\"\n                }\n            },\n            \"required\": [\"tweet_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"True if the tweet was successfully retweeted, False otherwise.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retweet_tweet(\n    tweet_id: str,\n) -> bool:\n    \"\"\"\n    Retweets a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to retweet.\n\n    Returns:\n        bool: True if the tweet was successfully retweeted, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "retweet_tweet",
            "description": "Retweets a specific tweet.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "string",
                        "description": "The ID of the tweet to retweet."
                    }
                },
                "required": [
                    "tweet_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "boolean",
                        "description": "True if the tweet was successfully retweeted, False otherwise."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retweet_tweet(\n    tweet_id: str,\n) -> bool:\n    \"\"\"\n    Retweets a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to retweet.\n\n    Returns:\n        bool: True if the tweet was successfully retweeted, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-10",
    "snippet": "def undo_retweet(tweet_id: str) -> None:\n    \"\"\"\n    Undo a retweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to undo the retweet.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def undo_retweet(tweet_id: str) -> None:\\n    \\\"\\\"\\\"\\n    Undo a retweet.\\n\\n    Parameters:\\n        tweet_id (str): The ID of the tweet to undo the retweet.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"undo_retweet\",\n        \"description\": \"Undo a retweet.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the tweet to undo the retweet.\"\n                }\n            },\n            \"required\": [\"tweet_id\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def undo_retweet(tweet_id: str) -> None:\n    \"\"\"\n    Undo a retweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to undo the retweet.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "undo_retweet",
            "description": "Undo a retweet.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "string",
                        "description": "The ID of the tweet to undo the retweet."
                    }
                },
                "required": [
                    "tweet_id"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def undo_retweet(tweet_id: str) -> None:\n    \"\"\"\n    Undo a retweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to undo the retweet.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-11",
    "snippet": "def send_direct_message(\n    recipient: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends a direct message to a specific user.\n\n    Parameters:\n        recipient (str): The username or ID of the recipient.\n        message (str): The content of the message.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def send_direct_message(\\n    recipient: str,\\n    message: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Sends a direct message to a specific user.\\n\\n    Parameters:\\n        recipient (str): The username or ID of the recipient.\\n        message (str): The content of the message.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"send_direct_message\",\n        \"description\": \"Sends a direct message to a specific user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"recipient\": {\n                    \"type\": \"string\",\n                    \"description\": \"The username or ID of the recipient.\"\n                },\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"The content of the message.\"\n                }\n            },\n            \"required\": [\"recipient\", \"message\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def send_direct_message(\n    recipient: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends a direct message to a specific user.\n\n    Parameters:\n        recipient (str): The username or ID of the recipient.\n        message (str): The content of the message.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "send_direct_message",
            "description": "Sends a direct message to a specific user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "description": "The username or ID of the recipient."
                    },
                    "message": {
                        "type": "string",
                        "description": "The content of the message."
                    }
                },
                "required": [
                    "recipient",
                    "message"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def send_direct_message(\n    recipient: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends a direct message to a specific user.\n\n    Parameters:\n        recipient (str): The username or ID of the recipient.\n        message (str): The content of the message.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-12",
    "snippet": "def delete_direct_message(\n    message_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a sent direct message.\n\n    Parameters:\n        message_id (str): The ID of the direct message to delete.\n\n    Returns:\n        bool: True if the direct message was successfully deleted, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def delete_direct_message(\\n    message_id: str,\\n) -> bool:\\n    \\\"\\\"\\\"\\n    Deletes a sent direct message.\\n\\n    Parameters:\\n        message_id (str): The ID of the direct message to delete.\\n\\n    Returns:\\n        bool: True if the direct message was successfully deleted, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"delete_direct_message\",\n        \"description\": \"Deletes a sent direct message.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"message_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the direct message to delete.\"\n                }\n            },\n            \"required\": [\"message_id\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if the direct message was successfully deleted, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def delete_direct_message(\n    message_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a sent direct message.\n\n    Parameters:\n        message_id (str): The ID of the direct message to delete.\n\n    Returns:\n        bool: True if the direct message was successfully deleted, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "delete_direct_message",
            "description": "Deletes a sent direct message.",
            "parameters": {
                "type": "object",
                "properties": {
                    "message_id": {
                        "type": "string",
                        "description": "The ID of the direct message to delete."
                    }
                },
                "required": [
                    "message_id"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the direct message was successfully deleted, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_direct_message(\n    message_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a sent direct message.\n\n    Parameters:\n        message_id (str): The ID of the direct message to delete.\n\n    Returns:\n        bool: True if the direct message was successfully deleted, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-13",
    "snippet": "def retrieve_direct_messages(\n    user_id: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a list of direct messages sent and received by a user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing direct message details.\n                              Each dictionary should have 'sender' and 'message' keys.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_direct_messages(\\n    user_id: str,\\n) -> List[Dict[str, str]]:\\n    \\\"\\\"\\\"\\n    Retrieves a list of direct messages sent and received by a user.\\n\\n    Parameters:\\n        user_id (str): The ID of the user.\\n\\n    Returns:\\n        List[Dict[str, str]]: A list of dictionaries containing direct message details.\\n                              Each dictionary should have 'sender' and 'message' keys.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"retrieve_direct_messages\",\n        \"description\": \"Retrieves a list of direct messages sent and received by a user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the user.\"\n                }\n            },\n            \"required\": [\"user_id\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"sender\": {\n                        \"type\": \"string\"\n                    },\n                    \"message\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\"sender\", \"message\"]\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_direct_messages(\n    user_id: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a list of direct messages sent and received by a user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing direct message details.\n                              Each dictionary should have 'sender' and 'message' keys.\n    \"\"\"\n",
        "function_description": {
            "name": "retrieve_direct_messages",
            "description": "Retrieves a list of direct messages sent and received by a user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user."
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "sender": {
                            "type": "string"
                        },
                        "message": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "sender",
                        "message"
                    ]
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_direct_messages(\n    user_id: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a list of direct messages sent and received by a user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing direct message details.\n                              Each dictionary should have 'sender' and 'message' keys.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-14",
    "snippet": "def retrieve_trending_topics(location: str) -> List[str]:\n    \"\"\"\n    Retrieves trending topics for a specific location.\n\n    Parameters:\n        location (str): The specific location to retrieve trending topics for.\n\n    Returns:\n        List[str]: A list of trending topics for the specified location.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_trending_topics(location: str) -> List[str]:\\n    \\\"\\\"\\\"\\n    Retrieves trending topics for a specific location.\\n\\n    Parameters:\\n        location (str): The specific location to retrieve trending topics for.\\n\\n    Returns:\\n        List[str]: A list of trending topics for the specified location.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"retrieve_trending_topics\",\n        \"description\": \"Retrieves trending topics for a specific location.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The specific location to retrieve trending topics for.\"\n                }\n            },\n            \"required\": [\"location\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"trending_topics\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"A list of trending topics for the specified location.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_trending_topics(location: str) -> List[str]:\n    \"\"\"\n    Retrieves trending topics for a specific location.\n\n    Parameters:\n        location (str): The specific location to retrieve trending topics for.\n\n    Returns:\n        List[str]: A list of trending topics for the specified location.\n    \"\"\"\n",
        "function_description": {
            "name": "retrieve_trending_topics",
            "description": "Retrieves trending topics for a specific location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The specific location to retrieve trending topics for."
                    }
                },
                "required": [
                    "location"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "trending_topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of trending topics for the specified location."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_trending_topics(location: str) -> List[str]:\n    \"\"\"\n    Retrieves trending topics for a specific location.\n\n    Parameters:\n        location (str): The specific location to retrieve trending topics for.\n\n    Returns:\n        List[str]: A list of trending topics for the specified location.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-15",
    "snippet": "def get_followers(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of followers for a specific user.\n\n    Parameters:\n        user_id (int): The ID of the user.\n\n    Returns:\n        List[str]: A list of usernames of the followers.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def get_followers(user_id: int) -> List[str]:\\n    \\\"\\\"\\\"\\n    Retrieves a list of followers for a specific user.\\n\\n    Parameters:\\n        user_id (int): The ID of the user.\\n\\n    Returns:\\n        List[str]: A list of usernames of the followers.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"get_followers\",\n        \"description\": \"Retrieves a list of followers for a specific user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the user.\"\n                }\n            },\n            \"required\": [\"user_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"followers\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"A list of usernames of the followers.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def get_followers(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of followers for a specific user.\n\n    Parameters:\n        user_id (int): The ID of the user.\n\n    Returns:\n        List[str]: A list of usernames of the followers.\n    \"\"\"",
        "function_description": {
            "name": "get_followers",
            "description": "Retrieves a list of followers for a specific user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "The ID of the user."
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "followers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of usernames of the followers."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_followers(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of followers for a specific user.\n\n    Parameters:\n        user_id (int): The ID of the user.\n\n    Returns:\n        List[str]: A list of usernames of the followers.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-16",
    "snippet": "def get_following_accounts(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of accounts that a specific user is following.\n\n    Parameters:\n        user_id (int): The ID of the user whose following accounts are to be retrieved.\n\n    Returns:\n        List[str]: A list of account names that the user is following.\n    \"\"\"\n    pass",
    "completion-content": "{\n    \"function_snippet\": \"def get_following_accounts(user_id: int) -> List[str]:\\n    \\\"\\\"\\\"\\n    Retrieves a list of accounts that a specific user is following.\\n\\n    Parameters:\\n        user_id (int): The ID of the user whose following accounts are to be retrieved.\\n\\n    Returns:\\n        List[str]: A list of account names that the user is following.\\n    \\\"\\\"\\\"\\n    pass\",\n    \"function_description\": {\n        \"name\": \"get_following_accounts\",\n        \"description\": \"Retrieves a list of accounts that a specific user is following.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The ID of the user whose following accounts are to be retrieved.\"\n                }\n            },\n            \"required\": [\"user_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"list\": {\n                    \"type\": \"string\",\n                    \"description\": \"A list of account names that the user is following.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def get_following_accounts(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of accounts that a specific user is following.\n\n    Parameters:\n        user_id (int): The ID of the user whose following accounts are to be retrieved.\n\n    Returns:\n        List[str]: A list of account names that the user is following.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "get_following_accounts",
            "description": "Retrieves a list of accounts that a specific user is following.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "The ID of the user whose following accounts are to be retrieved."
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "list": {
                        "type": "string",
                        "description": "A list of account names that the user is following."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_following_accounts(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of accounts that a specific user is following.\n\n    Parameters:\n        user_id (int): The ID of the user whose following accounts are to be retrieved.\n\n    Returns:\n        List[str]: A list of account names that the user is following.\n    \"\"\"\n    pass",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-17",
    "snippet": "def search_tweets(\n    keywords: List[str],\n    hashtags: List[str],\n    users: List[str],\n) -> List[str]:\n    \"\"\"\n    Searches for tweets containing specific keywords, hashtags, or mentioning specific users.\n\n    Parameters:\n        keywords (List[str]): A list of keywords to search for in tweets.\n        hashtags (List[str]): A list of hashtags to search for in tweets.\n        users (List[str]): A list of usernames to search for in tweets.\n\n    Returns:\n        List[str]: A list of tweets matching the specified criteria.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def search_tweets(\\n    keywords: List[str],\\n    hashtags: List[str],\\n    users: List[str],\\n) -> List[str]:\\n    \\\"\\\"\\\"\\n    Searches for tweets containing specific keywords, hashtags, or mentioning specific users.\\n\\n    Parameters:\\n        keywords (List[str]): A list of keywords to search for in tweets.\\n        hashtags (List[str]): A list of hashtags to search for in tweets.\\n        users (List[str]): A list of usernames to search for in tweets.\\n\\n    Returns:\\n        List[str]: A list of tweets matching the specified criteria.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"search_tweets\",\n        \"description\": \"Searches for tweets containing specific keywords, hashtags, or mentioning specific users.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"keywords\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of keywords to search for in tweets.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"hashtags\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of hashtags to search for in tweets.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"users\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of usernames to search for in tweets.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"keywords\", \"hashtags\", \"users\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"A list of tweets matching the specified criteria.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def search_tweets(\n    keywords: List[str],\n    hashtags: List[str],\n    users: List[str],\n) -> List[str]:\n    \"\"\"\n    Searches for tweets containing specific keywords, hashtags, or mentioning specific users.\n\n    Parameters:\n        keywords (List[str]): A list of keywords to search for in tweets.\n        hashtags (List[str]): A list of hashtags to search for in tweets.\n        users (List[str]): A list of usernames to search for in tweets.\n\n    Returns:\n        List[str]: A list of tweets matching the specified criteria.\n    \"\"\"\n",
        "function_description": {
            "name": "search_tweets",
            "description": "Searches for tweets containing specific keywords, hashtags, or mentioning specific users.",
            "parameters": {
                "type": "object",
                "properties": {
                    "keywords": {
                        "type": "array",
                        "description": "A list of keywords to search for in tweets.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hashtags": {
                        "type": "array",
                        "description": "A list of hashtags to search for in tweets.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "description": "A list of usernames to search for in tweets.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "keywords",
                    "hashtags",
                    "users"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of tweets matching the specified criteria."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def search_tweets(\n    keywords: List[str],\n    hashtags: List[str],\n    users: List[str],\n) -> List[str]:\n    \"\"\"\n    Searches for tweets containing specific keywords, hashtags, or mentioning specific users.\n\n    Parameters:\n        keywords (List[str]): A list of keywords to search for in tweets.\n        hashtags (List[str]): A list of hashtags to search for in tweets.\n        users (List[str]): A list of usernames to search for in tweets.\n\n    Returns:\n        List[str]: A list of tweets matching the specified criteria.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-18",
    "snippet": "def update_profile_details(\n    description: str,\n    location: str,\n    profile_image: str,\n) -> None:\n    \"\"\"\n    Updates the profile details such as description, location, and profile image.\n\n    Parameters:\n        description (str): The new description for the profile.\n        location (str): The new location for the profile.\n        profile_image (str): The new profile image for the profile.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def update_profile_details(\\n    description: str,\\n    location: str,\\n    profile_image: str,\\n) -> None:\\n    \\\"\\\"\\\"\\n    Updates the profile details such as description, location, and profile image.\\n\\n    Parameters:\\n        description (str): The new description for the profile.\\n        location (str): The new location for the profile.\\n        profile_image (str): The new profile image for the profile.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"update_profile_details\",\n        \"description\": \"Updates the profile details such as description, location, and profile image.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new description for the profile.\"\n                },\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new location for the profile.\"\n                },\n                \"profile_image\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new profile image for the profile.\"\n                }\n            },\n            \"required\": [\"description\", \"location\", \"profile_image\"]\n        },\n        \"returns\": {\n            \"type\": \"none\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def update_profile_details(\n    description: str,\n    location: str,\n    profile_image: str,\n) -> None:\n    \"\"\"\n    Updates the profile details such as description, location, and profile image.\n\n    Parameters:\n        description (str): The new description for the profile.\n        location (str): The new location for the profile.\n        profile_image (str): The new profile image for the profile.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "update_profile_details",
            "description": "Updates the profile details such as description, location, and profile image.",
            "parameters": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The new description for the profile."
                    },
                    "location": {
                        "type": "string",
                        "description": "The new location for the profile."
                    },
                    "profile_image": {
                        "type": "string",
                        "description": "The new profile image for the profile."
                    }
                },
                "required": [
                    "description",
                    "location",
                    "profile_image"
                ]
            },
            "returns": {
                "type": "none"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def update_profile_details(\n    description: str,\n    location: str,\n    profile_image: str,\n) -> None:\n    \"\"\"\n    Updates the profile details such as description, location, and profile image.\n\n    Parameters:\n        description (str): The new description for the profile.\n        location (str): The new location for the profile.\n        profile_image (str): The new profile image for the profile.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-19",
    "snippet": "def retrieve_user_engagement_metrics(\n    tweet_ids: List[str]\n) -> Dict[str, Dict[str, int]]:\n    \"\"\"\n    Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\n\n    Parameters:\n        tweet_ids (List[str]): A list of tweet IDs for which to retrieve metrics.\n\n    Returns:\n        Dict[str, Dict[str, int]]: A dictionary with tweet IDs as keys and a dictionary of engagement metrics as values.\n                                   The engagement metrics dictionary should have 'likes', 'retweets', and 'impressions' as keys.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def retrieve_user_engagement_metrics(\\n    tweet_ids: List[str]\\n) -> Dict[str, Dict[str, int]]:\\n    \\\"\\\"\\\"\\n    Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\\n\\n    Parameters:\\n        tweet_ids (List[str]): A list of tweet IDs for which to retrieve metrics.\\n\\n    Returns:\\n        Dict[str, Dict[str, int]]: A dictionary with tweet IDs as keys and a dictionary of engagement metrics as values.\\n                                   The engagement metrics dictionary should have 'likes', 'retweets', and 'impressions' as keys.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"retrieve_user_engagement_metrics\",\n        \"description\": \"Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of tweet IDs for which to retrieve metrics.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"tweet_ids\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_id\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"likes\": {\n                            \"type\": \"integer\"\n                        },\n                        \"retweets\": {\n                            \"type\": \"integer\"\n                        },\n                        \"impressions\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def retrieve_user_engagement_metrics(\n    tweet_ids: List[str]\n) -> Dict[str, Dict[str, int]]:\n    \"\"\"\n    Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\n\n    Parameters:\n        tweet_ids (List[str]): A list of tweet IDs for which to retrieve metrics.\n\n    Returns:\n        Dict[str, Dict[str, int]]: A dictionary with tweet IDs as keys and a dictionary of engagement metrics as values.\n                                   The engagement metrics dictionary should have 'likes', 'retweets', and 'impressions' as keys.\n    \"\"\"\n",
        "function_description": {
            "name": "retrieve_user_engagement_metrics",
            "description": "Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tweet_ids": {
                        "type": "array",
                        "description": "A list of tweet IDs for which to retrieve metrics.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "tweet_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "object",
                        "properties": {
                            "likes": {
                                "type": "integer"
                            },
                            "retweets": {
                                "type": "integer"
                            },
                            "impressions": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def retrieve_user_engagement_metrics(\n    tweet_ids: List[str]\n) -> Dict[str, Dict[str, int]]:\n    \"\"\"\n    Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\n\n    Parameters:\n        tweet_ids (List[str]): A list of tweet IDs for which to retrieve metrics.\n\n    Returns:\n        Dict[str, Dict[str, int]]: A dictionary with tweet IDs as keys and a dictionary of engagement metrics as values.\n                                   The engagement metrics dictionary should have 'likes', 'retweets', and 'impressions' as keys.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-20",
    "snippet": "def pin_tweet(tweet_id: str) -> bool:\n    \"\"\"\n    Pins a tweet to the top of a user's timeline.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to be pinned.\n\n    Returns:\n        bool: Returns True if the tweet was successfully pinned, False otherwise.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def pin_tweet(tweet_id: str) -> bool:\\n    \\\"\\\"\\\"\\n    Pins a tweet to the top of a user's timeline.\\n\\n    Parameters:\\n        tweet_id (str): The ID of the tweet to be pinned.\\n\\n    Returns:\\n        bool: Returns True if the tweet was successfully pinned, False otherwise.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"pin_tweet\",\n        \"description\": \"Pins a tweet to the top of a user's timeline.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tweet_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the tweet to be pinned.\"\n                }\n            },\n            \"required\": [\"tweet_id\"]\n        },\n        \"returns\": {\n            \"type\": \"bool\",\n            \"description\": \"Returns True if the tweet was successfully pinned, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def pin_tweet(tweet_id: str) -> bool:\n    \"\"\"\n    Pins a tweet to the top of a user's timeline.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to be pinned.\n\n    Returns:\n        bool: Returns True if the tweet was successfully pinned, False otherwise.\n    \"\"\"\n",
        "function_description": {
            "name": "pin_tweet",
            "description": "Pins a tweet to the top of a user's timeline.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "string",
                        "description": "The ID of the tweet to be pinned."
                    }
                },
                "required": [
                    "tweet_id"
                ]
            },
            "returns": {
                "type": "bool",
                "description": "Returns True if the tweet was successfully pinned, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def pin_tweet(tweet_id: str) -> bool:\n    \"\"\"\n    Pins a tweet to the top of a user's timeline.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to be pinned.\n\n    Returns:\n        bool: Returns True if the tweet was successfully pinned, False otherwise.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-21",
    "snippet": "def unpin_tweet():\n    \"\"\"\n    Unpins a tweet from the top of a user's timeline.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def unpin_tweet():\\n    \\\"\\\"\\\"\\n    Unpins a tweet from the top of a user's timeline.\\n    \\\"\\\"\\\"\",\n    \"function_description\": {\n        \"name\": \"unpin_tweet\",\n        \"description\": \"Unpins a tweet from the top of a user's timeline.\",\n        \"parameters\": {},\n        \"returns\": {}\n    }\n}",
    "description": {
        "function_snippet": "def unpin_tweet():\n    \"\"\"\n    Unpins a tweet from the top of a user's timeline.\n    \"\"\"",
        "function_description": {
            "name": "unpin_tweet",
            "description": "Unpins a tweet from the top of a user's timeline.",
            "parameters": {},
            "returns": {}
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def unpin_tweet():\n    \"\"\"\n    Unpins a tweet from the top of a user's timeline.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-22",
    "snippet": "def get_member_lists(user_id: str) -> List[str]:\n    \"\"\"\n    Retrieves the lists that a user is a member of.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[str]: A list of the names of the lists that the user is a member of.\n    \"\"\"\n    # Implementation goes here",
    "completion-content": "{\n    \"function_snippet\": \"def get_member_lists(user_id: str) -> List[str]:\\n    \\\"\\\"\\\"\\n    Retrieves the lists that a user is a member of.\\n\\n    Parameters:\\n        user_id (str): The ID of the user.\\n\\n    Returns:\\n        List[str]: A list of the names of the lists that the user is a member of.\\n    \\\"\\\"\\\"\\n    # Implementation goes here\",\n    \"function_description\": {\n        \"name\": \"get_member_lists\",\n        \"description\": \"Retrieves the lists that a user is a member of.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the user.\"\n                }\n            },\n            \"required\": [\"user_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"List[str]\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"A list of the names of the lists that the user is a member of.\"\n                }\n            }\n        }\n    }\n}",
    "description": {
        "function_snippet": "def get_member_lists(user_id: str) -> List[str]:\n    \"\"\"\n    Retrieves the lists that a user is a member of.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[str]: A list of the names of the lists that the user is a member of.\n    \"\"\"\n    # Implementation goes here",
        "function_description": {
            "name": "get_member_lists",
            "description": "Retrieves the lists that a user is a member of.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user."
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "List[str]": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the names of the lists that the user is a member of."
                    }
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def get_member_lists(user_id: str) -> List[str]:\n    \"\"\"\n    Retrieves the lists that a user is a member of.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[str]: A list of the names of the lists that the user is a member of.\n    \"\"\"\n    # Implementation goes here",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-23",
    "snippet": "def create_new_list() -> List:\n    \"\"\"\n    Creates a new empty list.\n\n    Returns:\n        List: An empty list.\n    \"\"\"\n    return []",
    "completion-content": "{\n    \"function_snippet\": \"def create_new_list() -> List:\\n    \\\"\\\"\\\"\\n    Creates a new empty list.\\n\\n    Returns:\\n        List: An empty list.\\n    \\\"\\\"\\\"\\n    return []\",\n    \"function_description\": {\n        \"name\": \"create_new_list\",\n        \"description\": \"Creates a new empty list.\",\n        \"parameters\": {},\n        \"returns\": {\n            \"type\": \"List\",\n            \"description\": \"An empty list.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def create_new_list() -> List:\n    \"\"\"\n    Creates a new empty list.\n\n    Returns:\n        List: An empty list.\n    \"\"\"\n    return []",
        "function_description": {
            "name": "create_new_list",
            "description": "Creates a new empty list.",
            "parameters": {},
            "returns": {
                "type": "List",
                "description": "An empty list."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def create_new_list() -> List:\n    \"\"\"\n    Creates a new empty list.\n\n    Returns:\n        List: An empty list.\n    \"\"\"\n    return []",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-24",
    "snippet": "def add_users_to_list(users: List[str], new_users: List[str]) -> List[str]:\n    \"\"\"\n    Adds new users to an existing list of users.\n\n    Parameters:\n        users (List[str]): The existing list of users.\n        new_users (List[str]): The list of new users to add.\n\n    Returns:\n        List[str]: The updated list of users.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def add_users_to_list(users: List[str], new_users: List[str]) -> List[str]:\\n    \\\"\\\"\\\"\\n    Adds new users to an existing list of users.\\n\\n    Parameters:\\n        users (List[str]): The existing list of users.\\n        new_users (List[str]): The list of new users to add.\\n\\n    Returns:\\n        List[str]: The updated list of users.\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"add_users_to_list\",\n        \"description\": \"Adds new users to an existing list of users.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"users\": {\n                    \"type\": \"array\",\n                    \"description\": \"The existing list of users.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"new_users\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of new users to add.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"users\", \"new_users\"]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"The updated list of users.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def add_users_to_list(users: List[str], new_users: List[str]) -> List[str]:\n    \"\"\"\n    Adds new users to an existing list of users.\n\n    Parameters:\n        users (List[str]): The existing list of users.\n        new_users (List[str]): The list of new users to add.\n\n    Returns:\n        List[str]: The updated list of users.\n    \"\"\"\n",
        "function_description": {
            "name": "add_users_to_list",
            "description": "Adds new users to an existing list of users.",
            "parameters": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "The existing list of users.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "new_users": {
                        "type": "array",
                        "description": "The list of new users to add.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "users",
                    "new_users"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The updated list of users."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def add_users_to_list(users: List[str], new_users: List[str]) -> List[str]:\n    \"\"\"\n    Adds new users to an existing list of users.\n\n    Parameters:\n        users (List[str]): The existing list of users.\n        new_users (List[str]): The list of new users to add.\n\n    Returns:\n        List[str]: The updated list of users.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-25",
    "snippet": "def remove_users(existing_list: List[str], users_to_remove: List[str]) -> List[str]:\n    \"\"\"\n    Removes users from an existing list.\n\n    Parameters:\n        existing_list (List[str]): The original list of users.\n        users_to_remove (List[str]): The list of users to remove.\n\n    Returns:\n        List[str]: The updated list with the specified users removed.\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def remove_users(existing_list: List[str], users_to_remove: List[str]) -> List[str]:\\n    \\\"\\\"\\\"\\n    Removes users from an existing list.\\n\\n    Parameters:\\n        existing_list (List[str]): The original list of users.\\n        users_to_remove (List[str]): The list of users to remove.\\n\\n    Returns:\\n        List[str]: The updated list with the specified users removed.\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"remove_users\",\n        \"description\": \"Removes users from an existing list.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"existing_list\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"The original list of users.\"\n                },\n                \"users_to_remove\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"The list of users to remove.\"\n                }\n            },\n            \"required\": [\n                \"existing_list\",\n                \"users_to_remove\"\n            ]\n        },\n        \"returns\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"description\": \"The updated list with the specified users removed.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def remove_users(existing_list: List[str], users_to_remove: List[str]) -> List[str]:\n    \"\"\"\n    Removes users from an existing list.\n\n    Parameters:\n        existing_list (List[str]): The original list of users.\n        users_to_remove (List[str]): The list of users to remove.\n\n    Returns:\n        List[str]: The updated list with the specified users removed.\n    \"\"\"\n\n",
        "function_description": {
            "name": "remove_users",
            "description": "Removes users from an existing list.",
            "parameters": {
                "type": "object",
                "properties": {
                    "existing_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The original list of users."
                    },
                    "users_to_remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of users to remove."
                    }
                },
                "required": [
                    "existing_list",
                    "users_to_remove"
                ]
            },
            "returns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The updated list with the specified users removed."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def remove_users(existing_list: List[str], users_to_remove: List[str]) -> List[str]:\n    \"\"\"\n    Removes users from an existing list.\n\n    Parameters:\n        existing_list (List[str]): The original list of users.\n        users_to_remove (List[str]): The list of users to remove.\n\n    Returns:\n        List[str]: The updated list with the specified users removed.\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-26",
    "snippet": "def delete_list(existing_list: List) -> None:\n    \"\"\"\n    Deletes an existing list.\n\n    Parameters:\n        existing_list (List): The list to be deleted.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def delete_list(existing_list: List) -> None:\\n    \\\"\\\"\\\"\\n    Deletes an existing list.\\n\\n    Parameters:\\n        existing_list (List): The list to be deleted.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\\n\",\n    \"function_description\": {\n        \"name\": \"delete_list\",\n        \"description\": \"Deletes an existing list.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"existing_list\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list to be deleted.\"\n                }\n            },\n            \"required\": [\"existing_list\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def delete_list(existing_list: List) -> None:\n    \"\"\"\n    Deletes an existing list.\n\n    Parameters:\n        existing_list (List): The list to be deleted.\n\n    Returns:\n        None\n    \"\"\"\n\n",
        "function_description": {
            "name": "delete_list",
            "description": "Deletes an existing list.",
            "parameters": {
                "type": "object",
                "properties": {
                    "existing_list": {
                        "type": "array",
                        "description": "The list to be deleted."
                    }
                },
                "required": [
                    "existing_list"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def delete_list(existing_list: List) -> None:\n    \"\"\"\n    Deletes an existing list.\n\n    Parameters:\n        existing_list (List): The list to be deleted.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-27",
    "snippet": "def check_follow(user: str, followed_user: str) -> bool:\n    \"\"\"\n    Checks if a user is following another user.\n\n    Parameters:\n        user (str): The username of the user.\n        followed_user (str): The username of the user being followed.\n\n    Returns:\n        bool: True if the user is following the followed_user, False otherwise.\n    \"\"\"\n    # Implementation code to check if user is following followed_user\n    return result",
    "completion-content": "{\n    \"function_snippet\": \"def check_follow(user: str, followed_user: str) -> bool:\\n    \\\"\\\"\\\"\\n    Checks if a user is following another user.\\n\\n    Parameters:\\n        user (str): The username of the user.\\n        followed_user (str): The username of the user being followed.\\n\\n    Returns:\\n        bool: True if the user is following the followed_user, False otherwise.\\n    \\\"\\\"\\\"\\n    # Implementation code to check if user is following followed_user\\n    return result\",\n    \"function_description\": {\n        \"name\": \"check_follow\",\n        \"description\": \"Checks if a user is following another user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user\": {\n                    \"type\": \"string\",\n                    \"description\": \"The username of the user.\"\n                },\n                \"followed_user\": {\n                    \"type\": \"string\",\n                    \"description\": \"The username of the user being followed.\"\n                }\n            },\n            \"required\": [\"user\", \"followed_user\"]\n        },\n        \"returns\": {\n            \"type\": \"bool\",\n            \"description\": \"True if the user is following the followed_user, False otherwise.\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def check_follow(user: str, followed_user: str) -> bool:\n    \"\"\"\n    Checks if a user is following another user.\n\n    Parameters:\n        user (str): The username of the user.\n        followed_user (str): The username of the user being followed.\n\n    Returns:\n        bool: True if the user is following the followed_user, False otherwise.\n    \"\"\"\n    # Implementation code to check if user is following followed_user\n    return result",
        "function_description": {
            "name": "check_follow",
            "description": "Checks if a user is following another user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "The username of the user."
                    },
                    "followed_user": {
                        "type": "string",
                        "description": "The username of the user being followed."
                    }
                },
                "required": [
                    "user",
                    "followed_user"
                ]
            },
            "returns": {
                "type": "bool",
                "description": "True if the user is following the followed_user, False otherwise."
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def check_follow(user: str, followed_user: str) -> bool:\n    \"\"\"\n    Checks if a user is following another user.\n\n    Parameters:\n        user (str): The username of the user.\n        followed_user (str): The username of the user being followed.\n\n    Returns:\n        bool: True if the user is following the followed_user, False otherwise.\n    \"\"\"\n    # Implementation code to check if user is following followed_user\n    return result",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-28",
    "snippet": "def block_user(username: str) -> None:\n    \"\"\"\n    Blocks a specific user.\n\n    Parameters:\n        username (str): The username of the user to be blocked.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def block_user(username: str) -> None:\\n    \\\"\\\"\\\"\\n    Blocks a specific user.\\n\\n    Parameters:\\n        username (str): The username of the user to be blocked.\\n\\n    Returns:\\n        None\\n    \\\"\\\"\\\"\\n\",\n    \"function_description\": {\n        \"name\": \"block_user\",\n        \"description\": \"Blocks a specific user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"username\": {\n                    \"type\": \"string\",\n                    \"description\": \"The username of the user to be blocked.\"\n                }\n            },\n            \"required\": [\"username\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def block_user(username: str) -> None:\n    \"\"\"\n    Blocks a specific user.\n\n    Parameters:\n        username (str): The username of the user to be blocked.\n\n    Returns:\n        None\n    \"\"\"\n",
        "function_description": {
            "name": "block_user",
            "description": "Blocks a specific user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the user to be blocked."
                    }
                },
                "required": [
                    "username"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def block_user(username: str) -> None:\n    \"\"\"\n    Blocks a specific user.\n\n    Parameters:\n        username (str): The username of the user to be blocked.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}
{
    "function_id": "twitter-29",
    "snippet": "def unblock_user(user_id: str) -> None:\n    \"\"\"\n    Unblock a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user to unblock.\n\n    Returns:\n        None\n    \"\"\"",
    "completion-content": "{\n    \"function_snippet\": \"def unblock_user(user_id: str) -> None:\",\n    \"function_description\": {\n        \"name\": \"unblock_user\",\n        \"description\": \"Unblock a specific user.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the user to unblock.\"\n                }\n            },\n            \"required\": [\"user_id\"]\n        },\n        \"returns\": {\n            \"type\": \"None\"\n        }\n    }\n}",
    "description": {
        "function_snippet": "def unblock_user(user_id: str) -> None:",
        "function_description": {
            "name": "unblock_user",
            "description": "Unblock a specific user.",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The ID of the user to unblock."
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "returns": {
                "type": "None"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is a snippet of a python function:\n    {FUNCTION_SNIPPET}    \n\nWrite a description of this function.\nReturn the output as this example:\n    {{\n        \"function_snippet\": \n        {SNIPPET_EXAMPLE},\n        \"function_description\": {DESCRIPTION_EXAMPLE}\n    }}\nDo not return the example!\n",
        "FUNCTION_SNIPPET": "def unblock_user(user_id: str) -> None:\n    \"\"\"\n    Unblock a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user to unblock.\n\n    Returns:\n        None\n    \"\"\"",
        "SNIPPET_EXAMPLE": "\ndef example_function(\n    num_tickets: int,\n    ticket_type: Dict[str, str]\n    event_details: str,\n    attendees: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders event tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        ticket_type (str): The type of ticket.\n        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "DESCRIPTION_EXAMPLE": "\n{\n    \"name\": \"example_function\",\n    \"description\": \"Orders event tickets and returns the total price.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"num_tickets\": {\n                \"type\": \"integer\",\n                \"description\": \"The number of tickets to buy.\"\n            },\n            \"ticket_type\": {\n                \"type\": \"object\",\n                \"description\": \"The type of ticket.\",\n                \"properties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"event_details\": {\n                \"type\": \"object\",\n                \"description\": \"Details about the event, should contain a date in YYYY-MM-DD format.\",\n                \"properties\": {\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": \"Event data in YYYY-MM-DD format.\"\n                    }\n                },\n                \"required\": [\"date\"]\n            },\n            \"attendees\": {\n                \"type\": \"array\",\n                \"description\": \"A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\"\n                        },\n                        \"age\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"name\", \"age\"]\n                }\n            }\n        },\n        \"required\": [\"num_tickets\", \"ticket_type\", \"event_details\", \"attendees\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"total_price\": {\n                \"type\": \"float\",\n                \"description\": \"The total price for the tickets ordered.\"\n            }\n        }\n    }\n}\n"
    }
}

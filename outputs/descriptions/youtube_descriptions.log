user: 
Below is a snippet of a python function:
    def upload_video_to_youtube(
    video_file_path: str,
    title: str,
    description: str,
    category: str,
    tags: List[str],
) -> str:
    """
    Uploads a video file as a video to a YouTube channel.

    Parameters:
        video_file_path (str): The path to the video file.
        title (str): The title of the video.
        description (str): The description of the video.
        category (str): The category of the video.
        tags (List[str]): A list of tags for the video.

    Returns:
        str: The ID of the uploaded video.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def upload_video_to_youtube(\n    video_file_path: str,\n    title: str,\n    description: str,\n    category: str,\n    tags: List[str],\n) -> str:\n    \"\"\"\n    Uploads a video file as a video to a YouTube channel.\n\n    Parameters:\n        video_file_path (str): The path to the video file.\n        title (str): The title of the video.\n        description (str): The description of the video.\n        category (str): The category of the video.\n        tags (List[str]): A list of tags for the video.\n\n    Returns:\n        str: The ID of the uploaded video.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "upload_video_to_youtube",
        "description": "Uploads a video file as a video to a YouTube channel.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_file_path": {
                    "type": "string",
                    "description": "The path to the video file."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the video."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the video."
                },
                "category": {
                    "type": "string",
                    "description": "The category of the video."
                },
                "tags": {
                    "type": "array",
                    "description": "A list of tags for the video.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["video_file_path", "title", "description", "category", "tags"]
        },
        "returns": {
            "type": "string",
            "description": "The ID of the uploaded video."
        }
    }
}

user: 
Below is a snippet of a python function:
    def delete_video_from_channel(
    channel_id: str,
    video_id: str,
) -> bool:
    """
    Deletes a specific video from a channel.

    Parameters:
        channel_id (str): The ID of the channel from which the video should be deleted.
        video_id (str): The ID of the video to be deleted.

    Returns:
        bool: True if the video was successfully deleted, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def delete_video_from_channel(\n    channel_id: str,\n    video_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a specific video from a channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel from which the video should be deleted.\n        video_id (str): The ID of the video to be deleted.\n\n    Returns:\n        bool: True if the video was successfully deleted, False otherwise.\n    \"\"\"\n\n    # Function implementation\n    pass\n",
    "function_description": {
        "name": "delete_video_from_channel",
        "description": "Deletes a specific video from a channel.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string",
                    "description": "The ID of the channel from which the video should be deleted."
                },
                "video_id": {
                    "type": "string",
                    "description": "The ID of the video to be deleted."
                }
            },
            "required": ["channel_id", "video_id"]
        },
        "returns": {
            "type": "bool",
            "description": "True if the video was successfully deleted, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def edit_video_details(
    video_id: str,
    new_title: str,
    new_description: str,
    new_tags: List[str],
) -> Dict[str, str]:
    """
    Edits the details of a video and returns the new details.

    Parameters:
        video_id (str): The ID of the video to edit.
        new_title (str): The new title of the video.
        new_description (str): The new description of the video.
        new_tags (List[str]): A list of new tags for the video.

    Returns:
        Dict[str, str]: A dictionary with the new video details.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def edit_video_details(\n    video_id: str,\n    new_title: str,\n    new_description: str,\n    new_tags: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Edits the details of a video and returns the new details.\n\n    Parameters:\n        video_id (str): The ID of the video to edit.\n        new_title (str): The new title of the video.\n        new_description (str): The new description of the video.\n        new_tags (List[str]): A list of new tags for the video.\n\n    Returns:\n        Dict[str, str]: A dictionary with the new video details.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "edit_video_details",
        "description": "Edits the details of a video and returns the new details.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "description": "The ID of the video to edit."
                },
                "new_title": {
                    "type": "string",
                    "description": "The new title of the video."
                },
                "new_description": {
                    "type": "string",
                    "description": "The new description of the video."
                },
                "new_tags": {
                    "type": "array",
                    "description": "A list of new tags for the video.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["video_id", "new_title", "new_description", "new_tags"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "video_details": {
                    "type": "string",
                    "description": "A dictionary with the new video details."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def set_video_public_time(
    video_id: str,
    schedule_time: str,
) -> bool:
    """
    Sets a specific time for a video to be made public.

    Parameters:
        video_id (str): The unique identifier of the video.
        schedule_time (str): The time to make the video public in YYYY-MM-DD HH:MM:SS format.

    Returns:
        bool: True if the operation was successful, False otherwise.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def set_video_public_time(\n    video_id: str,\n    schedule_time: str,\n) -> bool:\n    \"\"\"\n    Sets a specific time for a video to be made public.\n\n    Parameters:\n        video_id (str): The unique identifier of the video.\n        schedule_time (str): The time to make the video public in YYYY-MM-DD HH:MM:SS format.\n\n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "set_video_public_time",
        "description": "Sets a specific time for a video to be made public.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "description": "The unique identifier of the video."
                },
                "schedule_time": {
                    "type": "string",
                    "description": "The time to make the video public in YYYY-MM-DD HH:MM:SS format."
                }
            },
            "required": ["video_id", "schedule_time"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the operation was successful, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_playlists(
    video_data: List[Dict[str, str]],
    categories: List[str],
) -> Dict[str, List[str]]:
    """
    Generate new playlists for categorizing videos.

    Parameters:
        video_data (List[Dict[str, str]]): A list of dictionaries containing video details.
                                           Each dictionary should have 'title' and 'category' keys.
        categories (List[str]): A list of categories for which playlists will be created.

    Returns:
        Dict[str, List[str]]: A dictionary with categories as keys and list of video titles as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_playlists(\n    video_data: List[Dict[str, str]],\n    categories: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate new playlists for categorizing videos.\n\n    Parameters:\n        video_data (List[Dict[str, str]]): A list of dictionaries containing video details.\n                                           Each dictionary should have 'title' and 'category' keys.\n        categories (List[str]): A list of categories for which playlists will be created.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with categories as keys and list of video titles as values.\n    \"\"\"\n",
    "function_description": {
        "name": "generate_playlists",
        "description": "Generate new playlists for categorizing videos.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_data": {
                    "type": "array",
                    "description": "A list of dictionaries containing video details. Each dictionary should have 'title' and 'category' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "category": {
                                "type": "string"
                            }
                        },
                        "required": ["title", "category"]
                    }
                },
                "categories": {
                    "type": "array",
                    "description": "A list of categories for which playlists will be created.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["video_data", "categories"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def insert_videos_into_playlist(
    playlist_id: str,
    video_ids: List[str],
) -> str:
    """
    Inserts specific videos into an existing playlist.

    Parameters:
        playlist_id (str): The ID of the playlist to which videos need to be added.
        video_ids (List[str]): A list of IDs of the videos to be added to the playlist.

    Returns:
        str: A confirmation message stating successful addition of videos to the playlist.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def insert_videos_into_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> str:\n    \n    Inserts specific videos into an existing playlist.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist to which videos need to be added.\n        video_ids (List[str]): A list of IDs of the videos to be added to the playlist.\n\n    Returns:\n        str: A confirmation message stating successful addition of videos to the playlist.\n",
    "function_description": {
        "name": "insert_videos_into_playlist",
        "description": "Inserts specific videos into an existing playlist.",
        "parameters": {
            "type": "object",
            "properties": {
                "playlist_id": {
                    "type": "string",
                    "description": "The ID of the playlist to which videos need to be added."
                },
                "video_ids": {
                    "type": "array",
                    "description": "A list of IDs of the videos to be added to the playlist.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["playlist_id", "video_ids"]
        },
        "returns": {
            "type": "string",
            "description": "A confirmation message stating successful addition of videos to the playlist."
        }
    }
}

user: 
Below is a snippet of a python function:
    def delete_videos_from_playlist(
    playlist_id: str,
    video_ids: List[str]
) -> Dict[str, str]:
    """
    Deletes videos from a playlist and returns a status message.

    Parameters:
        playlist_id (str): The ID of the playlist.
        video_ids (List[str]): A list of video IDs to be deleted from the playlist.

    Returns:
        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def delete_videos_from_playlist(\n    playlist_id: str,\n    video_ids: List[str]\n) -> Dict[str, str]:\n    \"\"\"\n    Deletes videos from a playlist and returns a status message.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist.\n        video_ids (List[str]): A list of video IDs to be deleted from the playlist.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"\n",
    "function_description": {
        "name": "delete_videos_from_playlist",
        "description": "Deletes videos from a playlist and returns a status message.",
        "parameters": {
            "type": "object",
            "properties": {
                "playlist_id": {
                    "type": "string",
                    "description": "The ID of the playlist."
                },
                "video_ids": {
                    "type": "array",
                    "description": "A list of video IDs to be deleted from the playlist.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["playlist_id", "video_ids"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The status message."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def modify_channel_details(
    channel_id: str,
    new_description: str,
    new_profile_picture: str,
    other_details: Dict[str, str]
) -> None:
    """
    Modifies the channel description, profile picture, and other details.

    Parameters:
        channel_id (str): The ID of the channel to modify.
        new_description (str): The new description for the channel.
        new_profile_picture (str): The new profile picture for the channel. This should be a URL or file path.
        other_details (Dict[str, str]): A dictionary of other details to modify. The keys should be the detail names,
                                         and the values should be the new values for those details.

    Returns:
        None
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def modify_channel_details(\n    channel_id: str,\n    new_description: str,\n    new_profile_picture: str,\n    other_details: Dict[str, str]\n) -> None:\n    \n    \"\"\"\n    Modifies the channel description, profile picture, and other details.\n\n    Parameters:\n        channel_id (str): The ID of the channel to modify.\n        new_description (str): The new description for the channel.\n        new_profile_picture (str): The new profile picture for the channel. This should be a URL or file path.\n        other_details (Dict[str, str]): A dictionary of other details to modify. The keys should be the detail names,\n                                         and the values should be the new values for those details.\n\n    Returns:\n        None\n    \"\"\"\n\n",
    "function_description": {
        "name": "modify_channel_details",
        "description": "Modifies the channel description, profile picture, and other details.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string",
                    "description": "The ID of the channel to modify."
                },
                "new_description": {
                    "type": "string",
                    "description": "The new description for the channel."
                },
                "new_profile_picture": {
                    "type": "string",
                    "description": "The new profile picture for the channel. This should be a URL or file path."
                },
                "other_details": {
                    "type": "object",
                    "description": "A dictionary of other details to modify. The keys should be the detail names, and the values should be the new values for those details.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": ["channel_id", "new_description", "new_profile_picture", "other_details"]
        },
        "returns": {
            "type": "null"
        }
    }
}

user: 
Below is a snippet of a python function:
    def get_video_analytics(
    video_id: str
) -> Dict[str, Union[int, str]]:
    """
    Gets analytics such as views, watch time, and subscriber count for a specific video.

    Parameters:
        video_id (str): The ID of the video.

    Returns:
        Dict[str, Union[int, str]]: A dictionary with 'views', 'watch_time' and 'subscriber_count' as keys, 
                                     and the corresponding values as values.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def get_video_analytics(\n    video_id: str\n) -> Dict[str, Union[int, str]]:\n    \"\"\"\n    Gets analytics such as views, watch time, and subscriber count for a specific video.\n\n    Parameters:\n        video_id (str): The ID of the video.\n\n    Returns:\n        Dict[str, Union[int, str]]: A dictionary with 'views', 'watch_time' and 'subscriber_count' as keys, \n                                     and the corresponding values as values.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "get_video_analytics",
        "description": "Gets analytics such as views, watch time, and subscriber count for a specific video.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "description": "The ID of the video."
                }
            },
            "required": ["video_id"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "views": {
                    "type": "integer"
                },
                "watch_time": {
                    "type": "string"
                },
                "subscriber_count": {
                    "type": "integer"
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def get_channel_analytics(channel_id: str) -> Dict[str, Any]:
    """
    Acquire broader analytics for the entire channel.

    Parameters:
        channel_id (str): The unique identifier for the channel.

    Returns:
        Dict[str, Any]: A dictionary containing various analytics data for the channel.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def get_channel_analytics(channel_id: str) -> Dict[str, Any]:\n    \"\"\"\n    Acquire broader analytics for the entire channel.\n\n    Parameters:\n        channel_id (str): The unique identifier for the channel.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing various analytics data for the channel.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "get_channel_analytics",
        "description": "Acquire broader analytics for the entire channel.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string",
                    "description": "The unique identifier for the channel."
                }
            },
            "required": ["channel_id"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "any",
                "description": "A dictionary containing various analytics data for the channel."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def capture_user_engagement(
    user_id: str,
    post_id: str,
    likes: int,
    dislikes: int,
    comments: List[str],
) -> Dict[str, Union[int, List[str]]]:
    """
    Captures user engagement data such as likes, dislikes, and comments.

    Parameters:
        user_id (str): The ID of the user.
        post_id (str): The ID of the post.
        likes (int): The number of likes the post has.
        dislikes (int): The number of dislikes the post has.
        comments (List[str]): A list of comments on the post.

    Returns:
        Dict[str, Union[int, List[str]]]: A dictionary containing 'likes', 'dislikes', and 'comments' as keys,
                                          and corresponding data as values.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def capture_user_engagement(\nuser_id: str,\npost_id: str,\nlikes: int,\ndislikes: int,\ncomments: List[str],\n) -> Dict[str, Union[int, List[str]]]:\n    \"\"\"\n    Captures user engagement data such as likes, dislikes, and comments.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        post_id (str): The ID of the post.\n        likes (int): The number of likes the post has.\n        dislikes (int): The number of dislikes the post has.\n        comments (List[str]): A list of comments on the post.\n\n    Returns:\n        Dict[str, Union[int, List[str]]]: A dictionary containing 'likes', 'dislikes', and 'comments' as keys,\n                                          and corresponding data as values.\n    \"\"\"\n",
    "function_description": {
        "name": "capture_user_engagement",
        "description": "Captures user engagement data such as likes, dislikes, and comments.",
        "parameters": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "description": "The ID of the user."
                },
                "post_id": {
                    "type": "string",
                    "description": "The ID of the post."
                },
                "likes": {
                    "type": "integer",
                    "description": "The number of likes the post has."
                },
                "dislikes": {
                    "type": "integer",
                    "description": "The number of dislikes the post has."
                },
                "comments": {
                    "type": "array",
                    "description": "A list of comments on the post.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["user_id", "post_id", "likes", "dislikes", "comments"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "likes": {
                    "type": "integer",
                    "description": "The number of likes the post has."
                },
                "dislikes": {
                    "type": "integer",
                    "description": "The number of dislikes the post has."
                },
                "comments": {
                    "type": "array",
                    "description": "A list of comments on the post.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def post_video_comments(
    video_id: str,
    comments: List[str],
    delay: int = 0,
) -> None:
    """
    Automatically posts preset comments or updates in the comment section of a video.

    Parameters:
        video_id (str): The identifier for the video.
        comments (List[str]): A list of comments to be posted.
        delay (int, optional): The delay between posting each comment in seconds. Defaults to 0.

    Returns:
        None
    """
    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def post_video_comments(\n    video_id: str,\n    comments: List[str],\n    delay: int = 0,\n) -> None:\n    """\n    Automatically posts preset comments or updates in the comment section of a video.\n\n    Parameters:\n        video_id (str): The identifier for the video.\n        comments (List[str]): A list of comments to be posted.\n        delay (int, optional): The delay between posting each comment in seconds. Defaults to 0.\n\n    Returns:\n        None\n    """",
    "function_description": {
        "name": "post_video_comments",
        "description": "Automatically posts preset comments or updates in the comment section of a video.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "description": "The identifier for the video."
                },
                "comments": {
                    "type": "array",
                    "description": "A list of comments to be posted.",
                    "items": {
                        "type": "string"
                    }
                },
                "delay": {
                    "type": "integer",
                    "description": "The delay between posting each comment in seconds. Defaults to 0."
                }
            },
            "required": ["video_id", "comments"]
        },
        "returns": {
            "type": "none"
        }
    }
}

user: 
Below is a snippet of a python function:
    def remove_violating_comments(
    comments: List[str],
    guidelines: Dict[str, str]
) -> List[str]:
    """
    Removes comments that violate community guidelines.

    Parameters:
        comments (List[str]): A list of comments to be checked.
        guidelines (Dict[str, str]): A dictionary with keys as violation categories and values as phrases or words 
                                     that violate community guidelines in corresponding category.

    Returns:
        List[str]: A list of comments that do not violate any community guidelines.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def remove_violating_comments(\n    comments: List[str],\n    guidelines: Dict[str, str]\n) -> List[str]:\n    \"\"\"\n    Removes comments that violate community guidelines.\n\n    Parameters:\n        comments (List[str]): A list of comments to be checked.\n        guidelines (Dict[str, str]): A dictionary with keys as violation categories and values as phrases or words \n                                 that violate community guidelines in corresponding category.\n\n    Returns:\n        List[str]: A list of comments that do not violate any community guidelines.\n    \"\"\"\n    ",
    "function_description": {
        "name": "remove_violating_comments",
        "description": "Removes comments that violate community guidelines.",
        "parameters": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "array",
                    "description": "A list of comments to be checked.",
                    "items": {
                        "type": "string"
                    }
                },
                "guidelines": {
                    "type": "object",
                    "description": "A dictionary with keys as violation categories and values as phrases or words that violate community guidelines in corresponding category.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": ["comments", "guidelines"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of comments that do not violate any community guidelines."
        }
    }
}

user: 
Below is a snippet of a python function:
    def generate_auto_reply(
    user_comments: List[str],
    reply_templates: Dict[str, str],
) -> List[str]:
    """
    Generate automated replies to user comments based on predefined reply templates.

    Parameters:
        user_comments (List[str]): List of user comments.
        reply_templates (Dict[str, str]): Dictionary of reply templates. The keys represent 
                                          different categories of comments and the values 
                                          are the corresponding reply templates.
    Returns:
        List[str]: A list of automated replies to the user comments.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def generate_auto_reply(\n    user_comments: List[str],\n    reply_templates: Dict[str, str],\n) -> List[str]:\n    \"\"\"\n    Generate automated replies to user comments based on predefined reply templates.\n\n    Parameters:\n        user_comments (List[str]): List of user comments.\n        reply_templates (Dict[str, str]): Dictionary of reply templates. The keys represent \n                                          different categories of comments and the values \n                                          are the corresponding reply templates.\n    Returns:\n        List[str]: A list of automated replies to the user comments.\n    \"\"\"\n",
    "function_description": {
        "name": "generate_auto_reply",
        "description": "Generate automated replies to user comments based on predefined reply templates.",
        "parameters": {
            "type": "object",
            "properties": {
                "user_comments": {
                    "type": "array",
                    "description": "List of user comments.",
                    "items": {
                        "type": "string"
                    }
                },
                "reply_templates": {
                    "type": "object",
                    "description": "Dictionary of reply templates. The keys represent different categories of comments and the values are the corresponding reply templates.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": ["user_comments", "reply_templates"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of automated replies to the user comments."
        }
    }
}

user: 
Below is a snippet of a python function:
    def control_ad_settings(
    video_id: str,
    ad_settings: Dict[str, Any],
) -> None:
    """
    Controls the ad settings for a specific video.

    Parameters:
        video_id (str): The identifier of the video to adjust ad settings for.
        ad_settings (Dict[str, Any]): A dictionary containing the ad settings to be updated.
                                      The keys represent the setting names and the values are the setting values.
    """
    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def control_ad_settings(video_id: str, ad_settings: Dict[str, Any]) -> None:",
    "function_description": {
        "name": "control_ad_settings",
        "description": "Controls the ad settings for a specific video.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "description": "The identifier of the video to adjust ad settings for."
                },
                "ad_settings": {
                    "type": "object",
                    "description": "A dictionary containing the ad settings to be updated.",
                    "properties": {
                        "setting_name": {
                            "type": "any",
                            "description": "The setting value."
                        }
                    }
                }
            },
            "required": ["video_id", "ad_settings"]
        },
        "returns": {
            "type": "none",
            "description": "This function does not return any value."
        }
    }
}

user: 
Below is a snippet of a python function:
    def fetch_earnings_details(
    account_id: str,
    start_date: str,
    end_date: str,
) -> Dict[str, Union[float, Dict[str, float]]]:
    """
    Fetches earnings details, including estimated revenue and ad performance.

    Parameters:
        account_id (str): The ID of the account to fetch earnings details for.
        start_date (str): The start date to fetch earnings details from in YYYY-MM-DD format.
        end_date (str): The end date to fetch earnings details until in YYYY-MM-DD format.

    Returns:
        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'estimated_revenue' as a key and the estimated 
        revenue as a value, and 'ad_performance' as a key and a dictionary with ad performance details as a value.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def fetch_earnings_details(\n    account_id: str,\n    start_date: str,\n    end_date: str,\n) -> Dict[str, Union[float, Dict[str, float]]]:\n    \"\"\"\n    Fetches earnings details, including estimated revenue and ad performance.\n\n    Parameters:\n        account_id (str): The ID of the account to fetch earnings details for.\n        start_date (str): The start date to fetch earnings details from in YYYY-MM-DD format.\n        end_date (str): The end date to fetch earnings details until in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'estimated_revenue' as a key and the estimated \n        revenue as a value, and 'ad_performance' as a key and a dictionary with ad performance details as a value.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "fetch_earnings_details",
        "description": "Fetches earnings details, including estimated revenue and ad performance.",
        "parameters": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "description": "The ID of the account to fetch earnings details for."
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date to fetch earnings details from in YYYY-MM-DD format."
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date to fetch earnings details until in YYYY-MM-DD format."
                }
            },
            "required": ["account_id", "start_date", "end_date"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "estimated_revenue": {
                    "type": "float",
                    "description": "The estimated revenue."
                },
                "ad_performance": {
                    "type": "object",
                    "properties": {
                        "<metric_name>": {
                            "type": "float",
                            "description": "<description_of_metric>"
                        }
                    }
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def update_channel_billing_info(
    channel_id: str,
    payment_info: Dict[str, str],
    billing_info: Dict[str, str],
) -> bool:
    """
    Updates the payment and billing information for a specific channel.

    Parameters:
        channel_id (str): The id of the channel to update.
        payment_info (Dict[str, str]): A dictionary containing payment information. 
                                        It should have keys like 'card_number', 'expiry_date', 'cvv' etc.
        billing_info (Dict[str, str]): A dictionary containing billing information. 
                                        It should have keys like 'billing_address', 'city', 'zip_code' etc.

    Returns:
        bool: Returns True if the update was successful, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def update_channel_billing_info(\n    channel_id: str,\n    payment_info: Dict[str, str],\n    billing_info: Dict[str, str],\n) -> bool:\n    \"\"\"\n    Updates the payment and billing information for a specific channel.\n\n    Parameters:\n        channel_id (str): The id of the channel to update.\n        payment_info (Dict[str, str]): A dictionary containing payment information. \n                                        It should have keys like 'card_number', 'expiry_date', 'cvv' etc.\n        billing_info (Dict[str, str]): A dictionary containing billing information. \n                                        It should have keys like 'billing_address', 'city', 'zip_code' etc.\n\n    Returns:\n        bool: Returns True if the update was successful, False otherwise.\n    \"\"\"\n\n",
    "function_description": {
        "name": "update_channel_billing_info",
        "description": "Updates the payment and billing information for a specific channel.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string",
                    "description": "The id of the channel to update."
                },
                "payment_info": {
                    "type": "object",
                    "description": "A dictionary containing payment information. It should have keys like 'card_number', 'expiry_date', 'cvv' etc.",
                    "properties": {
                        "card_number": {
                            "type": "string"
                        },
                        "expiry_date": {
                            "type": "string"
                        },
                        "cvv": {
                            "type": "string"
                        }
                    },
                    "required": ["card_number", "expiry_date", "cvv"]
                },
                "billing_info": {
                    "type": "object",
                    "description": "A dictionary containing billing information. It should have keys like 'billing_address', 'city', 'zip_code' etc.",
                    "properties": {
                        "billing_address": {
                            "type": "string"
                        },
                        "city": {
                            "type": "string"
                        },
                        "zip_code": {
                            "type": "string"
                        }
                    },
                    "required": ["billing_address", "city", "zip_code"]
                }
            },
            "required": ["channel_id", "payment_info", "billing_info"]
        },
        "returns": {
            "type": "boolean",
            "description": "Returns True if the update was successful, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def upload_caption_files(
    video_ids: List[str],
    caption_files: List[str],
) -> Dict[str, str]:
    """
    Uploads caption files to the corresponding videos and returns a status report.

    Parameters:
        video_ids (List[str]): The list of video IDs.
        caption_files (List[str]): The list of paths to the caption files.

    Returns:
        Dict[str, str]: A dictionary with video IDs as keys and the upload status as values.
                        The status could be 'success' or 'failure'.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def upload_caption_files(\n    video_ids: List[str],\n    caption_files: List[str],\n) -> Dict[str, str]:\n    \n    \"\"\"\n    Uploads caption files to the corresponding videos and returns a status report.\n\n    Parameters:\n        video_ids (List[str]): The list of video IDs.\n        caption_files (List[str]): The list of paths to the caption files.\n\n    Returns:\n        Dict[str, str]: A dictionary with video IDs as keys and the upload status as values.\n                        The status could be 'success' or 'failure'.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "upload_caption_files",
        "description": "Uploads caption files to the corresponding videos and returns a status report.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_ids": {
                    "type": "array",
                    "description": "The list of video IDs.",
                    "items": {
                        "type": "string"
                    }
                },
                "caption_files": {
                    "type": "array",
                    "description": "The list of paths to the caption files.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["video_ids", "caption_files"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "video_ids": {
                    "type": "string",
                    "description": "A dictionary with video IDs as keys."
                },
                "status": {
                    "type": "string",
                    "description": "The upload status. Could be 'success' or 'failure'."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def update_captions(
    captions: Dict[str, str],
    new_captions: Dict[str, str]
) -> Dict[str, str]:
    """
    Replaces or updates existing captions.

    Parameters:
        captions (Dict[str, str]): A dictionary of existing captions. Each key is the caption identifier 
                                   and the value is the caption text.
        new_captions (Dict[str, str]): A dictionary of new captions to be added or existing captions to be updated. 
                                        Each key is the caption identifier and the value is the new caption text.

    Returns:
        Dict[str, str]: A dictionary of updated captions.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def update_captions(\n    captions: Dict[str, str],\n    new_captions: Dict[str, str]\n) -> Dict[str, str]:\n    \n    \"\"\"\n    Replaces or updates existing captions.\n\n    Parameters:\n        captions (Dict[str, str]): A dictionary of existing captions. Each key is the caption identifier\n                                   and the value is the caption text.\n        new_captions (Dict[str, str]): A dictionary of new captions to be added or existing captions to be updated.\n                                        Each key is the caption identifier and the value is the new caption text.\n\n    Returns:\n        Dict[str, str]: A dictionary of updated captions.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "update_captions",
        "description": "Replaces or updates existing captions.",
        "parameters": {
            "type": "object",
            "properties": {
                "captions": {
                    "type": "object",
                    "description": "A dictionary of existing captions. Each key is the caption identifier and the value is the caption text.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "new_captions": {
                    "type": "object",
                    "description": "A dictionary of new captions to be added or existing captions to be updated. Each key is the caption identifier and the value is the new caption text.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "captions",
                "new_captions"
            ]
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "string"
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def remove_captions_from_video(
    video_file: str,
    output_file: str,
) -> str:
    """
    Removes captions from a specific video and saves the video without captions to a new file.

    Parameters:
        video_file (str): The path to the video file from which to remove captions.
        output_file (str): The path to the file where the video without captions should be saved.

    Returns:
        str: A message indicating whether the operation was successful or not.
    """
    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def remove_captions_from_video(\n    video_file: str,\n    output_file: str,\n) -> str:\n    \"\"\"\n    Removes captions from a specific video and saves the video without captions to a new file.\n\n    Parameters:\n        video_file (str): The path to the video file from which to remove captions.\n        output_file (str): The path to the file where the video without captions should be saved.\n\n    Returns:\n        str: A message indicating whether the operation was successful or not.\n    \"\"\"",
    "function_description": {
        "name": "remove_captions_from_video",
        "description": "Removes captions from a specific video and saves the video without captions to a new file.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_file": {
                    "type": "string",
                    "description": "The path to the video file from which to remove captions."
                },
                "output_file": {
                    "type": "string",
                    "description": "The path to the file where the video without captions should be saved."
                }
            },
            "required": ["video_file", "output_file"]
        },
        "returns": {
            "type": "string",
            "description": "A message indicating whether the operation was successful or not."
        }
    }
}

user: 
Below is a snippet of a python function:
    def search_videos(
    keywords: List[str],
    criteria: Dict[str, str],
) -> List[Dict[str, Any]]:
    """
    Conducts a search for videos based on specific keywords or criteria.

    Parameters:
        keywords (List[str]): The list of keywords to search for in the video titles and descriptions.
        criteria (Dict[str, str]): A dictionary of specific criteria to narrow down the search.
                                   The keys can be things like 'duration', 'upload_date', etc.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries where each dictionary represents a video that matches the search.
                              Each dictionary should contain 'title', 'url', 'duration', 'upload_date', and 'views'.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def search_videos(\n    keywords: List[str],\n    criteria: Dict[str, str],\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Conducts a search for videos based on specific keywords or criteria.\n\n    Parameters:\n        keywords (List[str]): The list of keywords to search for in the video titles and descriptions.\n        criteria (Dict[str, str]): A dictionary of specific criteria to narrow down the search.\n                                   The keys can be things like 'duration', 'upload_date', etc.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries where each dictionary represents a video that matches the search.\n                              Each dictionary should contain 'title', 'url', 'duration', 'upload_date', and 'views'.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "search_videos",
        "description": "Conducts a search for videos based on specific keywords or criteria.",
        "parameters": {
            "type": "object",
            "properties": {
                "keywords": {
                    "type": "array",
                    "description": "The list of keywords to search for in the video titles and descriptions.",
                    "items": {
                        "type": "string"
                    }
                },
                "criteria": {
                    "type": "object",
                    "description": "A dictionary of specific criteria to narrow down the search. The keys can be things like 'duration', 'upload_date', etc.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": ["keywords", "criteria"]
        }
    }
}

user: 
Below is a snippet of a python function:
    def retrieve_video_by_id(video_id: str) -> Dict[str, Union[str, int, float]]:
    """
    Retrieves a specific video using its unique ID.
    
    Parameters:
        video_id (str): The unique ID of the video.
        
    Returns:
        Dict[str, Union[str, int, float]]: A dictionary containing video details such as 'title', 
                                            'duration', 'views', etc.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def retrieve_video_by_id(video_id: str) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Retrieves a specific video using its unique ID.\n    \n    Parameters:\n        video_id (str): The unique ID of the video.\n        \n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing video details such as 'title', \n                                            'duration', 'views', etc.\n    \"\"\"",
    "function_description": {
        "name": "retrieve_video_by_id",
        "description": "Retrieves a specific video using its unique ID.",
        "parameters": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "description": "The unique ID of the video."
                }
            },
            "required": ["video_id"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "views": {
                    "type": "integer"
                },
                "etc.": {
                    "type": "float"
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def fetch_trending_videos(
    region: str,
    category: str,
) -> List[Dict[str, str]]:
    """
    Fetches a list of currently trending videos in a specific region or category.

    Parameters:
        region (str): The region to fetch trending videos from.
        category (str): The category of videos to fetch.

    Returns:
        List[Dict[str, str]]: A list of dictionaries, each representing a trending video. Each dictionary
                              should have 'title', 'video_id', 'views', 'likes', 'dislikes', and 'comments' keys.
    """
    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def fetch_trending_videos(\n    region: str,\n    category: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Fetches a list of currently trending videos in a specific region or category.\n\n    Parameters:\n        region (str): The region to fetch trending videos from.\n        category (str): The category of videos to fetch.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries, each representing a trending video. Each dictionary\n                              should have 'title', 'video_id', 'views', 'likes', 'dislikes', and 'comments' keys.\n    \"\"\"",
    "function_description": {
        "name": "fetch_trending_videos",
        "description": "Fetches a list of currently trending videos in a specific region or category.",
        "parameters": {
            "type": "object",
            "properties": {
                "region": {
                    "type": "string",
                    "description": "The region to fetch trending videos from."
                },
                "category": {
                    "type": "string",
                    "description": "The category of videos to fetch."
                }
            },
            "required": ["region", "category"]
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "video_id": {
                        "type": "string"
                    },
                    "views": {
                        "type": "string"
                    },
                    "likes": {
                        "type": "string"
                    },
                    "dislikes": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string"
                    }
                },
                "required": ["title", "video_id", "views", "likes", "dislikes", "comments"]
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def setup_live_stream_event(
    event_title: str,
    start_time: str,
    end_time: str,
    description: str,
    location: str,
) -> Dict[str, str]:
    """
    Sets up a future live stream event and returns the details.

    Parameters:
        event_title (str): The title of the event.
        start_time (str): The start time of the event in YYYY-MM-DD HH:MM:SS format.
        end_time (str): The end time of the event in YYYY-MM-DD HH:MM:SS format.
        description (str): A short description about the event.
        location (str): The location or platform where the event will be streamed.

    Returns:
        Dict[str, str]: A dictionary with 'event_id' as a key and the unique event identifier as a value.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def setup_live_stream_event(\n    event_title: str,\n    start_time: str,\n    end_time: str,\n    description: str,\n    location: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Sets up a future live stream event and returns the details.\n\n    Parameters:\n        event_title (str): The title of the event.\n        start_time (str): The start time of the event in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The end time of the event in YYYY-MM-DD HH:MM:SS format.\n        description (str): A short description about the event.\n        location (str): The location or platform where the event will be streamed.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'event_id' as a key and the unique event identifier as a value.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "setup_live_stream_event",
        "description": "Sets up a future live stream event and returns the details.",
        "parameters": {
            "type": "object",
            "properties": {
                "event_title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "start_time": {
                    "type": "string",
                    "description": "The start time of the event in YYYY-MM-DD HH:MM:SS format."
                },
                "end_time": {
                    "type": "string",
                    "description": "The end time of the event in YYYY-MM-DD HH:MM:SS format."
                },
                "description": {
                    "type": "string",
                    "description": "A short description about the event."
                },
                "location": {
                    "type": "string",
                    "description": "The location or platform where the event will be streamed."
                }
            },
            "required": ["event_title", "start_time", "end_time", "description", "location"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string",
                    "description": "The unique event identifier."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def control_live_stream(
    stream_id: str,
    action: str,
) -> None:
    """
    Initiate or end a live stream.

    Parameters:
        stream_id (str): The unique identifier of the stream.
        action (str): The action to perform, either 'start' or 'stop'.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def control_live_stream(\n    stream_id: str,\n    action: str,\n) -> None:\n    \"\"\"\n    Initiate or end a live stream.\n\n    Parameters:\n        stream_id (str): The unique identifier of the stream.\n        action (str): The action to perform, either 'start' or 'stop'.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "control_live_stream",
        "description": "Initiate or end a live stream.",
        "parameters": {
            "type": "object",
            "properties": {
                "stream_id": {
                    "type": "string",
                    "description": "The unique identifier of the stream."
                },
                "action": {
                    "type": "string",
                    "description": "The action to perform, either 'start' or 'stop'."
                }
            },
            "required": ["stream_id", "action"]
        },
        "returns": {
            "type": "null"
        }
    }
}

user: 
Below is a snippet of a python function:
    def manage_live_stream_chat(
    stream_id: str,
    auto_post_messages: List[str],
    moderation_rules: Dict[str, Any],
    metric_collection: bool
) -> Dict[str, Any]:
    """
    Manages a live stream chat by automatically posting messages, moderating comments, and collecting metrics.

    Parameters:
        stream_id (str): The ID of the live stream.
        auto_post_messages (List[str]): A list of messages to be automatically posted in the chat.
        moderation_rules (Dict[str, Any]): A dictionary of rules for moderating comments. 
                                            The structure of this dictionary would depend on the specific 
                                            implementation and requirements.
        metric_collection (bool): A flag indicating whether to collect metrics from the chat.

    Returns:
        Dict[str, Any]: A dictionary containing the results of the chat management. The structure of this 
                        dictionary would depend on the specific implementation and requirements.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def manage_live_stream_chat(\nstream_id: str,\nauto_post_messages: List[str],\nmoderation_rules: Dict[str, Any],\nmetric_collection: bool\n) -> Dict[str, Any]:\n    \"\"\"\n    Manages a live stream chat by automatically posting messages, moderating comments, and collecting metrics.\n\n    Parameters:\n        stream_id (str): The ID of the live stream.\n        auto_post_messages (List[str]): A list of messages to be automatically posted in the chat.\n        moderation_rules (Dict[str, Any]): A dictionary of rules for moderating comments. \n                                            The structure of this dictionary would depend on the specific \n                                            implementation and requirements.\n        metric_collection (bool): A flag indicating whether to collect metrics from the chat.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the results of the chat management. The structure of this \n                        dictionary would depend on the specific implementation and requirements.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "manage_live_stream_chat",
        "description": "Manages a live stream chat by automatically posting messages, moderating comments, and collecting metrics.",
        "parameters": {
            "type": "object",
            "properties": {
                "stream_id": {
                    "type": "string",
                    "description": "The ID of the live stream."
                },
                "auto_post_messages": {
                    "type": "array",
                    "description": "A list of messages to be automatically posted in the chat.",
                    "items": {
                        "type": "string"
                    }
                },
                "moderation_rules": {
                    "type": "object",
                    "description": "A dictionary of rules for moderating comments. The structure of this dictionary would depend on the specific implementation and requirements."
                },
                "metric_collection": {
                    "type": "boolean",
                    "description": "A flag indicating whether to collect metrics from the chat."
                }
            },
            "required": ["stream_id", "auto_post_messages", "moderation_rules", "metric_collection"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "type": "object",
                "description": "A dictionary containing the results of the chat management. The structure of this dictionary would depend on the specific implementation and requirements."
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def subscribe_to_youtube_channels(
    channel_ids: List[str],
    user_token: str,
) -> Dict[str, str]:
    """
    Automates the process of subscribing to other YouTube channels.

    Parameters:
        channel_ids (List[str]): The list of channel IDs to subscribe to.
        user_token (str): The user's authorization token.

    Returns:
        Dict[str, str]: A dictionary with 'status' as a key and the subscription status as a value.
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def subscribe_to_youtube_channels(channel_ids: List[str], user_token: str) -> Dict[str, str]:\n    \"\"\"\n    Automates the process of subscribing to other YouTube channels.\n\n    Parameters:\n        channel_ids (List[str]): The list of channel IDs to subscribe to.\n        user_token (str): The user's authorization token.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the subscription status as a value.\n    \"\"\"\n    pass",
    "function_description": {
        "name": "subscribe_to_youtube_channels",
        "description": "Automates the process of subscribing to other YouTube channels.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel_ids": {
                    "type": "array",
                    "description": "The list of channel IDs to subscribe to.",
                    "items": {
                        "type": "string"
                    }
                },
                "user_token": {
                    "type": "string",
                    "description": "The user's authorization token."
                }
            },
            "required": ["channel_ids", "user_token"]
        },
        "returns": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The subscription status."
                }
            }
        }
    }
}

user: 
Below is a snippet of a python function:
    def remove_existing_subscriptions(
    user_id: int,
    subscriptions: List[str],
) -> bool:
    """
    Removes existing subscriptions for a specific user.

    Parameters:
        user_id (int): The id of the user.
        subscriptions (List[str]): A list of subscriptions to be removed.

    Returns:
        bool: True if the operation was successful, False otherwise.
    """    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def remove_existing_subscriptions(\n    user_id: int,\n    subscriptions: List[str],\n) -> bool:\n    \"\"\"\n    Removes existing subscriptions for a specific user.\n\n    Parameters:\n        user_id (int): The id of the user.\n        subscriptions (List[str]): A list of subscriptions to be removed.\n\n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\"\n",
    "function_description": {
        "name": "remove_existing_subscriptions",
        "description": "Removes existing subscriptions for a specific user.",
        "parameters": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer",
                    "description": "The id of the user."
                },
                "subscriptions": {
                    "type": "array",
                    "description": "A list of subscriptions to be removed.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": ["user_id", "subscriptions"]
        },
        "returns": {
            "type": "boolean",
            "description": "True if the operation was successful, False otherwise."
        }
    }
}

user: 
Below is a snippet of a python function:
    def alert_subscribers(
    new_content: bool,
    live_stream_starting: bool,
    subscribers: List[Dict[str, str]],
) -> None:
    """
    Alerts subscribers when new content is available or when a live stream is starting.

    Parameters:
        new_content (bool): A boolean indicating whether new content is available.
        live_stream_starting (bool): A boolean indicating whether a live stream is starting.
        subscribers (List[Dict[str, str]]): A list of dictionaries containing subscriber details.
                                             Each dictionary should have 'email' and 'name' keys.

    Returns:
        None
    """
    pass    

Write a description of this function.
Return the output as this example:
    {
        "function_snippet": 
        
def example_function(
    num_tickets: int,
    ticket_type: Dict[str, str]
    event_details: str,
    attendees: List[Dict[str, str]],
) -> Dict[str, float]:
    """
    Orders event tickets and returns the total price.

    Parameters:
        num_tickets (int): The number of tickets to buy.
        ticket_type (str): The type of ticket.
        event_details (Dict[str, str]): Details aobut the event, should contain a date in YYYY-MM-DD format.
        passengers (List[Dict[str, str]]): A list of dictionaries containing attendee details.
                                          Each dictionary should have 'name' and 'age' keys.

    Returns:
        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.
    """
,
        "function_description": 
{
    "name": "example_function",
    "description": "Orders event tickets and returns the total price.",
    "parameters": {
        "type": "object",
        "properties": {
            "num_tickets": {
                "type": "integer",
                "description": "The number of tickets to buy."
            },
            "ticket_type": {
                "type": "object",
                "description": "The type of ticket.",
                "properties": {
                    "type": "string"
                }
            },
            "event_details": {
                "type": "object",
                "description": "Details about the event, should contain a date in YYYY-MM-DD format.",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Event data in YYYY-MM-DD format."
                    }
                },
                "required": ["date"]
            },
            "attendees": {
                "type": "array",
                "description": "A list of dictionaries containing attendee details. Each dictionary should have 'name' and 'age' keys.",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "age": {
                            "type": "string"
                        }
                    },
                    "required": ["name", "age"]
                }
            }
        },
        "required": ["num_tickets", "ticket_type", "event_details", "attendees"]
    },
    "returns": {
        "type": "object",
        "properties": {
            "total_price": {
                "type": "float",
                "description": "The total price for the tickets ordered."
            }
        }
    }
}

    }
Do not return the example!


assistant: {
    "function_snippet": "def alert_subscribers(\n    new_content: bool,\n    live_stream_starting: bool,\n    subscribers: List[Dict[str, str]],\n) -> None:\n    \"\"\"\n    Alerts subscribers when new content is available or when a live stream is starting.\n\n    Parameters:\n        new_content (bool): A boolean indicating whether new content is available.\n        live_stream_starting (bool): A boolean indicating whether a live stream is starting.\n        subscribers (List[Dict[str, str]]): A list of dictionaries containing subscriber details.\n                                             Each dictionary should have 'email' and 'name' keys.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "function_description": {
        "name": "alert_subscribers",
        "description": "Alerts subscribers when new content is available or when a live stream is starting.",
        "parameters": {
            "type": "object",
            "properties": {
                "new_content": {
                    "type": "boolean",
                    "description": "A boolean indicating whether new content is available."
                },
                "live_stream_starting": {
                    "type": "boolean",
                    "description": "A boolean indicating whether a live stream is starting."
                },
                "subscribers": {
                    "type": "array",
                    "description": "A list of dictionaries containing subscriber details. Each dictionary should have 'email' and 'name' keys.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "email": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "required": ["email", "name"]
                    }
                }
            },
            "required": ["new_content", "live_stream_starting", "subscribers"]
        },
        "returns": {
            "type": "none"
        }
    }
}


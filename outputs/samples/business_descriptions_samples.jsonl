{
    "function_id": "business-1",
    "description": {
        "function_snippet": "def schedule_meeting(\nmeeting_date: str,\nmeeting_time: str,\nattendees: List[str],\nmeeting_agenda: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        attendees (List[str]): A list of email addresses of the attendees.\n        meeting_agenda (str): A brief description of the meeting agenda.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\n    \"\"\"",
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a meeting and returns the meeting details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "attendees": {
                        "type": "array",
                        "description": "A list of email addresses of the attendees.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_agenda": {
                        "type": "string",
                        "description": "A brief description of the meeting agenda."
                    }
                },
                "required": [
                    "meeting_date",
                    "meeting_time",
                    "attendees",
                    "meeting_agenda"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "meeting_id": {
                        "type": "string",
                        "description": "The ID of the scheduled meeting."
                    },
                    "meeting_link": {
                        "type": "string",
                        "description": "The link to the scheduled meeting."
                    },
                    "confirmation_status": {
                        "type": "string",
                        "description": "The confirmation status of the meeting."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"schedule_meeting\",\n        \"description\": \"Schedules a meeting and returns the meeting details.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The date of the meeting in YYYY-MM-DD format.\"\n                },\n                \"meeting_time\": {\n                    \"type\": \"string\",\n                    \"description\": \"The time of the meeting in HH:MM format.\"\n                },\n                \"attendees\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of email addresses of the attendees.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"meeting_agenda\": {\n                    \"type\": \"string\",\n                    \"description\": \"A brief description of the meeting agenda.\"\n                }\n            },\n            \"required\": [\"meeting_date\", \"meeting_time\", \"attendees\", \"meeting_agenda\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the scheduled meeting.\"\n                },\n                \"meeting_link\": {\n                    \"type\": \"string\",\n                    \"description\": \"The link to the scheduled meeting.\"\n                },\n                \"confirmation_status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The confirmation status of the meeting.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me schedule a meeting?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! Please provide the following details for the meeting:\\n- The date of the meeting in YYYY-MM-DD format.\\n- The time of the meeting in HH:MM format.\\n- A list of email addresses of the attendees.\\n- A brief description of the meeting agenda.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The meeting will be on March 15, 2022, at 10:00 AM. The attendees are ['email1@example.com', 'email2@example.com']. The agenda is to discuss project updates.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for the details. I will schedule the meeting and provide you with the meeting ID, meeting link, and confirmation status.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"schedule_meeting\",\n        \"parameters\": {\n            \"meeting_date\": \"2022-03-15\",\n            \"meeting_time\": \"10:00 AM\",\n            \"attendees\": [\"email1@example.com\", \"email2@example.com\"],\n            \"meeting_agenda\": \"Discuss project updates\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a meeting and returns the meeting details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "attendees": {
                        "type": "array",
                        "description": "A list of email addresses of the attendees.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_agenda": {
                        "type": "string",
                        "description": "A brief description of the meeting agenda."
                    }
                },
                "required": [
                    "meeting_date",
                    "meeting_time",
                    "attendees",
                    "meeting_agenda"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "meeting_id": {
                        "type": "string",
                        "description": "The ID of the scheduled meeting."
                    },
                    "meeting_link": {
                        "type": "string",
                        "description": "The link to the scheduled meeting."
                    },
                    "confirmation_status": {
                        "type": "string",
                        "description": "The confirmation status of the meeting."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me schedule a meeting?"
            },
            {
                "role": "assistant",
                "text": "Of course! Please provide the following details for the meeting:\n- The date of the meeting in YYYY-MM-DD format.\n- The time of the meeting in HH:MM format.\n- A list of email addresses of the attendees.\n- A brief description of the meeting agenda."
            },
            {
                "role": "user",
                "text": "The meeting will be on March 15, 2022, at 10:00 AM. The attendees are ['email1@example.com', 'email2@example.com']. The agenda is to discuss project updates."
            },
            {
                "role": "assistant",
                "text": "Thank you for the details. I will schedule the meeting and provide you with the meeting ID, meeting link, and confirmation status."
            }
        ],
        "function_call": {
            "function_name": "schedule_meeting",
            "parameters": {
                "meeting_date": "2022-03-15",
                "meeting_time": "10:00 AM",
                "attendees": [
                    "email1@example.com",
                    "email2@example.com"
                ],
                "meeting_agenda": "Discuss project updates"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def schedule_meeting(\\nmeeting_date: str,\\nmeeting_time: str,\\nattendees: List[str],\\nmeeting_agenda: str,\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Schedules a meeting and returns the meeting details.\\n\\n    Parameters:\\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\\n        meeting_time (str): The time of the meeting in HH:MM format.\\n        attendees (List[str]): A list of email addresses of the attendees.\\n        meeting_agenda (str): A brief description of the meeting agenda.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with \\'meeting_id\\', \\'meeting_link\\' and \\'confirmation_status\\' as keys.\\n    \"\"\"', 'function_description': {'name': 'schedule_meeting', 'description': 'Schedules a meeting and returns the meeting details.', 'parameters': {'type': 'object', 'properties': {'meeting_date': {'type': 'string', 'description': 'The date of the meeting in YYYY-MM-DD format.'}, 'meeting_time': {'type': 'string', 'description': 'The time of the meeting in HH:MM format.'}, 'attendees': {'type': 'array', 'description': 'A list of email addresses of the attendees.', 'items': {'type': 'string'}}, 'meeting_agenda': {'type': 'string', 'description': 'A brief description of the meeting agenda.'}}, 'required': ['meeting_date', 'meeting_time', 'attendees', 'meeting_agenda']}, 'returns': {'type': 'object', 'properties': {'meeting_id': {'type': 'string', 'description': 'The ID of the scheduled meeting.'}, 'meeting_link': {'type': 'string', 'description': 'The link to the scheduled meeting.'}, 'confirmation_status': {'type': 'string', 'description': 'The confirmation status of the meeting.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-2",
    "description": {
        "function_snippet": "def generate_sales_report(\n    start_date: str,\n    end_date: str,\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report for a given date range.\n\n    Parameters:\n        start_date (str): The start date of the report in YYYY-MM-DD format.\n        end_date (str): The end date of the report in YYYY-MM-DD format.\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"\n",
        "function_description": {
            "name": "generate_sales_report",
            "description": "Generates a sales report for a given date range.",
            "parameters": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the report in YYYY-MM-DD format."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "The end date of the report in YYYY-MM-DD format."
                    },
                    "sales_data": {
                        "type": "array",
                        "description": "A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "product": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": "integer"
                                },
                                "price": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "product",
                                "quantity",
                                "price"
                            ]
                        }
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "sales_data"
                ]
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"generate_sales_report\",\n        \"description\": \"Generates a sales report for a given date range.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the report in YYYY-MM-DD format.\"\n                },\n                \"end_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The end date of the report in YYYY-MM-DD format.\"\n                },\n                \"sales_data\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"product\": {\"type\": \"string\"},\n                            \"quantity\": {\"type\": \"integer\"},\n                            \"price\": {\"type\": \"number\"}\n                        },\n                        \"required\": [\"product\", \"quantity\", \"price\"]\n                    }\n                }\n            },\n            \"required\": [\"start_date\", \"end_date\", \"sales_data\"]\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you generate a sales report for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the start date and end date of the report in YYYY-MM-DD format.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The start date is '2022-01-01' and the end date is '2022-01-31'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great! Now, could you please provide me with the sales data? It should be a list of dictionaries, where each dictionary contains the 'product', 'quantity', and 'price' keys.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here is the sales data: [{'product': 'Product A', 'quantity': 10, 'price': 5.99}, {'product': 'Product B', 'quantity': 5, 'price': 9.99}]\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you. I will now generate the sales report for the given date range and sales data.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_sales_report\",\n        \"parameters\": {\n            \"start_date\": \"2022-01-01\",\n            \"end_date\": \"2022-01-31\",\n            \"sales_data\": [\n                {\n                    \"product\": \"Product A\",\n                    \"quantity\": 10,\n                    \"price\": 5.99\n                },\n                {\n                    \"product\": \"Product B\",\n                    \"quantity\": 5,\n                    \"price\": 9.99\n                }\n            ]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "generate_sales_report",
            "description": "Generates a sales report for a given date range.",
            "parameters": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the report in YYYY-MM-DD format."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "The end date of the report in YYYY-MM-DD format."
                    },
                    "sales_data": {
                        "type": "array",
                        "description": "A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "product": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": "integer"
                                },
                                "price": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "product",
                                "quantity",
                                "price"
                            ]
                        }
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "sales_data"
                ]
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you generate a sales report for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the start date and end date of the report in YYYY-MM-DD format."
            },
            {
                "role": "user",
                "text": "The start date is '2022-01-01' and the end date is '2022-01-31'."
            },
            {
                "role": "assistant",
                "text": "Great! Now, could you please provide me with the sales data? It should be a list of dictionaries, where each dictionary contains the 'product', 'quantity', and 'price' keys."
            },
            {
                "role": "user",
                "text": "Here is the sales data: [{'product': 'Product A', 'quantity': 10, 'price': 5.99}, {'product': 'Product B', 'quantity': 5, 'price': 9.99}]"
            },
            {
                "role": "assistant",
                "text": "Thank you. I will now generate the sales report for the given date range and sales data."
            }
        ],
        "function_call": {
            "function_name": "generate_sales_report",
            "parameters": {
                "start_date": "2022-01-01",
                "end_date": "2022-01-31",
                "sales_data": [
                    {
                        "product": "Product A",
                        "quantity": 10,
                        "price": 5.99
                    },
                    {
                        "product": "Product B",
                        "quantity": 5,
                        "price": 9.99
                    }
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def generate_sales_report(\\n    start_date: str,\\n    end_date: str,\\n    sales_data: List[Dict[str, Union[str, int, float]]]\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Generates a sales report for a given date range.\\n\\n    Parameters:\\n        start_date (str): The start date of the report in YYYY-MM-DD format.\\n        end_date (str): The end date of the report in YYYY-MM-DD format.\\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\\n                                                              Each dictionary should have \\'product\\', \\'quantity\\' and \\'price\\' keys.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with \\'total_sales\\' as a key and the total sales as a value.\\n    \"\"\"\\n', 'function_description': {'name': 'generate_sales_report', 'description': 'Generates a sales report for a given date range.', 'parameters': {'type': 'object', 'properties': {'start_date': {'type': 'string', 'description': 'The start date of the report in YYYY-MM-DD format.'}, 'end_date': {'type': 'string', 'description': 'The end date of the report in YYYY-MM-DD format.'}, 'sales_data': {'type': 'array', 'description': \"A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.\", 'items': {'type': 'object', 'properties': {'product': {'type': 'string'}, 'quantity': {'type': 'integer'}, 'price': {'type': 'number'}}, 'required': ['product', 'quantity', 'price']}}}, 'required': ['start_date', 'end_date', 'sales_data']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-3",
    "description": {
        "function_snippet": "def perform_employee_evaluation(\nemployee_id: str,\nperformance_metrics: Dict[str, Union[int, float]]\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\n\n    Parameters:\n        employee_id (str): The unique identifier of the employee to be evaluated.\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\n                                                            Each key represents a metric, and the value is the score.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\n    \"\"\"\n",
        "function_description": {
            "name": "perform_employee_evaluation",
            "description": "Performs an employee evaluation based on given performance metrics and returns the evaluation results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee to be evaluated."
                    },
                    "performance_metrics": {
                        "type": "object",
                        "description": "A dictionary containing performance metrics. Each key represents a metric, and the value is the score.",
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "employee_id",
                    "performance_metrics"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee."
                    },
                    "average_score": {
                        "type": "number",
                        "description": "The average score calculated from the performance metrics."
                    },
                    "evaluation_status": {
                        "type": "string",
                        "description": "The evaluation status of the employee."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"perform_employee_evaluation\",\n        \"description\": \"Performs an employee evaluation based on given performance metrics and returns the evaluation results.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the employee to be evaluated.\"\n                },\n                \"performance_metrics\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing performance metrics. Each key represents a metric, and the value is the score.\",\n                    \"additionalProperties\": {\n                        \"anyOf\": [\n                            {\"type\": \"integer\"},\n                            {\"type\": \"number\"}\n                        ]\n                    }\n                }\n            },\n            \"required\": [\"employee_id\", \"performance_metrics\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the employee.\"\n                },\n                \"average_score\": {\n                    \"type\": \"number\",\n                    \"description\": \"The average score calculated from the performance metrics.\"\n                },\n                \"evaluation_status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The evaluation status of the employee.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you perform an evaluation for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the employee's unique identifier and the performance metrics.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The employee's ID is '12345' and the performance metrics are {'metric1': 85, 'metric2': 90}.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I will perform the evaluation for employee with ID '12345' using the provided performance metrics.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"perform_employee_evaluation\",\n        \"parameters\": {\n            \"employee_id\": \"12345\",\n            \"performance_metrics\": {\n                \"metric1\": 85,\n                \"metric2\": 90\n            }\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "perform_employee_evaluation",
            "description": "Performs an employee evaluation based on given performance metrics and returns the evaluation results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee to be evaluated."
                    },
                    "performance_metrics": {
                        "type": "object",
                        "description": "A dictionary containing performance metrics. Each key represents a metric, and the value is the score.",
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "employee_id",
                    "performance_metrics"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee."
                    },
                    "average_score": {
                        "type": "number",
                        "description": "The average score calculated from the performance metrics."
                    },
                    "evaluation_status": {
                        "type": "string",
                        "description": "The evaluation status of the employee."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you perform an evaluation for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the employee's unique identifier and the performance metrics."
            },
            {
                "role": "user",
                "text": "The employee's ID is '12345' and the performance metrics are {'metric1': 85, 'metric2': 90}."
            },
            {
                "role": "assistant",
                "text": "Great, I will perform the evaluation for employee with ID '12345' using the provided performance metrics."
            }
        ],
        "function_call": {
            "function_name": "perform_employee_evaluation",
            "parameters": {
                "employee_id": "12345",
                "performance_metrics": {
                    "metric1": 85,
                    "metric2": 90
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def perform_employee_evaluation(\\nemployee_id: str,\\nperformance_metrics: Dict[str, Union[int, float]]\\n) -> Dict[str, Union[str, int, float]]:\\n    \"\"\"\\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\\n\\n    Parameters:\\n        employee_id (str): The unique identifier of the employee to be evaluated.\\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\\n                                                            Each key represents a metric, and the value is the score.\\n\\n    Returns:\\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\\n                                            It includes \\'employee_id\\', \\'average_score\\', and \\'evaluation_status\\' keys.\\n    \"\"\"\\n', 'function_description': {'name': 'perform_employee_evaluation', 'description': 'Performs an employee evaluation based on given performance metrics and returns the evaluation results.', 'parameters': {'type': 'object', 'properties': {'employee_id': {'type': 'string', 'description': 'The unique identifier of the employee to be evaluated.'}, 'performance_metrics': {'type': 'object', 'description': 'A dictionary containing performance metrics. Each key represents a metric, and the value is the score.', 'additionalProperties': {'anyOf': [{'type': 'integer'}, {'type': 'number'}]}}}, 'required': ['employee_id', 'performance_metrics']}, 'returns': {'type': 'object', 'properties': {'employee_id': {'type': 'string', 'description': 'The unique identifier of the employee.'}, 'average_score': {'type': 'number', 'description': 'The average score calculated from the performance metrics.'}, 'evaluation_status': {'type': 'string', 'description': 'The evaluation status of the employee.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-4",
    "description": {
        "function_snippet": "def create_new_customer_account(\n    customer_name: str,\n    customer_email: str,\n    customer_password: str,\n) -> Dict[str, str]:\n    \n    \"\"\"\n    Creates an account for a new customer and returns the customer's account details.\n\n    Parameters:\n        customer_name (str): The name of the customer.\n        customer_email (str): The email address of the customer.\n        customer_password (str): The password for the new customer's account.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the customer's account details.\n                        The dictionary has 'customer_name', 'customer_email', \n                        and 'customer_id' as keys.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "create_new_customer_account",
            "description": "Creates an account for a new customer and returns the customer's account details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The name of the customer."
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "customer_password": {
                        "type": "string",
                        "description": "The password for the new customer's account."
                    }
                },
                "required": [
                    "customer_name",
                    "customer_email",
                    "customer_password"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string"
                    },
                    "customer_email": {
                        "type": "string"
                    },
                    "customer_id": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"create_new_customer_account\",\n        \"description\": \"Creates an account for a new customer and returns the customer's account details.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the customer.\"\n                },\n                \"customer_email\": {\n                    \"type\": \"string\",\n                    \"description\": \"The email address of the customer.\"\n                },\n                \"customer_password\": {\n                    \"type\": \"string\",\n                    \"description\": \"The password for the new customer's account.\"\n                }\n            },\n            \"required\": [\"customer_name\", \"customer_email\", \"customer_password\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_name\": {\"type\": \"string\"},\n                \"customer_email\": {\"type\": \"string\"},\n                \"customer_id\": {\"type\": \"string\"}\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hi, I'd like to create a new customer account.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can help you with that. Can you please provide me with the following information: customer name, customer email, and customer password?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Of course. The customer name is 'John Doe', the customer email is 'johndoe@example.com', and the customer password is 'password123'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the information. I will now create a new customer account using the given details.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"create_new_customer_account\",\n        \"parameters\": {\n            \"customer_name\": \"John Doe\",\n            \"customer_email\": \"johndoe@example.com\",\n            \"customer_password\": \"password123\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "create_new_customer_account",
            "description": "Creates an account for a new customer and returns the customer's account details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The name of the customer."
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "customer_password": {
                        "type": "string",
                        "description": "The password for the new customer's account."
                    }
                },
                "required": [
                    "customer_name",
                    "customer_email",
                    "customer_password"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string"
                    },
                    "customer_email": {
                        "type": "string"
                    },
                    "customer_id": {
                        "type": "string"
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I'd like to create a new customer account."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Can you please provide me with the following information: customer name, customer email, and customer password?"
            },
            {
                "role": "user",
                "text": "Of course. The customer name is 'John Doe', the customer email is 'johndoe@example.com', and the customer password is 'password123'."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the information. I will now create a new customer account using the given details."
            }
        ],
        "function_call": {
            "function_name": "create_new_customer_account",
            "parameters": {
                "customer_name": "John Doe",
                "customer_email": "johndoe@example.com",
                "customer_password": "password123"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def create_new_customer_account(\\n    customer_name: str,\\n    customer_email: str,\\n    customer_password: str,\\n) -> Dict[str, str]:\\n    \\n    \"\"\"\\n    Creates an account for a new customer and returns the customer\\'s account details.\\n\\n    Parameters:\\n        customer_name (str): The name of the customer.\\n        customer_email (str): The email address of the customer.\\n        customer_password (str): The password for the new customer\\'s account.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary containing the customer\\'s account details.\\n                        The dictionary has \\'customer_name\\', \\'customer_email\\', \\n                        and \\'customer_id\\' as keys.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'create_new_customer_account', 'description': \"Creates an account for a new customer and returns the customer's account details.\", 'parameters': {'type': 'object', 'properties': {'customer_name': {'type': 'string', 'description': 'The name of the customer.'}, 'customer_email': {'type': 'string', 'description': 'The email address of the customer.'}, 'customer_password': {'type': 'string', 'description': \"The password for the new customer's account.\"}}, 'required': ['customer_name', 'customer_email', 'customer_password']}, 'returns': {'type': 'object', 'properties': {'customer_name': {'type': 'string'}, 'customer_email': {'type': 'string'}, 'customer_id': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-5",
    "description": {
        "function_snippet": "def calculate_payroll(\n    hours_worked: float,\n    hourly_rate: float,\n    overtime_rate: float = 1.5,\n    standard_hours: float = 40.0,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for an employee based on the hours they worked,\n    their hourly rate, and the overtime rate.\n\n    Parameters:\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The employee's pay rate per hour.\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\n    \"\"\"\n    pass\n",
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.",
            "parameters": {
                "type": "object",
                "properties": {
                    "hours_worked": {
                        "type": "float",
                        "description": "The number of hours the employee worked."
                    },
                    "hourly_rate": {
                        "type": "float",
                        "description": "The employee's pay rate per hour."
                    },
                    "overtime_rate": {
                        "type": "float",
                        "description": "The rate for overtime pay. Defaults to 1.5."
                    },
                    "standard_hours": {
                        "type": "float",
                        "description": "The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0."
                    }
                },
                "required": [
                    "hours_worked",
                    "hourly_rate"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "regular_pay": {
                        "type": "float",
                        "description": "The amount of regular pay for the employee."
                    },
                    "overtime_pay": {
                        "type": "float",
                        "description": "The amount of overtime pay for the employee."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"calculate_payroll\",\n        \"description\": \"Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"hours_worked\": {\n                    \"type\": \"float\",\n                    \"description\": \"The number of hours the employee worked.\"\n                },\n                \"hourly_rate\": {\n                    \"type\": \"float\",\n                    \"description\": \"The employee's pay rate per hour.\"\n                },\n                \"overtime_rate\": {\n                    \"type\": \"float\",\n                    \"description\": \"The rate for overtime pay. Defaults to 1.5.\"\n                },\n                \"standard_hours\": {\n                    \"type\": \"float\",\n                    \"description\": \"The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\"\n                }\n            },\n            \"required\": [\"hours_worked\", \"hourly_rate\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"regular_pay\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount of regular pay for the employee.\"\n                },\n                \"overtime_pay\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount of overtime pay for the employee.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you calculate my payroll?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Can you provide me with the number of hours you worked and your hourly rate?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"I worked 45 hours and my hourly rate is $20.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, let me calculate your payroll.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"calculate_payroll\",\n        \"parameters\": {\n            \"hours_worked\": 45,\n            \"hourly_rate\": 20\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.",
            "parameters": {
                "type": "object",
                "properties": {
                    "hours_worked": {
                        "type": "float",
                        "description": "The number of hours the employee worked."
                    },
                    "hourly_rate": {
                        "type": "float",
                        "description": "The employee's pay rate per hour."
                    },
                    "overtime_rate": {
                        "type": "float",
                        "description": "The rate for overtime pay. Defaults to 1.5."
                    },
                    "standard_hours": {
                        "type": "float",
                        "description": "The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0."
                    }
                },
                "required": [
                    "hours_worked",
                    "hourly_rate"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "regular_pay": {
                        "type": "float",
                        "description": "The amount of regular pay for the employee."
                    },
                    "overtime_pay": {
                        "type": "float",
                        "description": "The amount of overtime pay for the employee."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you calculate my payroll?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the number of hours you worked and your hourly rate?"
            },
            {
                "role": "user",
                "text": "I worked 45 hours and my hourly rate is $20."
            },
            {
                "role": "assistant",
                "text": "Great, let me calculate your payroll."
            }
        ],
        "function_call": {
            "function_name": "calculate_payroll",
            "parameters": {
                "hours_worked": 45,
                "hourly_rate": 20
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def calculate_payroll(\\n    hours_worked: float,\\n    hourly_rate: float,\\n    overtime_rate: float = 1.5,\\n    standard_hours: float = 40.0,\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Calculates the payroll for an employee based on the hours they worked,\\n    their hourly rate, and the overtime rate.\\n\\n    Parameters:\\n        hours_worked (float): The number of hours the employee worked.\\n        hourly_rate (float): The employee\\'s pay rate per hour.\\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with \\'regular_pay\\' and \\'overtime_pay\\' as keys and the corresponding amounts as values.\\n    \"\"\"\\n    pass\\n', 'function_description': {'name': 'calculate_payroll', 'description': 'Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.', 'parameters': {'type': 'object', 'properties': {'hours_worked': {'type': 'float', 'description': 'The number of hours the employee worked.'}, 'hourly_rate': {'type': 'float', 'description': \"The employee's pay rate per hour.\"}, 'overtime_rate': {'type': 'float', 'description': 'The rate for overtime pay. Defaults to 1.5.'}, 'standard_hours': {'type': 'float', 'description': 'The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.'}}, 'required': ['hours_worked', 'hourly_rate']}, 'returns': {'type': 'object', 'properties': {'regular_pay': {'type': 'float', 'description': 'The amount of regular pay for the employee.'}, 'overtime_pay': {'type': 'float', 'description': 'The amount of overtime pay for the employee.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-6",
    "description": {
        "function_snippet": "def calculate_payroll(\n    team_members: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates payroll for a team and returns the total payroll.\n\n    Parameters:\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\n    \"\"\"\n\n    # Function code goes here",
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates payroll for a team and returns the total payroll.",
            "parameters": {
                "type": "object",
                "properties": {
                    "team_members": {
                        "type": "array",
                        "description": "A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "hours_worked": {
                                    "type": "integer"
                                },
                                "hourly_rate": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "name",
                                "hours_worked",
                                "hourly_rate"
                            ]
                        }
                    }
                },
                "required": [
                    "team_members"
                ]
            }
        },
        "returns": {
            "type": "object",
            "properties": {
                "total_payroll": {
                    "type": "number",
                    "description": "The total payroll for the team."
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"calculate_payroll\",\n        \"description\": \"Calculates payroll for a team and returns the total payroll.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"team_members\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"hours_worked\": {\"type\": \"integer\"},\n                            \"hourly_rate\": {\"type\": \"number\"}\n                        },\n                        \"required\": [\"name\", \"hours_worked\", \"hourly_rate\"]\n                    }\n                }\n            },\n            \"required\": [\"team_members\"]\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me calculate the payroll for my team?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Can you provide me with the details of your team members?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, I have a list of team members with their names, hours worked, and hourly rates.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Please provide the list of team members with their details.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here is the list:\\n- John Doe: 40 hours, $15.00 per hour\\n- Jane Smith: 35 hours, $20.00 per hour\\n- Mike Johnson: 45 hours, $18.50 per hour\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the details. I will calculate the payroll for your team now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"calculate_payroll\",\n        \"parameters\": {\n            \"team_members\": [\n                {\n                    \"name\": \"John Doe\",\n                    \"hours_worked\": 40,\n                    \"hourly_rate\": 15.00\n                },\n                {\n                    \"name\": \"Jane Smith\",\n                    \"hours_worked\": 35,\n                    \"hourly_rate\": 20.00\n                },\n                {\n                    \"name\": \"Mike Johnson\",\n                    \"hours_worked\": 45,\n                    \"hourly_rate\": 18.50\n                }\n            ]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates payroll for a team and returns the total payroll.",
            "parameters": {
                "type": "object",
                "properties": {
                    "team_members": {
                        "type": "array",
                        "description": "A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "hours_worked": {
                                    "type": "integer"
                                },
                                "hourly_rate": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "name",
                                "hours_worked",
                                "hourly_rate"
                            ]
                        }
                    }
                },
                "required": [
                    "team_members"
                ]
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me calculate the payroll for my team?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the details of your team members?"
            },
            {
                "role": "user",
                "text": "Yes, I have a list of team members with their names, hours worked, and hourly rates."
            },
            {
                "role": "assistant",
                "text": "Please provide the list of team members with their details."
            },
            {
                "role": "user",
                "text": "Here is the list:\n- John Doe: 40 hours, $15.00 per hour\n- Jane Smith: 35 hours, $20.00 per hour\n- Mike Johnson: 45 hours, $18.50 per hour"
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the details. I will calculate the payroll for your team now."
            }
        ],
        "function_call": {
            "function_name": "calculate_payroll",
            "parameters": {
                "team_members": [
                    {
                        "name": "John Doe",
                        "hours_worked": 40,
                        "hourly_rate": 15.0
                    },
                    {
                        "name": "Jane Smith",
                        "hours_worked": 35,
                        "hourly_rate": 20.0
                    },
                    {
                        "name": "Mike Johnson",
                        "hours_worked": 45,
                        "hourly_rate": 18.5
                    }
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def calculate_payroll(\\n    team_members: List[Dict[str, Union[str, int, float]]]\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Calculates payroll for a team and returns the total payroll.\\n\\n    Parameters:\\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\\n                                                                Each dictionary should have \\'name\\', \\'hours_worked\\' and \\'hourly_rate\\' keys.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with each team member\\'s name as a key and their total pay as a value.\\n    \"\"\"\\n\\n    # Function code goes here', 'function_description': {'name': 'calculate_payroll', 'description': 'Calculates payroll for a team and returns the total payroll.', 'parameters': {'type': 'object', 'properties': {'team_members': {'type': 'array', 'description': \"A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'hours_worked': {'type': 'integer'}, 'hourly_rate': {'type': 'number'}}, 'required': ['name', 'hours_worked', 'hourly_rate']}}}, 'required': ['team_members']}}, 'returns': {'type': 'object', 'properties': {'total_payroll': {'type': 'number', 'description': 'The total payroll for the team.'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-7",
    "description": {
        "function_snippet": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates inventory stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        quantity (int): The quantity to update the inventory with.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the updated inventory data.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "update_inventory_stock_data",
            "description": "Updates inventory stock data for a specific product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The quantity to update the inventory with."
                    }
                },
                "required": [
                    "product_id",
                    "quantity"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "inventory_data": {
                        "type": "object",
                        "description": "A dictionary containing the updated inventory data."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"update_inventory_stock_data\",\n        \"description\": \"Updates inventory stock data for a specific product.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the product.\"\n                },\n                \"quantity\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The quantity to update the inventory with.\"\n                }\n            },\n            \"required\": [\"product_id\", \"quantity\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"inventory_data\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the updated inventory data.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you update the stock of Product A?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, please provide the product ID and the quantity you want to update.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The product ID is '12345' and I want to update the quantity to 50.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm updating the stock of Product A with a quantity of 50.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"update_inventory_stock_data\",\n        \"parameters\": {\n            \"product_id\": \"12345\",\n            \"quantity\": 50\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "update_inventory_stock_data",
            "description": "Updates inventory stock data for a specific product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The quantity to update the inventory with."
                    }
                },
                "required": [
                    "product_id",
                    "quantity"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "inventory_data": {
                        "type": "object",
                        "description": "A dictionary containing the updated inventory data."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you update the stock of Product A?"
            },
            {
                "role": "assistant",
                "text": "Sure, please provide the product ID and the quantity you want to update."
            },
            {
                "role": "user",
                "text": "The product ID is '12345' and I want to update the quantity to 50."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating the stock of Product A with a quantity of 50."
            }
        ],
        "function_call": {
            "function_name": "update_inventory_stock_data",
            "parameters": {
                "product_id": "12345",
                "quantity": 50
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def update_inventory_stock_data(\\n    product_id: str,\\n    quantity: int,\\n) -> Dict[str, Any]:\\n    \"\"\"\\n    Updates inventory stock data for a specific product.\\n\\n    Parameters:\\n        product_id (str): The ID of the product.\\n        quantity (int): The quantity to update the inventory with.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary containing the updated inventory data.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'update_inventory_stock_data', 'description': 'Updates inventory stock data for a specific product.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'string', 'description': 'The ID of the product.'}, 'quantity': {'type': 'integer', 'description': 'The quantity to update the inventory with.'}}, 'required': ['product_id', 'quantity']}, 'returns': {'type': 'object', 'properties': {'inventory_data': {'type': 'object', 'description': 'A dictionary containing the updated inventory data.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-8",
    "description": {
        "function_snippet": "def track_shipment_status(\ntracking_number: str,\nshipping_company: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment and returns the current status and location.\n\n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        shipping_company (str): The name of the shipping company.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "track_shipment_status",
            "description": "Tracks the status of a shipment and returns the current status and location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tracking_number": {
                        "type": "string",
                        "description": "The tracking number of the shipment."
                    },
                    "shipping_company": {
                        "type": "string",
                        "description": "The name of the shipping company."
                    }
                },
                "required": [
                    "tracking_number",
                    "shipping_company"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the shipment."
                    },
                    "location": {
                        "type": "string",
                        "description": "The current location of the shipment."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"track_shipment_status\",\n        \"description\": \"Tracks the status of a shipment and returns the current status and location.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tracking_number\": {\n                    \"type\": \"string\",\n                    \"description\": \"The tracking number of the shipment.\"\n                },\n                \"shipping_company\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the shipping company.\"\n                }\n            },\n            \"required\": [\"tracking_number\", \"shipping_company\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current status of the shipment.\"\n                },\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current location of the shipment.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you track the status of my shipment?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Can you provide me with the tracking number and the name of the shipping company?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, my tracking number is '123456789' and the shipping company is 'ABC Shipping'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm tracking the status of your shipment now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"track_shipment_status\",\n        \"parameters\": {\n            \"tracking_number\": \"123456789\",\n            \"shipping_company\": \"ABC Shipping\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "track_shipment_status",
            "description": "Tracks the status of a shipment and returns the current status and location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tracking_number": {
                        "type": "string",
                        "description": "The tracking number of the shipment."
                    },
                    "shipping_company": {
                        "type": "string",
                        "description": "The name of the shipping company."
                    }
                },
                "required": [
                    "tracking_number",
                    "shipping_company"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the shipment."
                    },
                    "location": {
                        "type": "string",
                        "description": "The current location of the shipment."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you track the status of my shipment?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the tracking number and the name of the shipping company?"
            },
            {
                "role": "user",
                "text": "Yes, my tracking number is '123456789' and the shipping company is 'ABC Shipping'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm tracking the status of your shipment now."
            }
        ],
        "function_call": {
            "function_name": "track_shipment_status",
            "parameters": {
                "tracking_number": "123456789",
                "shipping_company": "ABC Shipping"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def track_shipment_status(\\ntracking_number: str,\\nshipping_company: str,\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Tracks the status of a shipment and returns the current status and location.\\n\\n    Parameters:\\n        tracking_number (str): The tracking number of the shipment.\\n        shipping_company (str): The name of the shipping company.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with \\'status\\' and \\'location\\' as keys and the current status and location as values.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'track_shipment_status', 'description': 'Tracks the status of a shipment and returns the current status and location.', 'parameters': {'type': 'object', 'properties': {'tracking_number': {'type': 'string', 'description': 'The tracking number of the shipment.'}, 'shipping_company': {'type': 'string', 'description': 'The name of the shipping company.'}}, 'required': ['tracking_number', 'shipping_company']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The current status of the shipment.'}, 'location': {'type': 'string', 'description': 'The current location of the shipment.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-9",
    "description": {
        "function_snippet": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Assigns a customer support ticket to a specified agent.\n\n    Parameters:\n        ticket_id (int): The id of the ticket that needs to be assigned.\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\n\n    Returns:\n        Dict[str, Any]: A dictionary with details of the assignment process. \n                        This can include keys like 'status' and 'message'.\n    \"\"\"\n",
        "function_description": {
            "name": "assign_ticket_to_agent",
            "description": "Assigns a customer support ticket to a specified agent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ticket_id": {
                        "type": "integer",
                        "description": "The id of the ticket that needs to be assigned."
                    },
                    "agent_id": {
                        "type": "integer",
                        "description": "The id of the agent to whom the ticket will be assigned."
                    }
                },
                "required": [
                    "ticket_id",
                    "agent_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the assignment process."
                    },
                    "message": {
                        "type": "string",
                        "description": "A message providing details about the assignment."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"assign_ticket_to_agent\",\n        \"description\": \"Assigns a customer support ticket to a specified agent.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ticket_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The id of the ticket that needs to be assigned.\"\n                },\n                \"agent_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The id of the agent to whom the ticket will be assigned.\"\n                }\n            },\n            \"required\": [\"ticket_id\", \"agent_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status of the assignment process.\"\n                },\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"A message providing details about the assignment.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you assign ticket #12345 to agent #6789?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, let me assign the ticket to the specified agent.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"assign_ticket_to_agent\",\n        \"parameters\": {\n            \"ticket_id\": 12345,\n            \"agent_id\": 6789\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "assign_ticket_to_agent",
            "description": "Assigns a customer support ticket to a specified agent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ticket_id": {
                        "type": "integer",
                        "description": "The id of the ticket that needs to be assigned."
                    },
                    "agent_id": {
                        "type": "integer",
                        "description": "The id of the agent to whom the ticket will be assigned."
                    }
                },
                "required": [
                    "ticket_id",
                    "agent_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the assignment process."
                    },
                    "message": {
                        "type": "string",
                        "description": "A message providing details about the assignment."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you assign ticket #12345 to agent #6789?"
            },
            {
                "role": "assistant",
                "text": "Sure, let me assign the ticket to the specified agent."
            }
        ],
        "function_call": {
            "function_name": "assign_ticket_to_agent",
            "parameters": {
                "ticket_id": 12345,
                "agent_id": 6789
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def assign_ticket_to_agent(\\n    ticket_id: int,\\n    agent_id: int,\\n) -> Dict[str, Any]:\\n    \"\"\"\\n    Assigns a customer support ticket to a specified agent.\\n\\n    Parameters:\\n        ticket_id (int): The id of the ticket that needs to be assigned.\\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary with details of the assignment process. \\n                        This can include keys like \\'status\\' and \\'message\\'.\\n    \"\"\"\\n', 'function_description': {'name': 'assign_ticket_to_agent', 'description': 'Assigns a customer support ticket to a specified agent.', 'parameters': {'type': 'object', 'properties': {'ticket_id': {'type': 'integer', 'description': 'The id of the ticket that needs to be assigned.'}, 'agent_id': {'type': 'integer', 'description': 'The id of the agent to whom the ticket will be assigned.'}}, 'required': ['ticket_id', 'agent_id']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The status of the assignment process.'}, 'message': {'type': 'string', 'description': 'A message providing details about the assignment.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-10",
    "description": {
        "function_snippet": "def generate_discount_code(customer_id: str) -> str:\n    \"\"\"\n    Generate a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (str): The unique id of the customer.\n\n    Returns:\n        str: The generated unique discount code.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "generate_discount_code",
            "description": "Generate a unique discount code for a customer for marketing promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique id of the customer."
                    }
                },
                "required": [
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "discount_code": {
                        "type": "string",
                        "description": "The generated unique discount code."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"generate_discount_code\",\n        \"description\": \"Generate a unique discount code for a customer for marketing promotions.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique id of the customer.\"\n                }\n            },\n            \"required\": [\"customer_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"discount_code\": {\n                    \"type\": \"string\",\n                    \"description\": \"The generated unique discount code.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you generate a discount code for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Can you please provide me with your customer ID?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, my customer ID is '12345'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm generating a unique discount code for you now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_discount_code\",\n        \"parameters\": {\n            \"customer_id\": \"12345\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "generate_discount_code",
            "description": "Generate a unique discount code for a customer for marketing promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique id of the customer."
                    }
                },
                "required": [
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "discount_code": {
                        "type": "string",
                        "description": "The generated unique discount code."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you generate a discount code for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please provide me with your customer ID?"
            },
            {
                "role": "user",
                "text": "Yes, my customer ID is '12345'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm generating a unique discount code for you now."
            }
        ],
        "function_call": {
            "function_name": "generate_discount_code",
            "parameters": {
                "customer_id": "12345"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def generate_discount_code(customer_id: str) -> str:\\n    \"\"\"\\n    Generate a unique discount code for a customer for marketing promotions.\\n\\n    Parameters:\\n        customer_id (str): The unique id of the customer.\\n\\n    Returns:\\n        str: The generated unique discount code.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'generate_discount_code', 'description': 'Generate a unique discount code for a customer for marketing promotions.', 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The unique id of the customer.'}}, 'required': ['customer_id']}, 'returns': {'type': 'object', 'properties': {'discount_code': {'type': 'string', 'description': 'The generated unique discount code.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-11",
    "description": {
        "function_snippet": "def enable_subscription(\n    customer_id: str,\n    services: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\n\n    Parameters:\n        customer_id (str): The unique identifier of the customer.\n        services (List[str]): A list of services to which the customer wants to subscribe.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \n        True indicates the subscription was successful, False indicates it was not.\n    \"\"\"",
        "function_description": {
            "name": "enable_subscription",
            "description": "Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique identifier of the customer."
                    },
                    "services": {
                        "type": "array",
                        "description": "A list of services to which the customer wants to subscribe.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "services"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_name": {
                        "type": "boolean",
                        "description": "A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"enable_subscription\",\n        \"description\": \"Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the customer.\"\n                },\n                \"services\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of services to which the customer wants to subscribe.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"customer_id\",\n                \"services\"\n            ]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"service_name\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you enable my subscription to some services?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide your customer ID and the list of services you want to subscribe to.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"My customer ID is '12345' and I want to subscribe to services 'A', 'B', and 'C'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm enabling your subscription to the requested services now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"enable_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"services\": [\"A\", \"B\", \"C\"]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "enable_subscription",
            "description": "Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique identifier of the customer."
                    },
                    "services": {
                        "type": "array",
                        "description": "A list of services to which the customer wants to subscribe.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "services"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_name": {
                        "type": "boolean",
                        "description": "A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you enable my subscription to some services?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide your customer ID and the list of services you want to subscribe to."
            },
            {
                "role": "user",
                "text": "My customer ID is '12345' and I want to subscribe to services 'A', 'B', and 'C'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm enabling your subscription to the requested services now."
            }
        ],
        "function_call": {
            "function_name": "enable_subscription",
            "parameters": {
                "customer_id": "12345",
                "services": [
                    "A",
                    "B",
                    "C"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def enable_subscription(\\n    customer_id: str,\\n    services: List[str],\\n) -> Dict[str, bool]:\\n    \"\"\"\\n    Enables a customer\\'s subscription to various services and returns a dictionary indicating the status of each service.\\n\\n    Parameters:\\n        customer_id (str): The unique identifier of the customer.\\n        services (List[str]): A list of services to which the customer wants to subscribe.\\n\\n    Returns:\\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \\n        True indicates the subscription was successful, False indicates it was not.\\n    \"\"\"', 'function_description': {'name': 'enable_subscription', 'description': \"Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\", 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The unique identifier of the customer.'}, 'services': {'type': 'array', 'description': 'A list of services to which the customer wants to subscribe.', 'items': {'type': 'string'}}}, 'required': ['customer_id', 'services']}, 'returns': {'type': 'object', 'properties': {'service_name': {'type': 'boolean', 'description': 'A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-12",
    "description": {
        "function_snippet": "def disable_customer_subscription(\n    customer_id: str,\n    service_ids: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The id of the customer.\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\n\n    Returns:\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\n    \"\"\"",
        "function_description": {
            "name": "disable_customer_subscription",
            "description": "Disables a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "service_ids": {
                        "type": "array",
                        "description": "A list of ids of the services to be unsubscribed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "service_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_id": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the unsubscription was successful."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"disable_customer_subscription\",\n        \"description\": \"Disables a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The id of the customer.\"\n                },\n                \"service_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of ids of the services to be unsubscribed.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"service_ids\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"service_id\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A boolean indicating whether the unsubscription was successful.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me disable my subscription to some services?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! Please provide me with your customer ID and the IDs of the services you want to unsubscribe from.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"My customer ID is '12345' and the service IDs are ['service1', 'service2'].\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for the information. I will now proceed to disable your subscription to the requested services.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"disable_customer_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"service_ids\": [\"service1\", \"service2\"]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "disable_customer_subscription",
            "description": "Disables a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "service_ids": {
                        "type": "array",
                        "description": "A list of ids of the services to be unsubscribed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "service_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_id": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the unsubscription was successful."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me disable my subscription to some services?"
            },
            {
                "role": "assistant",
                "text": "Of course! Please provide me with your customer ID and the IDs of the services you want to unsubscribe from."
            },
            {
                "role": "user",
                "text": "My customer ID is '12345' and the service IDs are ['service1', 'service2']."
            },
            {
                "role": "assistant",
                "text": "Thank you for the information. I will now proceed to disable your subscription to the requested services."
            }
        ],
        "function_call": {
            "function_name": "disable_customer_subscription",
            "parameters": {
                "customer_id": "12345",
                "service_ids": [
                    "service1",
                    "service2"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def disable_customer_subscription(\\n    customer_id: str,\\n    service_ids: List[str],\\n) -> Dict[str, bool]:\\n    \"\"\"\\n    Disables a customer\\'s subscription to various services.\\n\\n    Parameters:\\n        customer_id (str): The id of the customer.\\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\\n\\n    Returns:\\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\\n    \"\"\"', 'function_description': {'name': 'disable_customer_subscription', 'description': \"Disables a customer's subscription to various services.\", 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The id of the customer.'}, 'service_ids': {'type': 'array', 'description': 'A list of ids of the services to be unsubscribed.', 'items': {'type': 'string'}}}, 'required': ['customer_id', 'service_ids']}, 'returns': {'type': 'object', 'properties': {'service_id': {'type': 'boolean', 'description': 'A boolean indicating whether the unsubscription was successful.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-13",
    "description": {
        "function_snippet": "def modify_customer_subscription(\n    customer_id: str,\n    new_subscription: Dict[str, bool]\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\n                                            Each key is a service name and its corresponding value is a boolean \n                                            indicating whether the customer is subscribed to that service.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "modify_customer_subscription",
            "description": "Modifies a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The ID of the customer whose subscription needs to be modified."
                    },
                    "new_subscription": {
                        "type": "object",
                        "description": "A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "new_subscription"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The status of the update operation."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"modify_customer_subscription\",\n        \"description\": \"Modifies a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the customer whose subscription needs to be modified.\"\n                },\n                \"new_subscription\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.\",\n                    \"additionalProperties\": {\n                        \"type\": \"boolean\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"new_subscription\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status of the update operation.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you modify my subscription?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me your customer ID and the new subscription status for various services.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"My customer ID is '12345' and here is the new subscription status: {'service1': True, 'service2': False}.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the information. I will now modify your subscription.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"modify_customer_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"new_subscription\": {\n                \"service1\": True,\n                \"service2\": False\n            }\n        }\n    }\n}",
    "data": "{\n    \"function_description\": {\n        \"name\": \"modify_customer_subscription\",\n        \"description\": \"Modifies a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the customer whose subscription needs to be modified.\"\n                },\n                \"new_subscription\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.\",\n                    \"additionalProperties\": {\n                        \"type\": \"boolean\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"new_subscription\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status of the update operation.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you modify my subscription?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me your customer ID and the new subscription status for various services.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"My customer ID is '12345' and here is the new subscription status: {'service1': True, 'service2': False}.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the information. I will now modify your subscription.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"modify_customer_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"new_subscription\": {\n                \"service1\": True,\n                \"service2\": False\n            }\n        }\n    }\n}",
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def modify_customer_subscription(\\n    customer_id: str,\\n    new_subscription: Dict[str, bool]\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Modifies a customer\\'s subscription to various services.\\n\\n    Parameters:\\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\\n                                            Each key is a service name and its corresponding value is a boolean \\n                                            indicating whether the customer is subscribed to that service.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with \\'message\\' as a key and the status of the update operation as a value.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'modify_customer_subscription', 'description': \"Modifies a customer's subscription to various services.\", 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The ID of the customer whose subscription needs to be modified.'}, 'new_subscription': {'type': 'object', 'description': 'A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.', 'additionalProperties': {'type': 'boolean'}}}, 'required': ['customer_id', 'new_subscription']}, 'returns': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'The status of the update operation.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-14",
    "description": {
        "function_snippet": "def renew_contracts(\ncontracts: List[Dict[str, Union[str, datetime.date]]]\n) -> List[Dict[str, Union[str, datetime.date]]]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n\n    Parameters:\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \n                                                                Each dictionary should have 'contract_id', 'service', \n                                                                and 'expiration_date' keys.\n\n    Returns:\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \n                                                    Each dictionary will have 'contract_id', 'service', \n                                                    and 'new_expiration_date' keys.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "renew_contracts",
            "description": "Renews contracts for services and subscriptions that are expiring.",
            "parameters": {
                "type": "object",
                "properties": {
                    "contracts": {
                        "type": "array",
                        "description": "A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "contract_id": {
                                    "type": "string"
                                },
                                "service": {
                                    "type": "string"
                                },
                                "expiration_date": {
                                    "type": "string",
                                    "format": "date"
                                }
                            },
                            "required": [
                                "contract_id",
                                "service",
                                "expiration_date"
                            ]
                        }
                    }
                },
                "required": [
                    "contracts"
                ]
            }
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "contract_id": {
                        "type": "string"
                    },
                    "service": {
                        "type": "string"
                    },
                    "new_expiration_date": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "contract_id",
                    "service",
                    "new_expiration_date"
                ]
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"renew_contracts\",\n        \"description\": \"Renews contracts for services and subscriptions that are expiring.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"contracts\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"contract_id\": {\"type\": \"string\"},\n                            \"service\": {\"type\": \"string\"},\n                            \"expiration_date\": {\"type\": \"string\", \"format\": \"date\"}\n                        },\n                        \"required\": [\"contract_id\", \"service\", \"expiration_date\"]\n                    }\n                }\n            },\n            \"required\": [\"contracts\"]\n        }\n    },\n    \"returns\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"contract_id\": {\"type\": \"string\"},\n                \"service\": {\"type\": \"string\"},\n                \"new_expiration_date\": {\"type\": \"string\", \"format\": \"date\"}\n            },\n            \"required\": [\"contract_id\", \"service\", \"new_expiration_date\"]\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you renew my contracts that are expiring?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the contract details.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"I have a list of contracts. Each contract has 'contract_id', 'service', and 'expiration_date' keys.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great! Please share the contract details with me.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"renew_contracts\",\n        \"parameters\": {\n            \"contracts\": []\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "renew_contracts",
            "description": "Renews contracts for services and subscriptions that are expiring.",
            "parameters": {
                "type": "object",
                "properties": {
                    "contracts": {
                        "type": "array",
                        "description": "A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "contract_id": {
                                    "type": "string"
                                },
                                "service": {
                                    "type": "string"
                                },
                                "expiration_date": {
                                    "type": "string",
                                    "format": "date"
                                }
                            },
                            "required": [
                                "contract_id",
                                "service",
                                "expiration_date"
                            ]
                        }
                    }
                },
                "required": [
                    "contracts"
                ]
            }
        },
        "returns": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "contract_id": {
                        "type": "string"
                    },
                    "service": {
                        "type": "string"
                    },
                    "new_expiration_date": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "contract_id",
                    "service",
                    "new_expiration_date"
                ]
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you renew my contracts that are expiring?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the contract details."
            },
            {
                "role": "user",
                "text": "I have a list of contracts. Each contract has 'contract_id', 'service', and 'expiration_date' keys."
            },
            {
                "role": "assistant",
                "text": "Great! Please share the contract details with me."
            }
        ],
        "function_call": {
            "function_name": "renew_contracts",
            "parameters": {
                "contracts": []
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def renew_contracts(\\ncontracts: List[Dict[str, Union[str, datetime.date]]]\\n) -> List[Dict[str, Union[str, datetime.date]]]:\\n    \"\"\"\\n    Renews contracts for services and subscriptions that are expiring.\\n\\n    Parameters:\\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \\n                                                                Each dictionary should have \\'contract_id\\', \\'service\\', \\n                                                                and \\'expiration_date\\' keys.\\n\\n    Returns:\\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \\n                                                    Each dictionary will have \\'contract_id\\', \\'service\\', \\n                                                    and \\'new_expiration_date\\' keys.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'renew_contracts', 'description': 'Renews contracts for services and subscriptions that are expiring.', 'parameters': {'type': 'object', 'properties': {'contracts': {'type': 'array', 'description': \"A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.\", 'items': {'type': 'object', 'properties': {'contract_id': {'type': 'string'}, 'service': {'type': 'string'}, 'expiration_date': {'type': 'string', 'format': 'date'}}, 'required': ['contract_id', 'service', 'expiration_date']}}}, 'required': ['contracts']}}, 'returns': {'type': 'array', 'items': {'type': 'object', 'properties': {'contract_id': {'type': 'string'}, 'service': {'type': 'string'}, 'new_expiration_date': {'type': 'string', 'format': 'date'}}, 'required': ['contract_id', 'service', 'new_expiration_date']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-15",
    "description": {
        "function_snippet": "def backup_business_data(\n    data: str,\n    backup_location: str,\n    backup_frequency: str,\n) -> bool:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data (str): The data to be backed up.\n        backup_location (str): The location where the backup data should be stored.\n        backup_frequency (str): The frequency at which the backup process should be performed.\n\n    Returns:\n        bool: Returns True if the backup process is successful, False otherwise.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "backup_business_data",
            "description": "Performs a backup process of important business data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The data to be backed up."
                    },
                    "backup_location": {
                        "type": "string",
                        "description": "The location where the backup data should be stored."
                    },
                    "backup_frequency": {
                        "type": "string",
                        "description": "The frequency at which the backup process should be performed."
                    }
                },
                "required": [
                    "data",
                    "backup_location",
                    "backup_frequency"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "Returns True if the backup process is successful, False otherwise."
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"backup_business_data\",\n        \"description\": \"Performs a backup process of important business data.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"data\": {\n                    \"type\": \"string\",\n                    \"description\": \"The data to be backed up.\"\n                },\n                \"backup_location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where the backup data should be stored.\"\n                },\n                \"backup_frequency\": {\n                    \"type\": \"string\",\n                    \"description\": \"The frequency at which the backup process should be performed.\"\n                }\n            },\n            \"required\": [\"data\", \"backup_location\", \"backup_frequency\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"Returns True if the backup process is successful, False otherwise.\"\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you perform a backup of my business data?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the necessary information.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The data I want to backup is 'important_data', and I want it to be stored at 'backup_drive'. I would like the backup process to be performed daily.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I will start the backup process now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"backup_business_data\",\n        \"parameters\": {\n            \"data\": \"important_data\",\n            \"backup_location\": \"backup_drive\",\n            \"backup_frequency\": \"daily\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "backup_business_data",
            "description": "Performs a backup process of important business data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The data to be backed up."
                    },
                    "backup_location": {
                        "type": "string",
                        "description": "The location where the backup data should be stored."
                    },
                    "backup_frequency": {
                        "type": "string",
                        "description": "The frequency at which the backup process should be performed."
                    }
                },
                "required": [
                    "data",
                    "backup_location",
                    "backup_frequency"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "Returns True if the backup process is successful, False otherwise."
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you perform a backup of my business data?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the necessary information."
            },
            {
                "role": "user",
                "text": "The data I want to backup is 'important_data', and I want it to be stored at 'backup_drive'. I would like the backup process to be performed daily."
            },
            {
                "role": "assistant",
                "text": "Great, I will start the backup process now."
            }
        ],
        "function_call": {
            "function_name": "backup_business_data",
            "parameters": {
                "data": "important_data",
                "backup_location": "backup_drive",
                "backup_frequency": "daily"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def backup_business_data(\\n    data: str,\\n    backup_location: str,\\n    backup_frequency: str,\\n) -> bool:\\n    \"\"\"\\n    Performs a backup process of important business data.\\n\\n    Parameters:\\n        data (str): The data to be backed up.\\n        backup_location (str): The location where the backup data should be stored.\\n        backup_frequency (str): The frequency at which the backup process should be performed.\\n\\n    Returns:\\n        bool: Returns True if the backup process is successful, False otherwise.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'backup_business_data', 'description': 'Performs a backup process of important business data.', 'parameters': {'type': 'object', 'properties': {'data': {'type': 'string', 'description': 'The data to be backed up.'}, 'backup_location': {'type': 'string', 'description': 'The location where the backup data should be stored.'}, 'backup_frequency': {'type': 'string', 'description': 'The frequency at which the backup process should be performed.'}}, 'required': ['data', 'backup_location', 'backup_frequency']}, 'returns': {'type': 'boolean', 'description': 'Returns True if the backup process is successful, False otherwise.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-16",
    "description": {
        "function_snippet": "def check_software_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_id (str): The id of the product.\n        license_key (str): The license key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "check_software_license_validity",
            "description": "Checks the validity of a software license for a given product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product."
                    },
                    "license_key": {
                        "type": "string",
                        "description": "The license key to check."
                    }
                },
                "required": [
                    "product_id",
                    "license_key"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the license is valid, False otherwise."
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"check_software_license_validity\",\n        \"description\": \"Checks the validity of a software license for a given product.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The id of the product.\"\n                },\n                \"license_key\": {\n                    \"type\": \"string\",\n                    \"description\": \"The license key to check.\"\n                }\n            },\n            \"required\": [\"product_id\", \"license_key\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if the license is valid, False otherwise.\"\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you check the validity of my software license?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the product ID and the license key.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The product ID is '12345' and the license key is 'ABC123'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Alright, I'm checking the validity of your software license now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"check_software_license_validity\",\n        \"parameters\": {\n            \"product_id\": \"12345\",\n            \"license_key\": \"ABC123\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "check_software_license_validity",
            "description": "Checks the validity of a software license for a given product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product."
                    },
                    "license_key": {
                        "type": "string",
                        "description": "The license key to check."
                    }
                },
                "required": [
                    "product_id",
                    "license_key"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the license is valid, False otherwise."
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you check the validity of my software license?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the product ID and the license key."
            },
            {
                "role": "user",
                "text": "The product ID is '12345' and the license key is 'ABC123'."
            },
            {
                "role": "assistant",
                "text": "Alright, I'm checking the validity of your software license now."
            }
        ],
        "function_call": {
            "function_name": "check_software_license_validity",
            "parameters": {
                "product_id": "12345",
                "license_key": "ABC123"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def check_software_license_validity(\\n    product_id: str,\\n    license_key: str,\\n) -> bool:\\n    \"\"\"\\n    Checks the validity of a software license for a given product.\\n\\n    Parameters:\\n        product_id (str): The id of the product.\\n        license_key (str): The license key to check.\\n\\n    Returns:\\n        bool: True if the license is valid, False otherwise.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'check_software_license_validity', 'description': 'Checks the validity of a software license for a given product.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'string', 'description': 'The id of the product.'}, 'license_key': {'type': 'string', 'description': 'The license key to check.'}}, 'required': ['product_id', 'license_key']}, 'returns': {'type': 'boolean', 'description': 'True if the license is valid, False otherwise.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-17",
    "description": {
        "function_snippet": "def onboard_new_employee(\n    employee_name: str,\n    start_date: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee by generating a new id, new email account, etc.\n\n    Parameters:\n        employee_name (str): The full name of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\n    \"\"\"\n",
        "function_description": {
            "name": "onboard_new_employee",
            "description": "Onboards a new employee by generating a new id, new email account, etc.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_name": {
                        "type": "string",
                        "description": "The full name of the new employee."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the new employee in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "employee_name",
                    "start_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The new employee's ID."
                    },
                    "employee_email": {
                        "type": "string",
                        "description": "The new employee's email address."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"onboard_new_employee\",\n        \"description\": \"Onboards a new employee by generating a new id, new email account, etc.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The full name of the new employee.\"\n                },\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the new employee in YYYY-MM-DD format.\"\n                }\n            },\n            \"required\": [\"employee_name\", \"start_date\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new employee's ID.\"\n                },\n                \"employee_email\": {\n                    \"type\": \"string\",\n                    \"description\": \"The new employee's email address.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, I need to onboard a new employee. Can you help me with that?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! I can assist you with onboarding a new employee. Please provide me with the employee's full name and start date.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The employee's name is John Doe and the start date is 2022-01-15.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for the information. I will onboard John Doe with the start date of 2022-01-15.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"onboard_new_employee\",\n        \"parameters\": {\n            \"employee_name\": \"John Doe\",\n            \"start_date\": \"2022-01-15\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "onboard_new_employee",
            "description": "Onboards a new employee by generating a new id, new email account, etc.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_name": {
                        "type": "string",
                        "description": "The full name of the new employee."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the new employee in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "employee_name",
                    "start_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The new employee's ID."
                    },
                    "employee_email": {
                        "type": "string",
                        "description": "The new employee's email address."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to onboard a new employee. Can you help me with that?"
            },
            {
                "role": "assistant",
                "text": "Of course! I can assist you with onboarding a new employee. Please provide me with the employee's full name and start date."
            },
            {
                "role": "user",
                "text": "The employee's name is John Doe and the start date is 2022-01-15."
            },
            {
                "role": "assistant",
                "text": "Thank you for the information. I will onboard John Doe with the start date of 2022-01-15."
            }
        ],
        "function_call": {
            "function_name": "onboard_new_employee",
            "parameters": {
                "employee_name": "John Doe",
                "start_date": "2022-01-15"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def onboard_new_employee(\\n    employee_name: str,\\n    start_date: str\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Onboards a new employee by generating a new id, new email account, etc.\\n\\n    Parameters:\\n        employee_name (str): The full name of the new employee.\\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary containing the new employee\\'s details such as \\'employee_id\\' and \\'employee_email\\'.\\n    \"\"\"\\n', 'function_description': {'name': 'onboard_new_employee', 'description': 'Onboards a new employee by generating a new id, new email account, etc.', 'parameters': {'type': 'object', 'properties': {'employee_name': {'type': 'string', 'description': 'The full name of the new employee.'}, 'start_date': {'type': 'string', 'description': 'The start date of the new employee in YYYY-MM-DD format.'}}, 'required': ['employee_name', 'start_date']}, 'returns': {'type': 'object', 'properties': {'employee_id': {'type': 'string', 'description': \"The new employee's ID.\"}, 'employee_email': {'type': 'string', 'description': \"The new employee's email address.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-18",
    "description": {
        "function_description": {
            "name": "allocate_resources",
            "description": "Allocates resources such as meeting rooms, equipment, and personnel for a project or task force and returns a dictionary.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_rooms": {
                        "type": "array",
                        "description": "The list of available meeting rooms.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "equipment": {
                        "type": "array",
                        "description": "The list of available equipment.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "personnel": {
                        "type": "array",
                        "description": "The list of available personnel.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the project."
                    }
                },
                "required": [
                    "meeting_rooms",
                    "equipment",
                    "personnel",
                    "project"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "allocated_meeting_rooms": {
                        "type": "array",
                        "description": "The allocated meeting rooms for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_equipment": {
                        "type": "array",
                        "description": "The allocated equipment for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_personnel": {
                        "type": "array",
                        "description": "The allocated personnel for the project.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"allocate_resources\",\n        \"description\": \"Allocates resources such as meeting rooms, equipment, and personnel for a project or task force and returns a dictionary.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_rooms\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available meeting rooms.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"equipment\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available equipment.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"personnel\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available personnel.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"project\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the project.\"\n                }\n            },\n            \"required\": [\"meeting_rooms\", \"equipment\", \"personnel\", \"project\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"allocated_meeting_rooms\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated meeting rooms for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"allocated_equipment\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated equipment for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"allocated_personnel\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated personnel for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you allocate resources for my project?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Can you provide me with the necessary details?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, I need meeting rooms, equipment, and personnel for my project called 'Project X'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I will allocate the resources for your project 'Project X'.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"allocate_resources\",\n        \"parameters\": {\n            \"meeting_rooms\": [],\n            \"equipment\": [],\n            \"personnel\": [],\n            \"project\": \"Project X\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "allocate_resources",
            "description": "Allocates resources such as meeting rooms, equipment, and personnel for a project or task force and returns a dictionary.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_rooms": {
                        "type": "array",
                        "description": "The list of available meeting rooms.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "equipment": {
                        "type": "array",
                        "description": "The list of available equipment.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "personnel": {
                        "type": "array",
                        "description": "The list of available personnel.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the project."
                    }
                },
                "required": [
                    "meeting_rooms",
                    "equipment",
                    "personnel",
                    "project"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "allocated_meeting_rooms": {
                        "type": "array",
                        "description": "The allocated meeting rooms for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_equipment": {
                        "type": "array",
                        "description": "The allocated equipment for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_personnel": {
                        "type": "array",
                        "description": "The allocated personnel for the project.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you allocate resources for my project?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me with the necessary details?"
            },
            {
                "role": "user",
                "text": "Yes, I need meeting rooms, equipment, and personnel for my project called 'Project X'."
            },
            {
                "role": "assistant",
                "text": "Great, I will allocate the resources for your project 'Project X'."
            }
        ],
        "function_call": {
            "function_name": "allocate_resources",
            "parameters": {
                "meeting_rooms": [],
                "equipment": [],
                "personnel": [],
                "project": "Project X"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_description': {'name': 'allocate_resources', 'description': 'Allocates resources such as meeting rooms, equipment, and personnel for a project or task force and returns a dictionary.', 'parameters': {'type': 'object', 'properties': {'meeting_rooms': {'type': 'array', 'description': 'The list of available meeting rooms.', 'items': {'type': 'string'}}, 'equipment': {'type': 'array', 'description': 'The list of available equipment.', 'items': {'type': 'string'}}, 'personnel': {'type': 'array', 'description': 'The list of available personnel.', 'items': {'type': 'string'}}, 'project': {'type': 'string', 'description': 'The name of the project.'}}, 'required': ['meeting_rooms', 'equipment', 'personnel', 'project']}, 'returns': {'type': 'object', 'properties': {'allocated_meeting_rooms': {'type': 'array', 'description': 'The allocated meeting rooms for the project.', 'items': {'type': 'string'}}, 'allocated_equipment': {'type': 'array', 'description': 'The allocated equipment for the project.', 'items': {'type': 'string'}}, 'allocated_personnel': {'type': 'array', 'description': 'The allocated personnel for the project.', 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-19",
    "description": {
        "function_snippet": "submit_timesheets(\nemployee_ids: List[int],\ntimesheet_data: Dict[int, Dict[str, Union[str, float]]],\naction: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n    \n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \n                                                                  'hours_worked' and optionally 'overtime_hours'.\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\n\n    Returns:\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\n    \"\"\"    ",
        "function_description": {
            "name": "submit_timesheets",
            "description": "Submits timesheets for employees, either for approval or archival.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_ids": {
                        "type": "array",
                        "description": "A list of employee IDs.",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "timesheet_data": {
                        "type": "object",
                        "description": "A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "description": "Date in YYYY-MM-DD format."
                                },
                                "hours_worked": {
                                    "type": "number",
                                    "description": "Number of hours worked."
                                },
                                "overtime_hours": {
                                    "type": "number",
                                    "description": "Number of overtime hours."
                                }
                            },
                            "required": [
                                "date",
                                "hours_worked"
                            ]
                        }
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to be taken. It should be either 'approval' or 'archival'."
                    }
                },
                "required": [
                    "employee_ids",
                    "timesheet_data",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_ids": {
                        "type": "string",
                        "description": "A dictionary with employee IDs as keys and the status of their timesheet submission as values."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"submit_timesheets\",\n        \"description\": \"Submits timesheets for employees, either for approval or archival.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of employee IDs.\",\n                    \"items\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"timesheet_data\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.\",\n                    \"additionalProperties\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"date\": {\n                                \"type\": \"string\",\n                                \"description\": \"Date in YYYY-MM-DD format.\"\n                            },\n                            \"hours_worked\": {\n                                \"type\": \"number\",\n                                \"description\": \"Number of hours worked.\"\n                            },\n                            \"overtime_hours\": {\n                                \"type\": \"number\",\n                                \"description\": \"Number of overtime hours.\"\n                            }\n                        },\n                        \"required\": [\"date\", \"hours_worked\"]\n                    }\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to be taken. It should be either 'approval' or 'archival'.\"\n                }\n            },\n            \"required\": [\"employee_ids\", \"timesheet_data\", \"action\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"string\",\n                    \"description\": \"A dictionary with employee IDs as keys and the status of their timesheet submission as values.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you submit timesheets for employees?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide the employee IDs, timesheet data, and the action to be taken.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"I have the employee IDs and timesheet data ready. The action I want to take is 'approval'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great! I will submit the timesheets for approval.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"submit_timesheets\",\n        \"parameters\": {\n            \"employee_ids\": [123, 456, 789],\n            \"timesheet_data\": {\n                123: {\n                    \"date\": \"2022-01-01\",\n                    \"hours_worked\": 8\n                },\n                456: {\n                    \"date\": \"2022-01-02\",\n                    \"hours_worked\": 7,\n                    \"overtime_hours\": 3\n                },\n                789: {\n                    \"date\": \"2022-01-03\",\n                    \"hours_worked\": 6\n                }\n            },\n            \"action\": \"approval\"\n        }\n    }\n}",
    "data": "{\n    \"function_description\": {\n        \"name\": \"submit_timesheets\",\n        \"description\": \"Submits timesheets for employees, either for approval or archival.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of employee IDs.\",\n                    \"items\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"timesheet_data\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.\",\n                    \"additionalProperties\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"date\": {\n                                \"type\": \"string\",\n                                \"description\": \"Date in YYYY-MM-DD format.\"\n                            },\n                            \"hours_worked\": {\n                                \"type\": \"number\",\n                                \"description\": \"Number of hours worked.\"\n                            },\n                            \"overtime_hours\": {\n                                \"type\": \"number\",\n                                \"description\": \"Number of overtime hours.\"\n                            }\n                        },\n                        \"required\": [\"date\", \"hours_worked\"]\n                    }\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to be taken. It should be either 'approval' or 'archival'.\"\n                }\n            },\n            \"required\": [\"employee_ids\", \"timesheet_data\", \"action\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"string\",\n                    \"description\": \"A dictionary with employee IDs as keys and the status of their timesheet submission as values.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you submit timesheets for employees?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide the employee IDs, timesheet data, and the action to be taken.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"I have the employee IDs and timesheet data ready. The action I want to take is 'approval'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great! I will submit the timesheets for approval.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"submit_timesheets\",\n        \"parameters\": {\n            \"employee_ids\": [123, 456, 789],\n            \"timesheet_data\": {\n                123: {\n                    \"date\": \"2022-01-01\",\n                    \"hours_worked\": 8\n                },\n                456: {\n                    \"date\": \"2022-01-02\",\n                    \"hours_worked\": 7,\n                    \"overtime_hours\": 3\n                },\n                789: {\n                    \"date\": \"2022-01-03\",\n                    \"hours_worked\": 6\n                }\n            },\n            \"action\": \"approval\"\n        }\n    }\n}",
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'submit_timesheets(\\nemployee_ids: List[int],\\ntimesheet_data: Dict[int, Dict[str, Union[str, float]]],\\naction: str,\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Submits timesheets for employees, either for approval or archival.\\n    \\n    Parameters:\\n        employee_ids (List[int]): A list of employee IDs.\\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \\n                                                                  Each timesheet is a dictionary containing \\'date\\' (YYYY-MM-DD format), \\n                                                                  \\'hours_worked\\' and optionally \\'overtime_hours\\'.\\n        action (str): The action to be taken. It should be either \\'approval\\' or \\'archival\\'.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\\n    \"\"\"    ', 'function_description': {'name': 'submit_timesheets', 'description': 'Submits timesheets for employees, either for approval or archival.', 'parameters': {'type': 'object', 'properties': {'employee_ids': {'type': 'array', 'description': 'A list of employee IDs.', 'items': {'type': 'integer'}}, 'timesheet_data': {'type': 'object', 'description': \"A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.\", 'additionalProperties': {'type': 'object', 'properties': {'date': {'type': 'string', 'description': 'Date in YYYY-MM-DD format.'}, 'hours_worked': {'type': 'number', 'description': 'Number of hours worked.'}, 'overtime_hours': {'type': 'number', 'description': 'Number of overtime hours.'}}, 'required': ['date', 'hours_worked']}}, 'action': {'type': 'string', 'description': \"The action to be taken. It should be either 'approval' or 'archival'.\"}}, 'required': ['employee_ids', 'timesheet_data', 'action']}, 'returns': {'type': 'object', 'properties': {'employee_ids': {'type': 'string', 'description': 'A dictionary with employee IDs as keys and the status of their timesheet submission as values.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-20",
    "description": {
        "function_snippet": "def distribute_performance_incentives(\n    employee_performance: Dict[str, float],\n    bonus_pool: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\n    \"\"\"\n",
        "function_description": {
            "name": "distribute_performance_incentives",
            "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_performance": {
                        "type": "object",
                        "description": "A dictionary with employee IDs as keys and their performance scores as values.",
                        "additionalProperties": {
                            "type": "number"
                        }
                    },
                    "bonus_pool": {
                        "type": "number",
                        "description": "The total amount of money available for distribution as bonuses."
                    }
                },
                "required": [
                    "employee_performance",
                    "bonus_pool"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "object",
                    "description": "A dictionary with employee IDs as keys and the bonus amount each employee receives as values.",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"distribute_performance_incentives\",\n        \"description\": \"Calculates and distributes performance-based incentives or bonuses to employees.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_performance\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary with employee IDs as keys and their performance scores as values.\",\n                    \"additionalProperties\": {\n                        \"type\": \"number\"\n                    }\n                },\n                \"bonus_pool\": {\n                    \"type\": \"number\",\n                    \"description\": \"The total amount of money available for distribution as bonuses.\"\n                }\n            },\n            \"required\": [\"employee_performance\", \"bonus_pool\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"object\",\n                \"description\": \"A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\",\n                \"additionalProperties\": {\n                    \"type\": \"number\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you distribute performance incentives to employees?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the employee performance scores and the total bonus pool amount.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here are the employee performance scores: {'A': 0.8, 'B': 0.9, 'C': 0.75}. The total bonus pool amount is $10000.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I will calculate and distribute the performance incentives now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"distribute_performance_incentives\",\n        \"parameters\": {\n            \"employee_performance\": {\n                \"A\": 0.8,\n                \"B\": 0.9,\n                \"C\": 0.75\n            },\n            \"bonus_pool\": 10000\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "distribute_performance_incentives",
            "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_performance": {
                        "type": "object",
                        "description": "A dictionary with employee IDs as keys and their performance scores as values.",
                        "additionalProperties": {
                            "type": "number"
                        }
                    },
                    "bonus_pool": {
                        "type": "number",
                        "description": "The total amount of money available for distribution as bonuses."
                    }
                },
                "required": [
                    "employee_performance",
                    "bonus_pool"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "object",
                    "description": "A dictionary with employee IDs as keys and the bonus amount each employee receives as values.",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you distribute performance incentives to employees?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the employee performance scores and the total bonus pool amount."
            },
            {
                "role": "user",
                "text": "Here are the employee performance scores: {'A': 0.8, 'B': 0.9, 'C': 0.75}. The total bonus pool amount is $10000."
            },
            {
                "role": "assistant",
                "text": "Great, I will calculate and distribute the performance incentives now."
            }
        ],
        "function_call": {
            "function_name": "distribute_performance_incentives",
            "parameters": {
                "employee_performance": {
                    "A": 0.8,
                    "B": 0.9,
                    "C": 0.75
                },
                "bonus_pool": 10000
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def distribute_performance_incentives(\\n    employee_performance: Dict[str, float],\\n    bonus_pool: float,\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Calculates and distributes performance-based incentives or bonuses to employees.\\n\\n    Parameters:\\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\\n    \"\"\"\\n', 'function_description': {'name': 'distribute_performance_incentives', 'description': 'Calculates and distributes performance-based incentives or bonuses to employees.', 'parameters': {'type': 'object', 'properties': {'employee_performance': {'type': 'object', 'description': 'A dictionary with employee IDs as keys and their performance scores as values.', 'additionalProperties': {'type': 'number'}}, 'bonus_pool': {'type': 'number', 'description': 'The total amount of money available for distribution as bonuses.'}}, 'required': ['employee_performance', 'bonus_pool']}, 'returns': {'type': 'object', 'properties': {'type': 'object', 'description': 'A dictionary with employee IDs as keys and the bonus amount each employee receives as values.', 'additionalProperties': {'type': 'number'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-21",
    "description": {
        "function_snippet": "def generate_employee_shift_schedules(\n    employee_availability: Dict[str, List[str]],\n    workload: Dict[str, int]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate employee shift schedules based on their availability and the workload.\n\n    Parameters:\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\n                                                      and the value is a list of days the employee is available.\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \n                                   and the value is the number of employees needed for that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \n                              and the value is a list of days the employee is scheduled to work.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "generate_employee_shift_schedules",
            "description": "Generate employee shift schedules based on their availability and the workload.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_availability": {
                        "type": "object",
                        "description": "A dictionary where each key is an employee name, and the value is a list of days the employee is available.",
                        "properties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "workload": {
                        "type": "object",
                        "description": "A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.",
                        "properties": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "employee_availability",
                    "workload"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"generate_employee_shift_schedules\",\n        \"description\": \"Generate employee shift schedules based on their availability and the workload.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_availability\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is an employee name, and the value is a list of days the employee is available.\",\n                    \"properties\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"workload\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.\",\n                    \"properties\": {\n                        \"type\": \"integer\"\n                    }\n                }\n            },\n            \"required\": [\"employee_availability\", \"workload\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you generate employee shift schedules for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide the employee availability and workload.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The employee availability is a dictionary where each key is an employee name and the value is a list of days the employee is available. The workload is a dictionary where each key is a day of the week and the value is the number of employees needed for that day.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Got it. Generating employee shift schedules now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_employee_shift_schedules\",\n        \"parameters\": {\n            \"employee_availability\": {\n                \"John\": [\"Monday\", \"Tuesday\", \"Thursday\"],\n                \"Alice\": [\"Tuesday\", \"Wednesday\", \"Friday\"],\n                \"Bob\": [\"Monday\", \"Wednesday\", \"Thursday\"],\n                \"Emma\": [\"Tuesday\", \"Thursday\", \"Friday\"]\n            },\n            \"workload\": {\n                \"Monday\": 2,\n                \"Tuesday\": 3,\n                \"Wednesday\": 2,\n                \"Thursday\": 3,\n                \"Friday\": 2\n            }\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "generate_employee_shift_schedules",
            "description": "Generate employee shift schedules based on their availability and the workload.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_availability": {
                        "type": "object",
                        "description": "A dictionary where each key is an employee name, and the value is a list of days the employee is available.",
                        "properties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "workload": {
                        "type": "object",
                        "description": "A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.",
                        "properties": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "employee_availability",
                    "workload"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Can you generate employee shift schedules for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide the employee availability and workload."
            },
            {
                "role": "user",
                "text": "The employee availability is a dictionary where each key is an employee name and the value is a list of days the employee is available. The workload is a dictionary where each key is a day of the week and the value is the number of employees needed for that day."
            },
            {
                "role": "assistant",
                "text": "Got it. Generating employee shift schedules now."
            }
        ],
        "function_call": {
            "function_name": "generate_employee_shift_schedules",
            "parameters": {
                "employee_availability": {
                    "John": [
                        "Monday",
                        "Tuesday",
                        "Thursday"
                    ],
                    "Alice": [
                        "Tuesday",
                        "Wednesday",
                        "Friday"
                    ],
                    "Bob": [
                        "Monday",
                        "Wednesday",
                        "Thursday"
                    ],
                    "Emma": [
                        "Tuesday",
                        "Thursday",
                        "Friday"
                    ]
                },
                "workload": {
                    "Monday": 2,
                    "Tuesday": 3,
                    "Wednesday": 2,
                    "Thursday": 3,
                    "Friday": 2
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def generate_employee_shift_schedules(\\n    employee_availability: Dict[str, List[str]],\\n    workload: Dict[str, int]\\n) -> Dict[str, List[str]]:\\n    \"\"\"\\n    Generate employee shift schedules based on their availability and the workload.\\n\\n    Parameters:\\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\\n                                                      and the value is a list of days the employee is available.\\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \\n                                   and the value is the number of employees needed for that day.\\n\\n    Returns:\\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \\n                              and the value is a list of days the employee is scheduled to work.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'generate_employee_shift_schedules', 'description': 'Generate employee shift schedules based on their availability and the workload.', 'parameters': {'type': 'object', 'properties': {'employee_availability': {'type': 'object', 'description': 'A dictionary where each key is an employee name, and the value is a list of days the employee is available.', 'properties': {'type': 'array', 'items': {'type': 'string'}}}, 'workload': {'type': 'object', 'description': 'A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.', 'properties': {'type': 'integer'}}}, 'required': ['employee_availability', 'workload']}, 'returns': {'type': 'object', 'properties': {'type': 'array', 'items': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-22",
    "description": {
        "function_snippet": "def create_and_approve_budgets(\n    budget_details: Dict[str, Union[float, str]],\n    approval_authority: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\n                                                       Each key is the name of a department or project,\n                                                       and the value is a tuple where the first item is the\n                                                       proposed budget amount and the second item is a brief\n                                                       description of the budget.\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\n\n    Returns:\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\n    \"\"\"\n",
        "function_description": {
            "name": "create_and_approve_budgets",
            "description": "Creates and approves budgets for different departments or projects.",
            "parameters": {
                "type": "object",
                "properties": {
                    "budget_details": {
                        "type": "object",
                        "description": "A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.",
                        "properties": {
                            "type": "object",
                            "properties": {
                                "type": "number"
                            }
                        }
                    },
                    "approval_authority": {
                        "type": "string",
                        "description": "The name of the person or body who has the authority to approve the budget."
                    }
                },
                "required": [
                    "budget_details",
                    "approval_authority"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "string"
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"create_and_approve_budgets\",\n        \"description\": \"Creates and approves budgets for different departments or projects.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"budget_details\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.\",\n                    \"properties\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"type\": \"number\"\n                        }\n                    }\n                },\n                \"approval_authority\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the person or body who has the authority to approve the budget.\"\n                }\n            },\n            \"required\": [\"budget_details\", \"approval_authority\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"string\"\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you create and approve budgets for different departments or projects?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the budget details and the name of the approval authority.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here are the budget details: {'Department A': (10000, 'Budget for department A'), 'Project B': (5000, 'Budget for project B')}. The approval authority is 'John Doe'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the budget details and the approval authority. I will create and approve the budgets now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"create_and_approve_budgets\",\n        \"parameters\": {\n            \"budget_details\": {\n                \"Department A\": [10000, \"Budget for department A\"],\n                \"Project B\": [5000, \"Budget for project B\"]\n            },\n            \"approval_authority\": \"John Doe\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "create_and_approve_budgets",
            "description": "Creates and approves budgets for different departments or projects.",
            "parameters": {
                "type": "object",
                "properties": {
                    "budget_details": {
                        "type": "object",
                        "description": "A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.",
                        "properties": {
                            "type": "object",
                            "properties": {
                                "type": "number"
                            }
                        }
                    },
                    "approval_authority": {
                        "type": "string",
                        "description": "The name of the person or body who has the authority to approve the budget."
                    }
                },
                "required": [
                    "budget_details",
                    "approval_authority"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "string"
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Can you create and approve budgets for different departments or projects?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the budget details and the name of the approval authority."
            },
            {
                "role": "user",
                "text": "Here are the budget details: {'Department A': (10000, 'Budget for department A'), 'Project B': (5000, 'Budget for project B')}. The approval authority is 'John Doe'."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the budget details and the approval authority. I will create and approve the budgets now."
            }
        ],
        "function_call": {
            "function_name": "create_and_approve_budgets",
            "parameters": {
                "budget_details": {
                    "Department A": [
                        10000,
                        "Budget for department A"
                    ],
                    "Project B": [
                        5000,
                        "Budget for project B"
                    ]
                },
                "approval_authority": "John Doe"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def create_and_approve_budgets(\\n    budget_details: Dict[str, Union[float, str]],\\n    approval_authority: str,\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Creates and approves budgets for different departments or projects.\\n\\n    Parameters:\\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\\n                                                       Each key is the name of a department or project,\\n                                                       and the value is a tuple where the first item is the\\n                                                       proposed budget amount and the second item is a brief\\n                                                       description of the budget.\\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\\n                        a string indicating whether the budget was approved (\\'Approved\\') or not (\\'Not Approved\\').\\n    \"\"\"\\n', 'function_description': {'name': 'create_and_approve_budgets', 'description': 'Creates and approves budgets for different departments or projects.', 'parameters': {'type': 'object', 'properties': {'budget_details': {'type': 'object', 'description': 'A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.', 'properties': {'type': 'object', 'properties': {'type': 'number'}}}, 'approval_authority': {'type': 'string', 'description': 'The name of the person or body who has the authority to approve the budget.'}}, 'required': ['budget_details', 'approval_authority']}, 'returns': {'type': 'object', 'properties': {'type': 'string'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-1",
    "description": {
        "function_snippet": "def schedule_meeting(\nmeeting_date: str,\nmeeting_time: str,\nattendees: List[str],\nmeeting_agenda: str,\n) -> Dict[str, str]:\n\"\"\"\nSchedules a meeting and returns the meeting details.\n\nParameters:\nmeeting_date (str): The date of the meeting in YYYY-MM-DD format.\nmeeting_time (str): The time of the meeting in HH:MM format.\nattendees (List[str]): A list of email addresses of the attendees.\nmeeting_agenda (str): A brief description of the meeting agenda.\n\nReturns:\nDict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\n\"\"\"",
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a meeting and returns the meeting details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "attendees": {
                        "type": "array",
                        "description": "A list of email addresses of the attendees.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_agenda": {
                        "type": "string",
                        "description": "A brief description of the meeting agenda."
                    }
                },
                "required": [
                    "meeting_date",
                    "meeting_time",
                    "attendees",
                    "meeting_agenda"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "meeting_id": {
                        "type": "string"
                    },
                    "meeting_link": {
                        "type": "string"
                    },
                    "confirmation_status": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"schedule_meeting\",\n        \"description\": \"Schedules a meeting and returns the meeting details.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The date of the meeting in YYYY-MM-DD format.\"\n                },\n                \"meeting_time\": {\n                    \"type\": \"string\",\n                    \"description\": \"The time of the meeting in HH:MM format.\"\n                },\n                \"attendees\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of email addresses of the attendees.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"meeting_agenda\": {\n                    \"type\": \"string\",\n                    \"description\": \"A brief description of the meeting agenda.\"\n                }\n            },\n            \"required\": [\"meeting_date\", \"meeting_time\", \"attendees\", \"meeting_agenda\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_id\": {\n                    \"type\": \"string\"\n                },\n                \"meeting_link\": {\n                    \"type\": \"string\"\n                },\n                \"confirmation_status\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me schedule a meeting?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! Please provide the following details for the meeting: meeting date, meeting time, attendees' email addresses, and meeting agenda.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The meeting date is tomorrow, the meeting time is 2:00 PM, the attendees' email addresses are [email1@example.com, email2@example.com], and the meeting agenda is to discuss project updates.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for the information. I will schedule the meeting and provide you with the meeting details.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"schedule_meeting\",\n        \"parameters\": {\n            \"meeting_date\": \"2022-01-01\",\n            \"meeting_time\": \"14:00\",\n            \"attendees\": [\"email1@example.com\", \"email2@example.com\"],\n            \"meeting_agenda\": \"Discuss project updates\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "schedule_meeting",
            "description": "Schedules a meeting and returns the meeting details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_date": {
                        "type": "string",
                        "description": "The date of the meeting in YYYY-MM-DD format."
                    },
                    "meeting_time": {
                        "type": "string",
                        "description": "The time of the meeting in HH:MM format."
                    },
                    "attendees": {
                        "type": "array",
                        "description": "A list of email addresses of the attendees.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meeting_agenda": {
                        "type": "string",
                        "description": "A brief description of the meeting agenda."
                    }
                },
                "required": [
                    "meeting_date",
                    "meeting_time",
                    "attendees",
                    "meeting_agenda"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "meeting_id": {
                        "type": "string"
                    },
                    "meeting_link": {
                        "type": "string"
                    },
                    "confirmation_status": {
                        "type": "string"
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me schedule a meeting?"
            },
            {
                "role": "assistant",
                "text": "Of course! Please provide the following details for the meeting: meeting date, meeting time, attendees' email addresses, and meeting agenda."
            },
            {
                "role": "user",
                "text": "The meeting date is tomorrow, the meeting time is 2:00 PM, the attendees' email addresses are [email1@example.com, email2@example.com], and the meeting agenda is to discuss project updates."
            },
            {
                "role": "assistant",
                "text": "Thank you for the information. I will schedule the meeting and provide you with the meeting details."
            }
        ],
        "function_call": {
            "function_name": "schedule_meeting",
            "parameters": {
                "meeting_date": "2022-01-01",
                "meeting_time": "14:00",
                "attendees": [
                    "email1@example.com",
                    "email2@example.com"
                ],
                "meeting_agenda": "Discuss project updates"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def schedule_meeting(\\nmeeting_date: str,\\nmeeting_time: str,\\nattendees: List[str],\\nmeeting_agenda: str,\\n) -> Dict[str, str]:\\n\"\"\"\\nSchedules a meeting and returns the meeting details.\\n\\nParameters:\\nmeeting_date (str): The date of the meeting in YYYY-MM-DD format.\\nmeeting_time (str): The time of the meeting in HH:MM format.\\nattendees (List[str]): A list of email addresses of the attendees.\\nmeeting_agenda (str): A brief description of the meeting agenda.\\n\\nReturns:\\nDict[str, str]: A dictionary with \\'meeting_id\\', \\'meeting_link\\' and \\'confirmation_status\\' as keys.\\n\"\"\"', 'function_description': {'name': 'schedule_meeting', 'description': 'Schedules a meeting and returns the meeting details.', 'parameters': {'type': 'object', 'properties': {'meeting_date': {'type': 'string', 'description': 'The date of the meeting in YYYY-MM-DD format.'}, 'meeting_time': {'type': 'string', 'description': 'The time of the meeting in HH:MM format.'}, 'attendees': {'type': 'array', 'description': 'A list of email addresses of the attendees.', 'items': {'type': 'string'}}, 'meeting_agenda': {'type': 'string', 'description': 'A brief description of the meeting agenda.'}}, 'required': ['meeting_date', 'meeting_time', 'attendees', 'meeting_agenda']}, 'returns': {'type': 'object', 'properties': {'meeting_id': {'type': 'string'}, 'meeting_link': {'type': 'string'}, 'confirmation_status': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-2",
    "description": {
        "function_snippet": "def generate_sales_report(\n    start_date: str,\n    end_date: str,\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report for a given date range.\n\n    Parameters:\n        start_date (str): The start date of the report in YYYY-MM-DD format.\n        end_date (str): The end date of the report in YYYY-MM-DD format.\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"\n",
        "function_description": {
            "name": "generate_sales_report",
            "description": "Generates a sales report for a given date range.",
            "parameters": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the report in YYYY-MM-DD format."
                    },
                    "end_date": {
                        "type": "string",
                        "description": "The end date of the report in YYYY-MM-DD format."
                    },
                    "sales_data": {
                        "type": "array",
                        "description": "A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "product": {
                                    "type": "string"
                                },
                                "quantity": {
                                    "type": "integer"
                                },
                                "price": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "product",
                                "quantity",
                                "price"
                            ]
                        }
                    }
                },
                "required": [
                    "start_date",
                    "end_date",
                    "sales_data"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "total_sales": {
                        "type": "float",
                        "description": "The total sales for the given date range."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"generate_sales_report\",\n        \"description\": \"Generates a sales report for a given date range.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the report in YYYY-MM-DD format.\"\n                },\n                \"end_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The end date of the report in YYYY-MM-DD format.\"\n                },\n                \"sales_data\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"product\": {\"type\": \"string\"},\n                            \"quantity\": {\"type\": \"integer\"},\n                            \"price\": {\"type\": \"number\"}\n                        },\n                        \"required\": [\"product\", \"quantity\", \"price\"]\n                    }\n                }\n            },\n            \"required\": [\"start_date\", \"end_date\", \"sales_data\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"total_sales\": {\"type\": \"float\", \"description\": \"The total sales for the given date range.\"}\n            }\n        }\n    },\n    \"conversation\": [\n        {\"role\": \"user\", \"text\": \"Hey, can you generate a sales report for me?\"},\n        {\"role\": \"assistant\", \"text\": \"Sure, I can do that. Can you please provide me with the start date and end date of the report?\"},\n        {\"role\": \"user\", \"text\": \"The start date is '2022-01-01' and the end date is '2022-01-31'.\"},\n        {\"role\": \"assistant\", \"text\": \"Thank you. Now, I need the sales data. Please provide a list of dictionaries containing sales details with 'product', 'quantity', and 'price' keys.\"},\n        {\"role\": \"user\", \"text\": \"Here is the sales data: [{'product': 'A', 'quantity': 10, 'price': 5.99}, {'product': 'B', 'quantity': 5, 'price': 9.99}, {'product': 'C', 'quantity': 8, 'price': 3.99}].\"},\n        {\"role\": \"assistant\", \"text\": \"Got it. I will generate the sales report now.\"},\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_sales_report\",\n        \"parameters\": {\n            \"start_date\": \"2022-01-01\",\n            \"end_date\": \"2022-01-31\",\n            \"sales_data\": [\n                {\"product\": \"A\", \"quantity\": 10, \"price\": 5.99},\n                {\"product\": \"B\", \"quantity\": 5, \"price\": 9.99},\n                {\"product\": \"C\", \"quantity\": 8, \"price\": 3.99}\n            ]\n        }\n    }\n}",
    "data": "{\n    \"function_description\": {\n        \"name\": \"generate_sales_report\",\n        \"description\": \"Generates a sales report for a given date range.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the report in YYYY-MM-DD format.\"\n                },\n                \"end_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The end date of the report in YYYY-MM-DD format.\"\n                },\n                \"sales_data\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"product\": {\"type\": \"string\"},\n                            \"quantity\": {\"type\": \"integer\"},\n                            \"price\": {\"type\": \"number\"}\n                        },\n                        \"required\": [\"product\", \"quantity\", \"price\"]\n                    }\n                }\n            },\n            \"required\": [\"start_date\", \"end_date\", \"sales_data\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"total_sales\": {\"type\": \"float\", \"description\": \"The total sales for the given date range.\"}\n            }\n        }\n    },\n    \"conversation\": [\n        {\"role\": \"user\", \"text\": \"Hey, can you generate a sales report for me?\"},\n        {\"role\": \"assistant\", \"text\": \"Sure, I can do that. Can you please provide me with the start date and end date of the report?\"},\n        {\"role\": \"user\", \"text\": \"The start date is '2022-01-01' and the end date is '2022-01-31'.\"},\n        {\"role\": \"assistant\", \"text\": \"Thank you. Now, I need the sales data. Please provide a list of dictionaries containing sales details with 'product', 'quantity', and 'price' keys.\"},\n        {\"role\": \"user\", \"text\": \"Here is the sales data: [{'product': 'A', 'quantity': 10, 'price': 5.99}, {'product': 'B', 'quantity': 5, 'price': 9.99}, {'product': 'C', 'quantity': 8, 'price': 3.99}].\"},\n        {\"role\": \"assistant\", \"text\": \"Got it. I will generate the sales report now.\"},\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_sales_report\",\n        \"parameters\": {\n            \"start_date\": \"2022-01-01\",\n            \"end_date\": \"2022-01-31\",\n            \"sales_data\": [\n                {\"product\": \"A\", \"quantity\": 10, \"price\": 5.99},\n                {\"product\": \"B\", \"quantity\": 5, \"price\": 9.99},\n                {\"product\": \"C\", \"quantity\": 8, \"price\": 3.99}\n            ]\n        }\n    }\n}",
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def generate_sales_report(\\n    start_date: str,\\n    end_date: str,\\n    sales_data: List[Dict[str, Union[str, int, float]]]\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Generates a sales report for a given date range.\\n\\n    Parameters:\\n        start_date (str): The start date of the report in YYYY-MM-DD format.\\n        end_date (str): The end date of the report in YYYY-MM-DD format.\\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\\n                                                              Each dictionary should have \\'product\\', \\'quantity\\' and \\'price\\' keys.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with \\'total_sales\\' as a key and the total sales as a value.\\n    \"\"\"\\n', 'function_description': {'name': 'generate_sales_report', 'description': 'Generates a sales report for a given date range.', 'parameters': {'type': 'object', 'properties': {'start_date': {'type': 'string', 'description': 'The start date of the report in YYYY-MM-DD format.'}, 'end_date': {'type': 'string', 'description': 'The end date of the report in YYYY-MM-DD format.'}, 'sales_data': {'type': 'array', 'description': \"A list of dictionaries containing sales details. Each dictionary should have 'product', 'quantity' and 'price' keys.\", 'items': {'type': 'object', 'properties': {'product': {'type': 'string'}, 'quantity': {'type': 'integer'}, 'price': {'type': 'number'}}, 'required': ['product', 'quantity', 'price']}}}, 'required': ['start_date', 'end_date', 'sales_data']}, 'returns': {'type': 'object', 'properties': {'total_sales': {'type': 'float', 'description': 'The total sales for the given date range.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-3",
    "description": {
        "function_snippet": "def perform_employee_evaluation(\n    employee_id: str,\n    performance_metrics: Dict[str, Union[int, float]]\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\n\n    Parameters:\n        employee_id (str): The unique identifier of the employee to be evaluated.\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\n                                                            Each key represents a metric, and the value is the score.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\n    \"\"\"",
        "function_description": {
            "name": "perform_employee_evaluation",
            "description": "Performs an employee evaluation based on given performance metrics and returns the evaluation results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee to be evaluated."
                    },
                    "performance_metrics": {
                        "type": "object",
                        "description": "A dictionary containing performance metrics. Each key represents a metric, and the value is the score.",
                        "additionalProperties": {
                            "type": [
                                "integer",
                                "number"
                            ]
                        }
                    }
                },
                "required": [
                    "employee_id",
                    "performance_metrics"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "average_score": {
                        "type": [
                            "integer",
                            "number"
                        ]
                    },
                    "evaluation_status": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"perform_employee_evaluation\",\n        \"description\": \"Performs an employee evaluation based on given performance metrics and returns the evaluation results.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the employee to be evaluated.\"\n                },\n                \"performance_metrics\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing performance metrics. Each key represents a metric, and the value is the score.\",\n                    \"additionalProperties\": {\n                        \"type\": [\"integer\", \"number\"]\n                    }\n                }\n            },\n            \"required\": [\"employee_id\", \"performance_metrics\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\"type\": \"string\"},\n                \"average_score\": {\"type\": [\"integer\", \"number\"]},\n                \"evaluation_status\": {\"type\": \"string\"}\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you perform an employee evaluation for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the employee ID and the performance metrics.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The employee ID is '12345' and the performance metrics are {'metric1': 9, 'metric2': 8.5, 'metric3': 7}.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great! I will perform the evaluation now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"perform_employee_evaluation\",\n        \"parameters\": {\n            \"employee_id\": \"12345\",\n            \"performance_metrics\": {\n                \"metric1\": 9,\n                \"metric2\": 8.5,\n                \"metric3\": 7\n            }\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "perform_employee_evaluation",
            "description": "Performs an employee evaluation based on given performance metrics and returns the evaluation results.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "description": "The unique identifier of the employee to be evaluated."
                    },
                    "performance_metrics": {
                        "type": "object",
                        "description": "A dictionary containing performance metrics. Each key represents a metric, and the value is the score.",
                        "additionalProperties": {
                            "type": [
                                "integer",
                                "number"
                            ]
                        }
                    }
                },
                "required": [
                    "employee_id",
                    "performance_metrics"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "average_score": {
                        "type": [
                            "integer",
                            "number"
                        ]
                    },
                    "evaluation_status": {
                        "type": "string"
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you perform an employee evaluation for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the employee ID and the performance metrics."
            },
            {
                "role": "user",
                "text": "The employee ID is '12345' and the performance metrics are {'metric1': 9, 'metric2': 8.5, 'metric3': 7}."
            },
            {
                "role": "assistant",
                "text": "Great! I will perform the evaluation now."
            }
        ],
        "function_call": {
            "function_name": "perform_employee_evaluation",
            "parameters": {
                "employee_id": "12345",
                "performance_metrics": {
                    "metric1": 9,
                    "metric2": 8.5,
                    "metric3": 7
                }
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def perform_employee_evaluation(\\n    employee_id: str,\\n    performance_metrics: Dict[str, Union[int, float]]\\n) -> Dict[str, Union[str, int, float]]:\\n    \"\"\"\\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\\n\\n    Parameters:\\n        employee_id (str): The unique identifier of the employee to be evaluated.\\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\\n                                                            Each key represents a metric, and the value is the score.\\n\\n    Returns:\\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\\n                                            It includes \\'employee_id\\', \\'average_score\\', and \\'evaluation_status\\' keys.\\n    \"\"\"', 'function_description': {'name': 'perform_employee_evaluation', 'description': 'Performs an employee evaluation based on given performance metrics and returns the evaluation results.', 'parameters': {'type': 'object', 'properties': {'employee_id': {'type': 'string', 'description': 'The unique identifier of the employee to be evaluated.'}, 'performance_metrics': {'type': 'object', 'description': 'A dictionary containing performance metrics. Each key represents a metric, and the value is the score.', 'additionalProperties': {'type': ['integer', 'number']}}}, 'required': ['employee_id', 'performance_metrics']}, 'returns': {'type': 'object', 'properties': {'employee_id': {'type': 'string'}, 'average_score': {'type': ['integer', 'number']}, 'evaluation_status': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-4",
    "description": {
        "function_snippet": "def create_new_customer_account(\n    customer_name: str,\n    customer_email: str,\n    customer_password: str,\n) -> Dict[str, str]:\n    \n    \"\"\"\n    Creates an account for a new customer and returns the customer's account details.\n\n    Parameters:\n        customer_name (str): The name of the customer.\n        customer_email (str): The email address of the customer.\n        customer_password (str): The password for the new customer's account.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the customer's account details.\n                        The dictionary has 'customer_name', 'customer_email', \n                        and 'customer_id' as keys.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "create_new_customer_account",
            "description": "Creates an account for a new customer and returns the customer's account details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The name of the customer."
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "customer_password": {
                        "type": "string",
                        "description": "The password for the new customer's account."
                    }
                },
                "required": [
                    "customer_name",
                    "customer_email",
                    "customer_password"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The name of the customer."
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The ID of the customer's account."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"create_new_customer_account\",\n        \"description\": \"Creates an account for a new customer and returns the customer's account details.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the customer.\"\n                },\n                \"customer_email\": {\n                    \"type\": \"string\",\n                    \"description\": \"The email address of the customer.\"\n                },\n                \"customer_password\": {\n                    \"type\": \"string\",\n                    \"description\": \"The password for the new customer's account.\"\n                }\n            },\n            \"required\": [\"customer_name\", \"customer_email\", \"customer_password\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the customer.\"\n                },\n                \"customer_email\": {\n                    \"type\": \"string\",\n                    \"description\": \"The email address of the customer.\"\n                },\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the customer's account.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me create a new customer account?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can help you with that. Please provide the following details: customer name, customer email, and customer password.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The customer name is 'John Doe', the customer email is 'johndoe@example.com', and the customer password is 'password123'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the details. I will now create a new customer account with the given information.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"create_new_customer_account\",\n        \"parameters\": {\n            \"customer_name\": \"John Doe\",\n            \"customer_email\": \"johndoe@example.com\",\n            \"customer_password\": \"password123\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "create_new_customer_account",
            "description": "Creates an account for a new customer and returns the customer's account details.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The name of the customer."
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "customer_password": {
                        "type": "string",
                        "description": "The password for the new customer's account."
                    }
                },
                "required": [
                    "customer_name",
                    "customer_email",
                    "customer_password"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "customer_name": {
                        "type": "string",
                        "description": "The name of the customer."
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "The email address of the customer."
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The ID of the customer's account."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me create a new customer account?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Please provide the following details: customer name, customer email, and customer password."
            },
            {
                "role": "user",
                "text": "The customer name is 'John Doe', the customer email is 'johndoe@example.com', and the customer password is 'password123'."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the details. I will now create a new customer account with the given information."
            }
        ],
        "function_call": {
            "function_name": "create_new_customer_account",
            "parameters": {
                "customer_name": "John Doe",
                "customer_email": "johndoe@example.com",
                "customer_password": "password123"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def create_new_customer_account(\\n    customer_name: str,\\n    customer_email: str,\\n    customer_password: str,\\n) -> Dict[str, str]:\\n    \\n    \"\"\"\\n    Creates an account for a new customer and returns the customer\\'s account details.\\n\\n    Parameters:\\n        customer_name (str): The name of the customer.\\n        customer_email (str): The email address of the customer.\\n        customer_password (str): The password for the new customer\\'s account.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary containing the customer\\'s account details.\\n                        The dictionary has \\'customer_name\\', \\'customer_email\\', \\n                        and \\'customer_id\\' as keys.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'create_new_customer_account', 'description': \"Creates an account for a new customer and returns the customer's account details.\", 'parameters': {'type': 'object', 'properties': {'customer_name': {'type': 'string', 'description': 'The name of the customer.'}, 'customer_email': {'type': 'string', 'description': 'The email address of the customer.'}, 'customer_password': {'type': 'string', 'description': \"The password for the new customer's account.\"}}, 'required': ['customer_name', 'customer_email', 'customer_password']}, 'returns': {'type': 'object', 'properties': {'customer_name': {'type': 'string', 'description': 'The name of the customer.'}, 'customer_email': {'type': 'string', 'description': 'The email address of the customer.'}, 'customer_id': {'type': 'string', 'description': \"The ID of the customer's account.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-5",
    "description": {
        "function_snippet": "def calculate_payroll(\n    hours_worked: float,\n    hourly_rate: float,\n    overtime_rate: float = 1.5,\n    standard_hours: float = 40.0,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for an employee based on the hours they worked,\n    their hourly rate, and the overtime rate.\n\n    Parameters:\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The employee's pay rate per hour.\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.",
            "parameters": {
                "type": "object",
                "properties": {
                    "hours_worked": {
                        "type": "float",
                        "description": "The number of hours the employee worked."
                    },
                    "hourly_rate": {
                        "type": "float",
                        "description": "The employee's pay rate per hour."
                    },
                    "overtime_rate": {
                        "type": "float",
                        "description": "The rate for overtime pay. Defaults to 1.5."
                    },
                    "standard_hours": {
                        "type": "float",
                        "description": "The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0."
                    }
                },
                "required": [
                    "hours_worked",
                    "hourly_rate"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "regular_pay": {
                        "type": "float",
                        "description": "The amount of regular pay based on the hours worked and hourly rate."
                    },
                    "overtime_pay": {
                        "type": "float",
                        "description": "The amount of overtime pay based on the hours worked, hourly rate, and overtime rate."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"calculate_payroll\",\n        \"description\": \"Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"hours_worked\": {\n                    \"type\": \"float\",\n                    \"description\": \"The number of hours the employee worked.\"\n                },\n                \"hourly_rate\": {\n                    \"type\": \"float\",\n                    \"description\": \"The employee's pay rate per hour.\"\n                },\n                \"overtime_rate\": {\n                    \"type\": \"float\",\n                    \"description\": \"The rate for overtime pay. Defaults to 1.5.\"\n                },\n                \"standard_hours\": {\n                    \"type\": \"float\",\n                    \"description\": \"The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\"\n                }\n            },\n            \"required\": [\"hours_worked\", \"hourly_rate\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"regular_pay\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount of regular pay based on the hours worked and hourly rate.\"\n                },\n                \"overtime_pay\": {\n                    \"type\": \"float\",\n                    \"description\": \"The amount of overtime pay based on the hours worked, hourly rate, and overtime rate.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you calculate my payroll?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide the following information:\\n1. Number of hours worked\\n2. Hourly rate\\n3. Overtime rate (optional)\\n4. Standard hours in a work week (optional)\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"I worked 45 hours this week and my hourly rate is $15.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I will calculate your payroll now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"calculate_payroll\",\n        \"parameters\": {\n            \"hours_worked\": 45,\n            \"hourly_rate\": 15\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.",
            "parameters": {
                "type": "object",
                "properties": {
                    "hours_worked": {
                        "type": "float",
                        "description": "The number of hours the employee worked."
                    },
                    "hourly_rate": {
                        "type": "float",
                        "description": "The employee's pay rate per hour."
                    },
                    "overtime_rate": {
                        "type": "float",
                        "description": "The rate for overtime pay. Defaults to 1.5."
                    },
                    "standard_hours": {
                        "type": "float",
                        "description": "The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0."
                    }
                },
                "required": [
                    "hours_worked",
                    "hourly_rate"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "regular_pay": {
                        "type": "float",
                        "description": "The amount of regular pay based on the hours worked and hourly rate."
                    },
                    "overtime_pay": {
                        "type": "float",
                        "description": "The amount of overtime pay based on the hours worked, hourly rate, and overtime rate."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you calculate my payroll?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide the following information:\n1. Number of hours worked\n2. Hourly rate\n3. Overtime rate (optional)\n4. Standard hours in a work week (optional)"
            },
            {
                "role": "user",
                "text": "I worked 45 hours this week and my hourly rate is $15."
            },
            {
                "role": "assistant",
                "text": "Great, I will calculate your payroll now."
            }
        ],
        "function_call": {
            "function_name": "calculate_payroll",
            "parameters": {
                "hours_worked": 45,
                "hourly_rate": 15
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def calculate_payroll(\\n    hours_worked: float,\\n    hourly_rate: float,\\n    overtime_rate: float = 1.5,\\n    standard_hours: float = 40.0,\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Calculates the payroll for an employee based on the hours they worked,\\n    their hourly rate, and the overtime rate.\\n\\n    Parameters:\\n        hours_worked (float): The number of hours the employee worked.\\n        hourly_rate (float): The employee\\'s pay rate per hour.\\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with \\'regular_pay\\' and \\'overtime_pay\\' as keys and the corresponding amounts as values.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'calculate_payroll', 'description': 'Calculates the payroll for an employee based on the hours they worked, their hourly rate, and the overtime rate.', 'parameters': {'type': 'object', 'properties': {'hours_worked': {'type': 'float', 'description': 'The number of hours the employee worked.'}, 'hourly_rate': {'type': 'float', 'description': \"The employee's pay rate per hour.\"}, 'overtime_rate': {'type': 'float', 'description': 'The rate for overtime pay. Defaults to 1.5.'}, 'standard_hours': {'type': 'float', 'description': 'The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.'}}, 'required': ['hours_worked', 'hourly_rate']}, 'returns': {'type': 'object', 'properties': {'regular_pay': {'type': 'float', 'description': 'The amount of regular pay based on the hours worked and hourly rate.'}, 'overtime_pay': {'type': 'float', 'description': 'The amount of overtime pay based on the hours worked, hourly rate, and overtime rate.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-6",
    "description": {
        "function_snippet": "def calculate_payroll(\n    team_members: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates payroll for a team and returns the total payroll.\n\n    Parameters:\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\n    \"\"\"\n\n",
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates payroll for a team and returns the total payroll.",
            "parameters": {
                "type": "object",
                "properties": {
                    "team_members": {
                        "type": "array",
                        "description": "A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "hours_worked": {
                                    "type": "number"
                                },
                                "hourly_rate": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "name",
                                "hours_worked",
                                "hourly_rate"
                            ]
                        }
                    }
                },
                "required": [
                    "team_members"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "float",
                        "description": "A dictionary with each team member's name as a key and their total pay as a value."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"calculate_payroll\",\n        \"description\": \"Calculates payroll for a team and returns the total payroll.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"team_members\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"hours_worked\": {\n                                \"type\": \"number\"\n                            },\n                            \"hourly_rate\": {\n                                \"type\": \"number\"\n                            }\n                        },\n                        \"required\": [\"name\", \"hours_worked\", \"hourly_rate\"]\n                    }\n                }\n            },\n            \"required\": [\"team_members\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"float\",\n                    \"description\": \"A dictionary with each team member's name as a key and their total pay as a value.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you calculate the payroll for my team?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the details of your team members.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"I have a list of team members with their names, hours worked, and hourly rates.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, please provide me with the list of team members.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here is the list: [{'name': 'John', 'hours_worked': 40, 'hourly_rate': 15.5}, {'name': 'Alice', 'hours_worked': 35, 'hourly_rate': 20.0}, {'name': 'Bob', 'hours_worked': 45, 'hourly_rate': 18.75}]\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thanks for providing the details. I will calculate the payroll for your team now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"calculate_payroll\",\n        \"parameters\": {\n            \"team_members\": [\n                {\n                    \"name\": \"John\",\n                    \"hours_worked\": 40,\n                    \"hourly_rate\": 15.5\n                },\n                {\n                    \"name\": \"Alice\",\n                    \"hours_worked\": 35,\n                    \"hourly_rate\": 20.0\n                },\n                {\n                    \"name\": \"Bob\",\n                    \"hours_worked\": 45,\n                    \"hourly_rate\": 18.75\n                }\n            ]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "calculate_payroll",
            "description": "Calculates payroll for a team and returns the total payroll.",
            "parameters": {
                "type": "object",
                "properties": {
                    "team_members": {
                        "type": "array",
                        "description": "A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "hours_worked": {
                                    "type": "number"
                                },
                                "hourly_rate": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "name",
                                "hours_worked",
                                "hourly_rate"
                            ]
                        }
                    }
                },
                "required": [
                    "team_members"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "float",
                        "description": "A dictionary with each team member's name as a key and their total pay as a value."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you calculate the payroll for my team?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the details of your team members."
            },
            {
                "role": "user",
                "text": "I have a list of team members with their names, hours worked, and hourly rates."
            },
            {
                "role": "assistant",
                "text": "Great, please provide me with the list of team members."
            },
            {
                "role": "user",
                "text": "Here is the list: [{'name': 'John', 'hours_worked': 40, 'hourly_rate': 15.5}, {'name': 'Alice', 'hours_worked': 35, 'hourly_rate': 20.0}, {'name': 'Bob', 'hours_worked': 45, 'hourly_rate': 18.75}]"
            },
            {
                "role": "assistant",
                "text": "Thanks for providing the details. I will calculate the payroll for your team now."
            }
        ],
        "function_call": {
            "function_name": "calculate_payroll",
            "parameters": {
                "team_members": [
                    {
                        "name": "John",
                        "hours_worked": 40,
                        "hourly_rate": 15.5
                    },
                    {
                        "name": "Alice",
                        "hours_worked": 35,
                        "hourly_rate": 20.0
                    },
                    {
                        "name": "Bob",
                        "hours_worked": 45,
                        "hourly_rate": 18.75
                    }
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def calculate_payroll(\\n    team_members: List[Dict[str, Union[str, int, float]]]\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Calculates payroll for a team and returns the total payroll.\\n\\n    Parameters:\\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\\n                                                                Each dictionary should have \\'name\\', \\'hours_worked\\' and \\'hourly_rate\\' keys.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with each team member\\'s name as a key and their total pay as a value.\\n    \"\"\"\\n\\n', 'function_description': {'name': 'calculate_payroll', 'description': 'Calculates payroll for a team and returns the total payroll.', 'parameters': {'type': 'object', 'properties': {'team_members': {'type': 'array', 'description': \"A list of dictionaries containing team member details. Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\", 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'hours_worked': {'type': 'number'}, 'hourly_rate': {'type': 'number'}}, 'required': ['name', 'hours_worked', 'hourly_rate']}}}, 'required': ['team_members']}, 'returns': {'type': 'object', 'properties': {'name': {'type': 'float', 'description': \"A dictionary with each team member's name as a key and their total pay as a value.\"}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-7",
    "description": {
        "function_snippet": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates inventory stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        quantity (int): The quantity to update the inventory with.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the updated inventory data.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "update_inventory_stock_data",
            "description": "Updates inventory stock data for a specific product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The quantity to update the inventory with."
                    }
                },
                "required": [
                    "product_id",
                    "quantity"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "inventory_data": {
                        "type": "any",
                        "description": "A dictionary containing the updated inventory data."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"update_inventory_stock_data\",\n        \"description\": \"Updates inventory stock data for a specific product.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the product.\"\n                },\n                \"quantity\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The quantity to update the inventory with.\"\n                }\n            },\n            \"required\": [\"product_id\", \"quantity\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"inventory_data\": {\n                    \"type\": \"any\",\n                    \"description\": \"A dictionary containing the updated inventory data.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you update the stock data for product XYZ?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the product ID and the quantity you want to update.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The product ID is 'XYZ' and I want to update the quantity to 100.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm updating the stock data for product XYZ with a quantity of 100.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"update_inventory_stock_data\",\n        \"parameters\": {\n            \"product_id\": \"XYZ\",\n            \"quantity\": 100\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "update_inventory_stock_data",
            "description": "Updates inventory stock data for a specific product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The ID of the product."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The quantity to update the inventory with."
                    }
                },
                "required": [
                    "product_id",
                    "quantity"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "inventory_data": {
                        "type": "any",
                        "description": "A dictionary containing the updated inventory data."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you update the stock data for product XYZ?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me with the product ID and the quantity you want to update."
            },
            {
                "role": "user",
                "text": "The product ID is 'XYZ' and I want to update the quantity to 100."
            },
            {
                "role": "assistant",
                "text": "Great, I'm updating the stock data for product XYZ with a quantity of 100."
            }
        ],
        "function_call": {
            "function_name": "update_inventory_stock_data",
            "parameters": {
                "product_id": "XYZ",
                "quantity": 100
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def update_inventory_stock_data(\\n    product_id: str,\\n    quantity: int,\\n) -> Dict[str, Any]:\\n    \"\"\"\\n    Updates inventory stock data for a specific product.\\n\\n    Parameters:\\n        product_id (str): The ID of the product.\\n        quantity (int): The quantity to update the inventory with.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary containing the updated inventory data.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'update_inventory_stock_data', 'description': 'Updates inventory stock data for a specific product.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'string', 'description': 'The ID of the product.'}, 'quantity': {'type': 'integer', 'description': 'The quantity to update the inventory with.'}}, 'required': ['product_id', 'quantity']}, 'returns': {'type': 'object', 'properties': {'inventory_data': {'type': 'any', 'description': 'A dictionary containing the updated inventory data.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-8",
    "description": {
        "function_snippet": "def track_shipment_status(\n    tracking_number: str,\n    shipping_company: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment and returns the current status and location.\n\n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        shipping_company (str): The name of the shipping company.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "track_shipment_status",
            "description": "Tracks the status of a shipment and returns the current status and location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tracking_number": {
                        "type": "string",
                        "description": "The tracking number of the shipment."
                    },
                    "shipping_company": {
                        "type": "string",
                        "description": "The name of the shipping company."
                    }
                },
                "required": [
                    "tracking_number",
                    "shipping_company"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the shipment."
                    },
                    "location": {
                        "type": "string",
                        "description": "The current location of the shipment."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"track_shipment_status\",\n        \"description\": \"Tracks the status of a shipment and returns the current status and location.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"tracking_number\": {\n                    \"type\": \"string\",\n                    \"description\": \"The tracking number of the shipment.\"\n                },\n                \"shipping_company\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the shipping company.\"\n                }\n            },\n            \"required\": [\"tracking_number\", \"shipping_company\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current status of the shipment.\"\n                },\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The current location of the shipment.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you track the status of my shipment?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Can you please provide me with the tracking number and the name of the shipping company?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, my tracking number is '123456789' and the shipping company is 'ABC Shipping'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm now tracking the status of your shipment with tracking number '123456789' and shipping company 'ABC Shipping'.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"track_shipment_status\",\n        \"parameters\": {\n            \"tracking_number\": \"123456789\",\n            \"shipping_company\": \"ABC Shipping\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "track_shipment_status",
            "description": "Tracks the status of a shipment and returns the current status and location.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tracking_number": {
                        "type": "string",
                        "description": "The tracking number of the shipment."
                    },
                    "shipping_company": {
                        "type": "string",
                        "description": "The name of the shipping company."
                    }
                },
                "required": [
                    "tracking_number",
                    "shipping_company"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the shipment."
                    },
                    "location": {
                        "type": "string",
                        "description": "The current location of the shipment."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you track the status of my shipment?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you please provide me with the tracking number and the name of the shipping company?"
            },
            {
                "role": "user",
                "text": "Yes, my tracking number is '123456789' and the shipping company is 'ABC Shipping'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm now tracking the status of your shipment with tracking number '123456789' and shipping company 'ABC Shipping'."
            }
        ],
        "function_call": {
            "function_name": "track_shipment_status",
            "parameters": {
                "tracking_number": "123456789",
                "shipping_company": "ABC Shipping"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def track_shipment_status(\\n    tracking_number: str,\\n    shipping_company: str,\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Tracks the status of a shipment and returns the current status and location.\\n\\n    Parameters:\\n        tracking_number (str): The tracking number of the shipment.\\n        shipping_company (str): The name of the shipping company.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with \\'status\\' and \\'location\\' as keys and the current status and location as values.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'track_shipment_status', 'description': 'Tracks the status of a shipment and returns the current status and location.', 'parameters': {'type': 'object', 'properties': {'tracking_number': {'type': 'string', 'description': 'The tracking number of the shipment.'}, 'shipping_company': {'type': 'string', 'description': 'The name of the shipping company.'}}, 'required': ['tracking_number', 'shipping_company']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The current status of the shipment.'}, 'location': {'type': 'string', 'description': 'The current location of the shipment.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-9",
    "description": {
        "function_snippet": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Assigns a customer support ticket to a specified agent.\n\n    Parameters:\n        ticket_id (int): The id of the ticket that needs to be assigned.\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\n\n    Returns:\n        Dict[str, Any]: A dictionary with details of the assignment process. \n                        This can include keys like 'status' and 'message'.\n    \"\"\"\n",
        "function_description": {
            "name": "assign_ticket_to_agent",
            "description": "Assigns a customer support ticket to a specified agent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ticket_id": {
                        "type": "integer",
                        "description": "The id of the ticket that needs to be assigned."
                    },
                    "agent_id": {
                        "type": "integer",
                        "description": "The id of the agent to whom the ticket will be assigned."
                    }
                },
                "required": [
                    "ticket_id",
                    "agent_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the assignment process."
                    },
                    "message": {
                        "type": "string",
                        "description": "Additional message regarding the assignment process."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"assign_ticket_to_agent\",\n        \"description\": \"Assigns a customer support ticket to a specified agent.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ticket_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The id of the ticket that needs to be assigned.\"\n                },\n                \"agent_id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The id of the agent to whom the ticket will be assigned.\"\n                }\n            },\n            \"required\": [\"ticket_id\", \"agent_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"The status of the assignment process.\"\n                },\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"Additional message regarding the assignment process.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, I have a support ticket that needs to be assigned to an agent.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can help you with that. Can you please provide me the ticket ID and the agent ID?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The ticket ID is 12345 and the agent ID is 6789.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the details. I will now assign the ticket to the specified agent.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"assign_ticket_to_agent\",\n        \"parameters\": {\n            \"ticket_id\": 12345,\n            \"agent_id\": 6789\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "assign_ticket_to_agent",
            "description": "Assigns a customer support ticket to a specified agent.",
            "parameters": {
                "type": "object",
                "properties": {
                    "ticket_id": {
                        "type": "integer",
                        "description": "The id of the ticket that needs to be assigned."
                    },
                    "agent_id": {
                        "type": "integer",
                        "description": "The id of the agent to whom the ticket will be assigned."
                    }
                },
                "required": [
                    "ticket_id",
                    "agent_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The status of the assignment process."
                    },
                    "message": {
                        "type": "string",
                        "description": "Additional message regarding the assignment process."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I have a support ticket that needs to be assigned to an agent."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Can you please provide me the ticket ID and the agent ID?"
            },
            {
                "role": "user",
                "text": "The ticket ID is 12345 and the agent ID is 6789."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the details. I will now assign the ticket to the specified agent."
            }
        ],
        "function_call": {
            "function_name": "assign_ticket_to_agent",
            "parameters": {
                "ticket_id": 12345,
                "agent_id": 6789
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def assign_ticket_to_agent(\\n    ticket_id: int,\\n    agent_id: int,\\n) -> Dict[str, Any]:\\n    \"\"\"\\n    Assigns a customer support ticket to a specified agent.\\n\\n    Parameters:\\n        ticket_id (int): The id of the ticket that needs to be assigned.\\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary with details of the assignment process. \\n                        This can include keys like \\'status\\' and \\'message\\'.\\n    \"\"\"\\n', 'function_description': {'name': 'assign_ticket_to_agent', 'description': 'Assigns a customer support ticket to a specified agent.', 'parameters': {'type': 'object', 'properties': {'ticket_id': {'type': 'integer', 'description': 'The id of the ticket that needs to be assigned.'}, 'agent_id': {'type': 'integer', 'description': 'The id of the agent to whom the ticket will be assigned.'}}, 'required': ['ticket_id', 'agent_id']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'string', 'description': 'The status of the assignment process.'}, 'message': {'type': 'string', 'description': 'Additional message regarding the assignment process.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-10",
    "description": {
        "function_snippet": "def generate_discount_code(customer_id: str) -> str:\n    \"\"\"\n    Generate a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (str): The unique id of the customer.\n\n    Returns:\n        str: The generated unique discount code.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "generate_discount_code",
            "description": "Generate a unique discount code for a customer for marketing promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique id of the customer."
                    }
                },
                "required": [
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "discount_code": {
                        "type": "string",
                        "description": "The generated unique discount code."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"generate_discount_code\",\n        \"description\": \"Generate a unique discount code for a customer for marketing promotions.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique id of the customer.\"\n                }\n            },\n            \"required\": [\"customer_id\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"discount_code\": {\n                    \"type\": \"string\",\n                    \"description\": \"The generated unique discount code.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you generate a discount code for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me your customer ID.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"My customer ID is '123456'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm generating a unique discount code for you now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_discount_code\",\n        \"parameters\": {\n            \"customer_id\": \"123456\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "generate_discount_code",
            "description": "Generate a unique discount code for a customer for marketing promotions.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique id of the customer."
                    }
                },
                "required": [
                    "customer_id"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "discount_code": {
                        "type": "string",
                        "description": "The generated unique discount code."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you generate a discount code for me?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide me your customer ID."
            },
            {
                "role": "user",
                "text": "My customer ID is '123456'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm generating a unique discount code for you now."
            }
        ],
        "function_call": {
            "function_name": "generate_discount_code",
            "parameters": {
                "customer_id": "123456"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def generate_discount_code(customer_id: str) -> str:\\n    \"\"\"\\n    Generate a unique discount code for a customer for marketing promotions.\\n\\n    Parameters:\\n        customer_id (str): The unique id of the customer.\\n\\n    Returns:\\n        str: The generated unique discount code.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'generate_discount_code', 'description': 'Generate a unique discount code for a customer for marketing promotions.', 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The unique id of the customer.'}}, 'required': ['customer_id']}, 'returns': {'type': 'object', 'properties': {'discount_code': {'type': 'string', 'description': 'The generated unique discount code.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-11",
    "description": {
        "function_snippet": "def enable_subscription(\n    customer_id: str,\n    services: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\n\n    Parameters:\n        customer_id (str): The unique identifier of the customer.\n        services (List[str]): A list of services to which the customer wants to subscribe.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \n        True indicates the subscription was successful, False indicates it was not.\n    \"\"\"\n",
        "function_description": {
            "name": "enable_subscription",
            "description": "Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique identifier of the customer."
                    },
                    "services": {
                        "type": "array",
                        "description": "A list of services to which the customer wants to subscribe.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "services"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "description": "A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"enable_subscription\",\n        \"description\": \"Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The unique identifier of the customer.\"\n                },\n                \"services\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of services to which the customer wants to subscribe.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"services\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you enable my subscription to the services?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Can you provide me your customer ID and the services you want to subscribe to?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, my customer ID is '12345' and I want to subscribe to 'Service A' and 'Service B'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great, I'm enabling your subscription to the requested services now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"enable_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"services\": [\"Service A\", \"Service B\"]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "enable_subscription",
            "description": "Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique identifier of the customer."
                    },
                    "services": {
                        "type": "array",
                        "description": "A list of services to which the customer wants to subscribe.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "services"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "description": "A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you enable my subscription to the services?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Can you provide me your customer ID and the services you want to subscribe to?"
            },
            {
                "role": "user",
                "text": "Yes, my customer ID is '12345' and I want to subscribe to 'Service A' and 'Service B'."
            },
            {
                "role": "assistant",
                "text": "Great, I'm enabling your subscription to the requested services now."
            }
        ],
        "function_call": {
            "function_name": "enable_subscription",
            "parameters": {
                "customer_id": "12345",
                "services": [
                    "Service A",
                    "Service B"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def enable_subscription(\\n    customer_id: str,\\n    services: List[str],\\n) -> Dict[str, bool]:\\n    \"\"\"\\n    Enables a customer\\'s subscription to various services and returns a dictionary indicating the status of each service.\\n\\n    Parameters:\\n        customer_id (str): The unique identifier of the customer.\\n        services (List[str]): A list of services to which the customer wants to subscribe.\\n\\n    Returns:\\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \\n        True indicates the subscription was successful, False indicates it was not.\\n    \"\"\"\\n', 'function_description': {'name': 'enable_subscription', 'description': \"Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\", 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The unique identifier of the customer.'}, 'services': {'type': 'array', 'description': 'A list of services to which the customer wants to subscribe.', 'items': {'type': 'string'}}}, 'required': ['customer_id', 'services']}, 'returns': {'type': 'object', 'properties': {'status': {'type': 'boolean', 'description': 'A boolean value indicating the status of the subscription. True indicates the subscription was successful, False indicates it was not.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-12",
    "description": {
        "function_snippet": "def disable_customer_subscription(\n    customer_id: str,\n    service_ids: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The id of the customer.\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\n\n    Returns:\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\n    \"\"\"\n",
        "function_description": {
            "name": "disable_customer_subscription",
            "description": "Disables a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "service_ids": {
                        "type": "array",
                        "description": "A list of ids of the services to be unsubscribed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "service_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_id": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the unsubscription was successful for the service."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"disable_customer_subscription\",\n        \"description\": \"Disables a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The id of the customer.\"\n                },\n                \"service_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of ids of the services to be unsubscribed.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"service_ids\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"service_id\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A boolean indicating whether the unsubscription was successful for the service.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you disable my subscription to certain services?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can help you with that. Can you provide me with your customer ID and the IDs of the services you want to unsubscribe from?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Yes, my customer ID is '12345' and I want to unsubscribe from services 'service1' and 'service2'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the details. I will now proceed to disable your subscription to the requested services.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"disable_customer_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"service_ids\": [\"service1\", \"service2\"]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "disable_customer_subscription",
            "description": "Disables a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The id of the customer."
                    },
                    "service_ids": {
                        "type": "array",
                        "description": "A list of ids of the services to be unsubscribed.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "service_ids"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "service_id": {
                        "type": "boolean",
                        "description": "A boolean indicating whether the unsubscription was successful for the service."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you disable my subscription to certain services?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Can you provide me with your customer ID and the IDs of the services you want to unsubscribe from?"
            },
            {
                "role": "user",
                "text": "Yes, my customer ID is '12345' and I want to unsubscribe from services 'service1' and 'service2'."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the details. I will now proceed to disable your subscription to the requested services."
            }
        ],
        "function_call": {
            "function_name": "disable_customer_subscription",
            "parameters": {
                "customer_id": "12345",
                "service_ids": [
                    "service1",
                    "service2"
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def disable_customer_subscription(\\n    customer_id: str,\\n    service_ids: List[str],\\n) -> Dict[str, bool]:\\n    \"\"\"\\n    Disables a customer\\'s subscription to various services.\\n\\n    Parameters:\\n        customer_id (str): The id of the customer.\\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\\n\\n    Returns:\\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\\n    \"\"\"\\n', 'function_description': {'name': 'disable_customer_subscription', 'description': \"Disables a customer's subscription to various services.\", 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The id of the customer.'}, 'service_ids': {'type': 'array', 'description': 'A list of ids of the services to be unsubscribed.', 'items': {'type': 'string'}}}, 'required': ['customer_id', 'service_ids']}, 'returns': {'type': 'object', 'properties': {'service_id': {'type': 'boolean', 'description': 'A boolean indicating whether the unsubscription was successful for the service.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-13",
    "description": {
        "function_snippet": "def modify_customer_subscription(\n    customer_id: str,\n    new_subscription: Dict[str, bool]\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\n                                            Each key is a service name and its corresponding value is a boolean \n                                            indicating whether the customer is subscribed to that service.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "modify_customer_subscription",
            "description": "Modifies a customer's subscription to various services.",
            "parameters": {
                "type": "object",
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The ID of the customer whose subscription needs to be modified."
                    },
                    "new_subscription": {
                        "type": "object",
                        "description": "A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.",
                        "properties": {
                            "service_name": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "required": [
                    "customer_id",
                    "new_subscription"
                ]
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"modify_customer_subscription\",\n        \"description\": \"Modifies a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the customer whose subscription needs to be modified.\"\n                },\n                \"new_subscription\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.\",\n                    \"properties\": {\n                        \"service_name\": {\n                            \"type\": \"boolean\"\n                        }\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"new_subscription\"]\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you modify my subscription?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! To modify your subscription, I need your customer ID and the new subscription status for various services. Can you provide me with those details?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Sure, my customer ID is '12345' and here are the new subscription statuses: {'service1': True, 'service2': False}\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the details. I will now proceed to modify your subscription.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"modify_customer_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"new_subscription\": {\n                \"service1\": True,\n                \"service2\": False\n            }\n        }\n    }\n}",
    "data": "{\n    \"function_description\": {\n        \"name\": \"modify_customer_subscription\",\n        \"description\": \"Modifies a customer's subscription to various services.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"customer_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the customer whose subscription needs to be modified.\"\n                },\n                \"new_subscription\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.\",\n                    \"properties\": {\n                        \"service_name\": {\n                            \"type\": \"boolean\"\n                        }\n                    }\n                }\n            },\n            \"required\": [\"customer_id\", \"new_subscription\"]\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you modify my subscription?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! To modify your subscription, I need your customer ID and the new subscription status for various services. Can you provide me with those details?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Sure, my customer ID is '12345' and here are the new subscription statuses: {'service1': True, 'service2': False}\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the details. I will now proceed to modify your subscription.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"modify_customer_subscription\",\n        \"parameters\": {\n            \"customer_id\": \"12345\",\n            \"new_subscription\": {\n                \"service1\": True,\n                \"service2\": False\n            }\n        }\n    }\n}",
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def modify_customer_subscription(\\n    customer_id: str,\\n    new_subscription: Dict[str, bool]\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Modifies a customer\\'s subscription to various services.\\n\\n    Parameters:\\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\\n                                            Each key is a service name and its corresponding value is a boolean \\n                                            indicating whether the customer is subscribed to that service.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with \\'message\\' as a key and the status of the update operation as a value.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'modify_customer_subscription', 'description': \"Modifies a customer's subscription to various services.\", 'parameters': {'type': 'object', 'properties': {'customer_id': {'type': 'string', 'description': 'The ID of the customer whose subscription needs to be modified.'}, 'new_subscription': {'type': 'object', 'description': 'A dictionary containing the new subscription status for various services. Each key is a service name and its corresponding value is a boolean indicating whether the customer is subscribed to that service.', 'properties': {'service_name': {'type': 'boolean'}}}}, 'required': ['customer_id', 'new_subscription']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-14",
    "description": {
        "function_snippet": "def renew_contracts(\n    contracts: List[Dict[str, Union[str, datetime.date]]]\n) -> List[Dict[str, Union[str, datetime.date]]]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n\n    Parameters:\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \n                                                                Each dictionary should have 'contract_id', 'service', \n                                                                and 'expiration_date' keys.\n\n    Returns:\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \n                                                    Each dictionary will have 'contract_id', 'service', \n                                                    and 'new_expiration_date' keys.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "renew_contracts",
            "description": "Renews contracts for services and subscriptions that are expiring.",
            "parameters": {
                "type": "object",
                "properties": {
                    "contracts": {
                        "type": "array",
                        "description": "A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "contract_id": {
                                    "type": "string"
                                },
                                "service": {
                                    "type": "string"
                                },
                                "expiration_date": {
                                    "type": "date"
                                }
                            },
                            "required": [
                                "contract_id",
                                "service",
                                "expiration_date"
                            ]
                        }
                    }
                },
                "required": [
                    "contracts"
                ]
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"renew_contracts\",\n        \"description\": \"Renews contracts for services and subscriptions that are expiring.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"contracts\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"contract_id\": {\"type\": \"string\"},\n                            \"service\": {\"type\": \"string\"},\n                            \"expiration_date\": {\"type\": \"date\"}\n                        },\n                        \"required\": [\"contract_id\", \"service\", \"expiration_date\"]\n                    }\n                }\n            },\n            \"required\": [\"contracts\"]\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me renew my contracts?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! Could you please provide me with the details of your contracts?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Sure, here is the information: contract 1 - service A - 2022-12-31, contract 2 - service B - 2023-01-15.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the details. Let me renew your contracts now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"renew_contracts\",\n        \"parameters\": {\n            \"contracts\": [\n                {\n                    \"contract_id\": \"1\",\n                    \"service\": \"A\",\n                    \"expiration_date\": \"2022-12-31\"\n                },\n                {\n                    \"contract_id\": \"2\",\n                    \"service\": \"B\",\n                    \"expiration_date\": \"2023-01-15\"\n                }\n            ]\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "renew_contracts",
            "description": "Renews contracts for services and subscriptions that are expiring.",
            "parameters": {
                "type": "object",
                "properties": {
                    "contracts": {
                        "type": "array",
                        "description": "A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "contract_id": {
                                    "type": "string"
                                },
                                "service": {
                                    "type": "string"
                                },
                                "expiration_date": {
                                    "type": "date"
                                }
                            },
                            "required": [
                                "contract_id",
                                "service",
                                "expiration_date"
                            ]
                        }
                    }
                },
                "required": [
                    "contracts"
                ]
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me renew my contracts?"
            },
            {
                "role": "assistant",
                "text": "Of course! Could you please provide me with the details of your contracts?"
            },
            {
                "role": "user",
                "text": "Sure, here is the information: contract 1 - service A - 2022-12-31, contract 2 - service B - 2023-01-15."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the details. Let me renew your contracts now."
            }
        ],
        "function_call": {
            "function_name": "renew_contracts",
            "parameters": {
                "contracts": [
                    {
                        "contract_id": "1",
                        "service": "A",
                        "expiration_date": "2022-12-31"
                    },
                    {
                        "contract_id": "2",
                        "service": "B",
                        "expiration_date": "2023-01-15"
                    }
                ]
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def renew_contracts(\\n    contracts: List[Dict[str, Union[str, datetime.date]]]\\n) -> List[Dict[str, Union[str, datetime.date]]]:\\n    \"\"\"\\n    Renews contracts for services and subscriptions that are expiring.\\n\\n    Parameters:\\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \\n                                                                Each dictionary should have \\'contract_id\\', \\'service\\', \\n                                                                and \\'expiration_date\\' keys.\\n\\n    Returns:\\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \\n                                                    Each dictionary will have \\'contract_id\\', \\'service\\', \\n                                                    and \\'new_expiration_date\\' keys.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'renew_contracts', 'description': 'Renews contracts for services and subscriptions that are expiring.', 'parameters': {'type': 'object', 'properties': {'contracts': {'type': 'array', 'description': \"A list of dictionaries containing contract details. Each dictionary should have 'contract_id', 'service', and 'expiration_date' keys.\", 'items': {'type': 'object', 'properties': {'contract_id': {'type': 'string'}, 'service': {'type': 'string'}, 'expiration_date': {'type': 'date'}}, 'required': ['contract_id', 'service', 'expiration_date']}}}, 'required': ['contracts']}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-15",
    "description": {
        "function_snippet": "def backup_business_data(\n    data: str,\n    backup_location: str,\n    backup_frequency: str,\n) -> bool:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data (str): The data to be backed up.\n        backup_location (str): The location where the backup data should be stored.\n        backup_frequency (str): The frequency at which the backup process should be performed.\n\n    Returns:\n        bool: Returns True if the backup process is successful, False otherwise.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "backup_business_data",
            "description": "Performs a backup process of important business data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The data to be backed up."
                    },
                    "backup_location": {
                        "type": "string",
                        "description": "The location where the backup data should be stored."
                    },
                    "backup_frequency": {
                        "type": "string",
                        "description": "The frequency at which the backup process should be performed."
                    }
                },
                "required": [
                    "data",
                    "backup_location",
                    "backup_frequency"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "Returns True if the backup process is successful, False otherwise."
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"backup_business_data\",\n        \"description\": \"Performs a backup process of important business data.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"data\": {\n                    \"type\": \"string\",\n                    \"description\": \"The data to be backed up.\"\n                },\n                \"backup_location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where the backup data should be stored.\"\n                },\n                \"backup_frequency\": {\n                    \"type\": \"string\",\n                    \"description\": \"The frequency at which the backup process should be performed.\"\n                }\n            },\n            \"required\": [\"data\", \"backup_location\", \"backup_frequency\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"Returns True if the backup process is successful, False otherwise.\"\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you perform a backup of my business data?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide the data to be backed up, the backup location, and the backup frequency.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"I want to backup my financial records. The backup location should be 'C:/Backup' and the backup frequency should be 'daily'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Got it. Starting the backup process now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"backup_business_data\",\n        \"parameters\": {\n            \"data\": \"financial records\",\n            \"backup_location\": \"C:/Backup\",\n            \"backup_frequency\": \"daily\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "backup_business_data",
            "description": "Performs a backup process of important business data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The data to be backed up."
                    },
                    "backup_location": {
                        "type": "string",
                        "description": "The location where the backup data should be stored."
                    },
                    "backup_frequency": {
                        "type": "string",
                        "description": "The frequency at which the backup process should be performed."
                    }
                },
                "required": [
                    "data",
                    "backup_location",
                    "backup_frequency"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "Returns True if the backup process is successful, False otherwise."
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Can you perform a backup of my business data?"
            },
            {
                "role": "assistant",
                "text": "Sure, I can do that. Please provide the data to be backed up, the backup location, and the backup frequency."
            },
            {
                "role": "user",
                "text": "I want to backup my financial records. The backup location should be 'C:/Backup' and the backup frequency should be 'daily'."
            },
            {
                "role": "assistant",
                "text": "Got it. Starting the backup process now."
            }
        ],
        "function_call": {
            "function_name": "backup_business_data",
            "parameters": {
                "data": "financial records",
                "backup_location": "C:/Backup",
                "backup_frequency": "daily"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def backup_business_data(\\n    data: str,\\n    backup_location: str,\\n    backup_frequency: str,\\n) -> bool:\\n    \"\"\"\\n    Performs a backup process of important business data.\\n\\n    Parameters:\\n        data (str): The data to be backed up.\\n        backup_location (str): The location where the backup data should be stored.\\n        backup_frequency (str): The frequency at which the backup process should be performed.\\n\\n    Returns:\\n        bool: Returns True if the backup process is successful, False otherwise.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'backup_business_data', 'description': 'Performs a backup process of important business data.', 'parameters': {'type': 'object', 'properties': {'data': {'type': 'string', 'description': 'The data to be backed up.'}, 'backup_location': {'type': 'string', 'description': 'The location where the backup data should be stored.'}, 'backup_frequency': {'type': 'string', 'description': 'The frequency at which the backup process should be performed.'}}, 'required': ['data', 'backup_location', 'backup_frequency']}, 'returns': {'type': 'boolean', 'description': 'Returns True if the backup process is successful, False otherwise.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-16",
    "description": {
        "function_snippet": "def check_software_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_id (str): The id of the product.\n        license_key (str): The license key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "check_software_license_validity",
            "description": "Checks the validity of a software license for a given product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product."
                    },
                    "license_key": {
                        "type": "string",
                        "description": "The license key to check."
                    }
                },
                "required": [
                    "product_id",
                    "license_key"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the license is valid, False otherwise."
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"check_software_license_validity\",\n        \"description\": \"Checks the validity of a software license for a given product.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"product_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The id of the product.\"\n                },\n                \"license_key\": {\n                    \"type\": \"string\",\n                    \"description\": \"The license key to check.\"\n                }\n            },\n            \"required\": [\"product_id\", \"license_key\"]\n        },\n        \"returns\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if the license is valid, False otherwise.\"\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me check if my software license is valid?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! Please provide me with the product ID and the license key.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Sure, the product ID is '12345' and the license key is 'ABCDE'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for the information. Let me check the validity of your software license.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"check_software_license_validity\",\n        \"parameters\": {\n            \"product_id\": \"12345\",\n            \"license_key\": \"ABCDE\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "check_software_license_validity",
            "description": "Checks the validity of a software license for a given product.",
            "parameters": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "string",
                        "description": "The id of the product."
                    },
                    "license_key": {
                        "type": "string",
                        "description": "The license key to check."
                    }
                },
                "required": [
                    "product_id",
                    "license_key"
                ]
            },
            "returns": {
                "type": "boolean",
                "description": "True if the license is valid, False otherwise."
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me check if my software license is valid?"
            },
            {
                "role": "assistant",
                "text": "Of course! Please provide me with the product ID and the license key."
            },
            {
                "role": "user",
                "text": "Sure, the product ID is '12345' and the license key is 'ABCDE'."
            },
            {
                "role": "assistant",
                "text": "Thank you for the information. Let me check the validity of your software license."
            }
        ],
        "function_call": {
            "function_name": "check_software_license_validity",
            "parameters": {
                "product_id": "12345",
                "license_key": "ABCDE"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def check_software_license_validity(\\n    product_id: str,\\n    license_key: str,\\n) -> bool:\\n    \"\"\"\\n    Checks the validity of a software license for a given product.\\n\\n    Parameters:\\n        product_id (str): The id of the product.\\n        license_key (str): The license key to check.\\n\\n    Returns:\\n        bool: True if the license is valid, False otherwise.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'check_software_license_validity', 'description': 'Checks the validity of a software license for a given product.', 'parameters': {'type': 'object', 'properties': {'product_id': {'type': 'string', 'description': 'The id of the product.'}, 'license_key': {'type': 'string', 'description': 'The license key to check.'}}, 'required': ['product_id', 'license_key']}, 'returns': {'type': 'boolean', 'description': 'True if the license is valid, False otherwise.'}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-17",
    "description": {
        "function_snippet": "def onboard_new_employee(\nemployee_name: str,\nstart_date: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee by generating a new id, new email account, etc.\n\n    Parameters:\n        employee_name (str): The full name of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\n    \"\"\"\n",
        "function_description": {
            "name": "onboard_new_employee",
            "description": "Onboards a new employee by generating a new id, new email account, etc.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_name": {
                        "type": "string",
                        "description": "The full name of the new employee."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the new employee in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "employee_name",
                    "start_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "employee_email": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"onboard_new_employee\",\n        \"description\": \"Onboards a new employee by generating a new id, new email account, etc.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The full name of the new employee.\"\n                },\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"The start date of the new employee in YYYY-MM-DD format.\"\n                }\n            },\n            \"required\": [\"employee_name\", \"start_date\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_id\": {\"type\": \"string\"},\n                \"employee_email\": {\"type\": \"string\"}\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hi, I have a new employee joining our team. Can you help me onboard them?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! I can assist you with onboarding. Please provide me with the new employee's full name and start date.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"The new employee's name is John Smith and the start date is 2022-01-01.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for the information. I will generate a new employee ID and email account for John Smith, starting from January 1, 2022.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"onboard_new_employee\",\n        \"parameters\": {\n            \"employee_name\": \"John Smith\",\n            \"start_date\": \"2022-01-01\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "onboard_new_employee",
            "description": "Onboards a new employee by generating a new id, new email account, etc.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_name": {
                        "type": "string",
                        "description": "The full name of the new employee."
                    },
                    "start_date": {
                        "type": "string",
                        "description": "The start date of the new employee in YYYY-MM-DD format."
                    }
                },
                "required": [
                    "employee_name",
                    "start_date"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "employee_email": {
                        "type": "string"
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hi, I have a new employee joining our team. Can you help me onboard them?"
            },
            {
                "role": "assistant",
                "text": "Of course! I can assist you with onboarding. Please provide me with the new employee's full name and start date."
            },
            {
                "role": "user",
                "text": "The new employee's name is John Smith and the start date is 2022-01-01."
            },
            {
                "role": "assistant",
                "text": "Thank you for the information. I will generate a new employee ID and email account for John Smith, starting from January 1, 2022."
            }
        ],
        "function_call": {
            "function_name": "onboard_new_employee",
            "parameters": {
                "employee_name": "John Smith",
                "start_date": "2022-01-01"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def onboard_new_employee(\\nemployee_name: str,\\nstart_date: str\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Onboards a new employee by generating a new id, new email account, etc.\\n\\n    Parameters:\\n        employee_name (str): The full name of the new employee.\\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary containing the new employee\\'s details such as \\'employee_id\\' and \\'employee_email\\'.\\n    \"\"\"\\n', 'function_description': {'name': 'onboard_new_employee', 'description': 'Onboards a new employee by generating a new id, new email account, etc.', 'parameters': {'type': 'object', 'properties': {'employee_name': {'type': 'string', 'description': 'The full name of the new employee.'}, 'start_date': {'type': 'string', 'description': 'The start date of the new employee in YYYY-MM-DD format.'}}, 'required': ['employee_name', 'start_date']}, 'returns': {'type': 'object', 'properties': {'employee_id': {'type': 'string'}, 'employee_email': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-18",
    "description": {
        "function_snippet": "def allocate_resources(\nmeeting_rooms: List[str],\nequipment: List[str],\npersonnel: List[str],\nproject: str,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.\n\n    Parameters:\n        meeting_rooms (List[str]): The list of available meeting rooms.\n        equipment (List[str]): The list of available equipment.\n        personnel (List[str]): The list of available personnel.\n        project (str): The name of the project.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'allocated_meeting_rooms', 'allocated_equipment' and 'allocated_personnel' as keys and \n                              their allocated resources as values.\n    \"\"\"\n",
        "function_description": {
            "name": "allocate_resources",
            "description": "Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_rooms": {
                        "type": "array",
                        "description": "The list of available meeting rooms.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "equipment": {
                        "type": "array",
                        "description": "The list of available equipment.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "personnel": {
                        "type": "array",
                        "description": "The list of available personnel.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the project."
                    }
                },
                "required": [
                    "meeting_rooms",
                    "equipment",
                    "personnel",
                    "project"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "allocated_meeting_rooms": {
                        "type": "array",
                        "description": "The allocated meeting rooms for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_equipment": {
                        "type": "array",
                        "description": "The allocated equipment for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_personnel": {
                        "type": "array",
                        "description": "The allocated personnel for the project.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"allocate_resources\",\n        \"description\": \"Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"meeting_rooms\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available meeting rooms.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"equipment\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available equipment.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"personnel\": {\n                    \"type\": \"array\",\n                    \"description\": \"The list of available personnel.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"project\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the project.\"\n                }\n            },\n            \"required\": [\n                \"meeting_rooms\",\n                \"equipment\",\n                \"personnel\",\n                \"project\"\n            ]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"allocated_meeting_rooms\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated meeting rooms for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"allocated_equipment\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated equipment for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"allocated_personnel\": {\n                    \"type\": \"array\",\n                    \"description\": \"The allocated personnel for the project.\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, I need to allocate resources for my project.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can help you with that. Could you please provide me the list of available meeting rooms?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Sure, here are the available meeting rooms: ['Room A', 'Room B', 'Room C'].\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you. Now, could you please provide me the list of available equipment?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Certainly, here are the available equipment: ['Laptop', 'Projector', 'Whiteboard'].\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great. Lastly, could you please provide me the list of available personnel?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Of course, here are the available personnel: ['John', 'Mary', 'David'].\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing all the necessary information. I will now allocate the resources for your project.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"allocate_resources\",\n        \"parameters\": {\n            \"meeting_rooms\": [\"Room A\", \"Room B\", \"Room C\"],\n            \"equipment\": [\"Laptop\", \"Projector\", \"Whiteboard\"],\n            \"personnel\": [\"John\", \"Mary\", \"David\"],\n            \"project\": \"My Project\"\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "allocate_resources",
            "description": "Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.",
            "parameters": {
                "type": "object",
                "properties": {
                    "meeting_rooms": {
                        "type": "array",
                        "description": "The list of available meeting rooms.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "equipment": {
                        "type": "array",
                        "description": "The list of available equipment.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "personnel": {
                        "type": "array",
                        "description": "The list of available personnel.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project": {
                        "type": "string",
                        "description": "The name of the project."
                    }
                },
                "required": [
                    "meeting_rooms",
                    "equipment",
                    "personnel",
                    "project"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "allocated_meeting_rooms": {
                        "type": "array",
                        "description": "The allocated meeting rooms for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_equipment": {
                        "type": "array",
                        "description": "The allocated equipment for the project.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allocated_personnel": {
                        "type": "array",
                        "description": "The allocated personnel for the project.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, I need to allocate resources for my project."
            },
            {
                "role": "assistant",
                "text": "Sure, I can help you with that. Could you please provide me the list of available meeting rooms?"
            },
            {
                "role": "user",
                "text": "Sure, here are the available meeting rooms: ['Room A', 'Room B', 'Room C']."
            },
            {
                "role": "assistant",
                "text": "Thank you. Now, could you please provide me the list of available equipment?"
            },
            {
                "role": "user",
                "text": "Certainly, here are the available equipment: ['Laptop', 'Projector', 'Whiteboard']."
            },
            {
                "role": "assistant",
                "text": "Great. Lastly, could you please provide me the list of available personnel?"
            },
            {
                "role": "user",
                "text": "Of course, here are the available personnel: ['John', 'Mary', 'David']."
            },
            {
                "role": "assistant",
                "text": "Thank you for providing all the necessary information. I will now allocate the resources for your project."
            }
        ],
        "function_call": {
            "function_name": "allocate_resources",
            "parameters": {
                "meeting_rooms": [
                    "Room A",
                    "Room B",
                    "Room C"
                ],
                "equipment": [
                    "Laptop",
                    "Projector",
                    "Whiteboard"
                ],
                "personnel": [
                    "John",
                    "Mary",
                    "David"
                ],
                "project": "My Project"
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def allocate_resources(\\nmeeting_rooms: List[str],\\nequipment: List[str],\\npersonnel: List[str],\\nproject: str,\\n) -> Dict[str, List[str]]:\\n    \"\"\"\\n    Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.\\n\\n    Parameters:\\n        meeting_rooms (List[str]): The list of available meeting rooms.\\n        equipment (List[str]): The list of available equipment.\\n        personnel (List[str]): The list of available personnel.\\n        project (str): The name of the project.\\n\\n    Returns:\\n        Dict[str, List[str]]: A dictionary with \\'allocated_meeting_rooms\\', \\'allocated_equipment\\' and \\'allocated_personnel\\' as keys and \\n                              their allocated resources as values.\\n    \"\"\"\\n', 'function_description': {'name': 'allocate_resources', 'description': 'Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.', 'parameters': {'type': 'object', 'properties': {'meeting_rooms': {'type': 'array', 'description': 'The list of available meeting rooms.', 'items': {'type': 'string'}}, 'equipment': {'type': 'array', 'description': 'The list of available equipment.', 'items': {'type': 'string'}}, 'personnel': {'type': 'array', 'description': 'The list of available personnel.', 'items': {'type': 'string'}}, 'project': {'type': 'string', 'description': 'The name of the project.'}}, 'required': ['meeting_rooms', 'equipment', 'personnel', 'project']}, 'returns': {'type': 'object', 'properties': {'allocated_meeting_rooms': {'type': 'array', 'description': 'The allocated meeting rooms for the project.', 'items': {'type': 'string'}}, 'allocated_equipment': {'type': 'array', 'description': 'The allocated equipment for the project.', 'items': {'type': 'string'}}, 'allocated_personnel': {'type': 'array', 'description': 'The allocated personnel for the project.', 'items': {'type': 'string'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-19",
    "description": {
        "function_snippet": "def submit_timesheets(\n    employee_ids: List[int],\n    timesheet_data: Dict[int, Dict[str, Union[str, float]]],\n    action: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n    \n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \n                                                                  'hours_worked' and optionally 'overtime_hours'.\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\n\n    Returns:\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\n    \"\"\"\n",
        "function_description": {
            "name": "submit_timesheets",
            "description": "Submits timesheets for employees, either for approval or archival.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_ids": {
                        "type": "array",
                        "description": "A list of employee IDs.",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "timesheet_data": {
                        "type": "object",
                        "description": "A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.",
                        "properties": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "description": "Timesheet date in YYYY-MM-DD format."
                                },
                                "hours_worked": {
                                    "type": "number",
                                    "description": "The number of hours worked on the given date."
                                },
                                "overtime_hours": {
                                    "type": "number",
                                    "description": "The number of overtime hours worked on the given date."
                                }
                            },
                            "required": [
                                "date",
                                "hours_worked"
                            ]
                        }
                    },
                    "action": {
                        "type": "string",
                        "description": "The action to be taken. It should be either 'approval' or 'archival'."
                    }
                },
                "required": [
                    "employee_ids",
                    "timesheet_data",
                    "action"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "object",
                    "description": "A dictionary with employee IDs as keys and the status of their timesheet submission as values.",
                    "properties": {
                        "status": {
                            "type": "string",
                            "description": "The status of the timesheet submission."
                        }
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"submit_timesheets\",\n        \"description\": \"Submits timesheets for employees, either for approval or archival.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of employee IDs.\",\n                    \"items\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"timesheet_data\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.\",\n                    \"properties\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"date\": {\"type\": \"string\", \"description\": \"Timesheet date in YYYY-MM-DD format.\"},\n                            \"hours_worked\": {\"type\": \"number\", \"description\": \"The number of hours worked on the given date.\"},\n                            \"overtime_hours\": {\"type\": \"number\", \"description\": \"The number of overtime hours worked on the given date.\"}\n                        },\n                        \"required\": [\"date\", \"hours_worked\"]\n                    }\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to be taken. It should be either 'approval' or 'archival'.\"\n                }\n            },\n            \"required\": [\"employee_ids\", \"timesheet_data\", \"action\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"object\",\n                \"description\": \"A dictionary with employee IDs as keys and the status of their timesheet submission as values.\",\n                \"properties\": {\n                    \"status\": {\"type\": \"string\", \"description\": \"The status of the timesheet submission.\"}\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you submit my timesheets for approval?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with your employee ID.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"My employee ID is 12345.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great. Now, please provide me with the timesheet data.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here is my timesheet data: {'date': '2022-01-01', 'hours_worked': 8.5}.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you. I will submit your timesheet for approval now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"submit_timesheets\",\n        \"parameters\": {\n            \"employee_ids\": [12345],\n            \"timesheet_data\": {12345: {'date': '2022-01-01', 'hours_worked': 8.5}},\n            \"action\": \"approval\"\n        }\n    }\n}",
    "data": "{\n    \"function_description\": {\n        \"name\": \"submit_timesheets\",\n        \"description\": \"Submits timesheets for employees, either for approval or archival.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of employee IDs.\",\n                    \"items\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"timesheet_data\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.\",\n                    \"properties\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"date\": {\"type\": \"string\", \"description\": \"Timesheet date in YYYY-MM-DD format.\"},\n                            \"hours_worked\": {\"type\": \"number\", \"description\": \"The number of hours worked on the given date.\"},\n                            \"overtime_hours\": {\"type\": \"number\", \"description\": \"The number of overtime hours worked on the given date.\"}\n                        },\n                        \"required\": [\"date\", \"hours_worked\"]\n                    }\n                },\n                \"action\": {\n                    \"type\": \"string\",\n                    \"description\": \"The action to be taken. It should be either 'approval' or 'archival'.\"\n                }\n            },\n            \"required\": [\"employee_ids\", \"timesheet_data\", \"action\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"object\",\n                \"description\": \"A dictionary with employee IDs as keys and the status of their timesheet submission as values.\",\n                \"properties\": {\n                    \"status\": {\"type\": \"string\", \"description\": \"The status of the timesheet submission.\"}\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you submit my timesheets for approval?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with your employee ID.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"My employee ID is 12345.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Great. Now, please provide me with the timesheet data.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here is my timesheet data: {'date': '2022-01-01', 'hours_worked': 8.5}.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you. I will submit your timesheet for approval now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"submit_timesheets\",\n        \"parameters\": {\n            \"employee_ids\": [12345],\n            \"timesheet_data\": {12345: {'date': '2022-01-01', 'hours_worked': 8.5}},\n            \"action\": \"approval\"\n        }\n    }\n}",
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def submit_timesheets(\\n    employee_ids: List[int],\\n    timesheet_data: Dict[int, Dict[str, Union[str, float]]],\\n    action: str,\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Submits timesheets for employees, either for approval or archival.\\n    \\n    Parameters:\\n        employee_ids (List[int]): A list of employee IDs.\\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \\n                                                                  Each timesheet is a dictionary containing \\'date\\' (YYYY-MM-DD format), \\n                                                                  \\'hours_worked\\' and optionally \\'overtime_hours\\'.\\n        action (str): The action to be taken. It should be either \\'approval\\' or \\'archival\\'.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\\n    \"\"\"\\n', 'function_description': {'name': 'submit_timesheets', 'description': 'Submits timesheets for employees, either for approval or archival.', 'parameters': {'type': 'object', 'properties': {'employee_ids': {'type': 'array', 'description': 'A list of employee IDs.', 'items': {'type': 'integer'}}, 'timesheet_data': {'type': 'object', 'description': \"A dictionary mapping employee IDs to their timesheet data. Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), 'hours_worked' and optionally 'overtime_hours'.\", 'properties': {'type': 'object', 'properties': {'date': {'type': 'string', 'description': 'Timesheet date in YYYY-MM-DD format.'}, 'hours_worked': {'type': 'number', 'description': 'The number of hours worked on the given date.'}, 'overtime_hours': {'type': 'number', 'description': 'The number of overtime hours worked on the given date.'}}, 'required': ['date', 'hours_worked']}}, 'action': {'type': 'string', 'description': \"The action to be taken. It should be either 'approval' or 'archival'.\"}}, 'required': ['employee_ids', 'timesheet_data', 'action']}, 'returns': {'type': 'object', 'properties': {'type': 'object', 'description': 'A dictionary with employee IDs as keys and the status of their timesheet submission as values.', 'properties': {'status': {'type': 'string', 'description': 'The status of the timesheet submission.'}}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-20",
    "description": {
        "function_snippet": "def distribute_performance_incentives(\nemployee_performance: Dict[str, float],\nbonus_pool: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\n    \"\"\"\n",
        "function_description": {
            "name": "distribute_performance_incentives",
            "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_performance": {
                        "type": "dictionary",
                        "description": "A dictionary with employee IDs as keys and their performance scores as values."
                    },
                    "bonus_pool": {
                        "type": "float",
                        "description": "The total amount of money available for distribution as bonuses."
                    }
                },
                "required": [
                    "employee_performance",
                    "bonus_pool"
                ]
            },
            "returns": {
                "type": "dictionary",
                "properties": {
                    "employee_ids": {
                        "type": "string",
                        "description": "A dictionary with employee IDs as keys and the bonus amount each employee receives as values."
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"distribute_performance_incentives\",\n        \"description\": \"Calculates and distributes performance-based incentives or bonuses to employees.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_performance\": {\n                    \"type\": \"dictionary\",\n                    \"description\": \"A dictionary with employee IDs as keys and their performance scores as values.\"\n                },\n                \"bonus_pool\": {\n                    \"type\": \"float\",\n                    \"description\": \"The total amount of money available for distribution as bonuses.\"\n                }\n            },\n            \"required\": [\"employee_performance\", \"bonus_pool\"]\n        },\n        \"returns\": {\n            \"type\": \"dictionary\",\n            \"properties\": {\n                \"employee_ids\": {\n                    \"type\": \"string\",\n                    \"description\": \"A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\"\n                }\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Hey, can you help me distribute performance incentives to my employees?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Of course! To calculate and distribute the incentives, I need the employee performance scores and the total bonus pool amount. Could you please provide me with the employee performance scores and the bonus pool amount?\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Sure, here are the employee performance scores and the bonus pool amount: employee_performance = {'John': 0.8, 'Anna': 0.9, 'Mike': 0.75}, bonus_pool = 10000\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the information. I will now calculate and distribute the performance incentives to the employees.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"distribute_performance_incentives\",\n        \"parameters\": {\n            \"employee_performance\": {\n                \"John\": 0.8,\n                \"Anna\": 0.9,\n                \"Mike\": 0.75\n            },\n            \"bonus_pool\": 10000\n        }\n    }\n}",
    "data": {
        "function_description": {
            "name": "distribute_performance_incentives",
            "description": "Calculates and distributes performance-based incentives or bonuses to employees.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_performance": {
                        "type": "dictionary",
                        "description": "A dictionary with employee IDs as keys and their performance scores as values."
                    },
                    "bonus_pool": {
                        "type": "float",
                        "description": "The total amount of money available for distribution as bonuses."
                    }
                },
                "required": [
                    "employee_performance",
                    "bonus_pool"
                ]
            },
            "returns": {
                "type": "dictionary",
                "properties": {
                    "employee_ids": {
                        "type": "string",
                        "description": "A dictionary with employee IDs as keys and the bonus amount each employee receives as values."
                    }
                }
            }
        },
        "conversation": [
            {
                "role": "user",
                "text": "Hey, can you help me distribute performance incentives to my employees?"
            },
            {
                "role": "assistant",
                "text": "Of course! To calculate and distribute the incentives, I need the employee performance scores and the total bonus pool amount. Could you please provide me with the employee performance scores and the bonus pool amount?"
            },
            {
                "role": "user",
                "text": "Sure, here are the employee performance scores and the bonus pool amount: employee_performance = {'John': 0.8, 'Anna': 0.9, 'Mike': 0.75}, bonus_pool = 10000"
            },
            {
                "role": "assistant",
                "text": "Thank you for providing the information. I will now calculate and distribute the performance incentives to the employees."
            }
        ],
        "function_call": {
            "function_name": "distribute_performance_incentives",
            "parameters": {
                "employee_performance": {
                    "John": 0.8,
                    "Anna": 0.9,
                    "Mike": 0.75
                },
                "bonus_pool": 10000
            }
        }
    },
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def distribute_performance_incentives(\\nemployee_performance: Dict[str, float],\\nbonus_pool: float,\\n) -> Dict[str, float]:\\n    \"\"\"\\n    Calculates and distributes performance-based incentives or bonuses to employees.\\n\\n    Parameters:\\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\\n\\n    Returns:\\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\\n    \"\"\"\\n', 'function_description': {'name': 'distribute_performance_incentives', 'description': 'Calculates and distributes performance-based incentives or bonuses to employees.', 'parameters': {'type': 'object', 'properties': {'employee_performance': {'type': 'dictionary', 'description': 'A dictionary with employee IDs as keys and their performance scores as values.'}, 'bonus_pool': {'type': 'float', 'description': 'The total amount of money available for distribution as bonuses.'}}, 'required': ['employee_performance', 'bonus_pool']}, 'returns': {'type': 'dictionary', 'properties': {'employee_ids': {'type': 'string', 'description': 'A dictionary with employee IDs as keys and the bonus amount each employee receives as values.'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-21",
    "description": {
        "function_snippet": "def generate_employee_shift_schedules(\n    employee_availability: Dict[str, List[str]],\n    workload: Dict[str, int]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate employee shift schedules based on their availability and the workload.\n\n    Parameters:\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\n                                                      and the value is a list of days the employee is available.\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \n                                   and the value is the number of employees needed for that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \n                              and the value is a list of days the employee is scheduled to work.\n    \"\"\"\n    pass",
        "function_description": {
            "name": "generate_employee_shift_schedules",
            "description": "Generate employee shift schedules based on their availability and the workload.",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_availability": {
                        "type": "object",
                        "description": "A dictionary where each key is an employee name,\n                                  and the value is a list of days the employee is available.",
                        "properties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "workload": {
                        "type": "object",
                        "description": "A dictionary where each key is a day of the week, \n                                 and the value is the number of employees needed for that day.",
                        "properties": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "employee_availability",
                    "workload"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"generate_employee_shift_schedules\",\n        \"description\": \"Generate employee shift schedules based on their availability and the workload.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_availability\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is an employee name, and the value is a list of days the employee is available.\",\n                    \"properties\": {\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"}\n                    }\n                },\n                \"workload\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.\",\n                    \"properties\": {\"type\": \"integer\"}\n                }\n            },\n            \"required\": [\"employee_availability\", \"workload\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"array\",\n                \"items\": {\"type\": \"string\"}\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you generate employee shift schedules for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the employee availability and workload.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here is the employee availability and workload: ...\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you. Generating employee shift schedules now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_employee_shift_schedules\",\n        \"parameters\": {\n            \"employee_availability\": {...},\n            \"workload\": {...}\n        }\n    }\n}",
    "data": "{\n    \"function_description\": {\n        \"name\": \"generate_employee_shift_schedules\",\n        \"description\": \"Generate employee shift schedules based on their availability and the workload.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"employee_availability\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is an employee name, and the value is a list of days the employee is available.\",\n                    \"properties\": {\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"}\n                    }\n                },\n                \"workload\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary where each key is a day of the week, and the value is the number of employees needed for that day.\",\n                    \"properties\": {\"type\": \"integer\"}\n                }\n            },\n            \"required\": [\"employee_availability\", \"workload\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"array\",\n                \"items\": {\"type\": \"string\"}\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you generate employee shift schedules for me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can do that. Please provide me with the employee availability and workload.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here is the employee availability and workload: ...\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you. Generating employee shift schedules now.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"generate_employee_shift_schedules\",\n        \"parameters\": {\n            \"employee_availability\": {...},\n            \"workload\": {...}\n        }\n    }\n}",
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def generate_employee_shift_schedules(\\n    employee_availability: Dict[str, List[str]],\\n    workload: Dict[str, int]\\n) -> Dict[str, List[str]]:\\n    \"\"\"\\n    Generate employee shift schedules based on their availability and the workload.\\n\\n    Parameters:\\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\\n                                                      and the value is a list of days the employee is available.\\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \\n                                   and the value is the number of employees needed for that day.\\n\\n    Returns:\\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \\n                              and the value is a list of days the employee is scheduled to work.\\n    \"\"\"\\n    pass', 'function_description': {'name': 'generate_employee_shift_schedules', 'description': 'Generate employee shift schedules based on their availability and the workload.', 'parameters': {'type': 'object', 'properties': {'employee_availability': {'type': 'object', 'description': 'A dictionary where each key is an employee name,\\n                                  and the value is a list of days the employee is available.', 'properties': {'type': 'array', 'items': {'type': 'string'}}}, 'workload': {'type': 'object', 'description': 'A dictionary where each key is a day of the week, \\n                                 and the value is the number of employees needed for that day.', 'properties': {'type': 'integer'}}}, 'required': ['employee_availability', 'workload']}, 'returns': {'type': 'object', 'properties': {'type': 'array', 'items': {'type': 'string'}}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}
{
    "function_id": "business-22",
    "description": {
        "function_snippet": "def create_and_approve_budgets(\n    budget_details: Dict[str, Union[float, str]],\n    approval_authority: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\n                                                       Each key is the name of a department or project,\n                                                       and the value is a tuple where the first item is the\n                                                       proposed budget amount and the second item is a brief\n                                                       description of the budget.\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\n\n    Returns:\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\n    \"\"\"\n",
        "function_description": {
            "name": "create_and_approve_budgets",
            "description": "Creates and approves budgets for different departments or projects.",
            "parameters": {
                "type": "object",
                "properties": {
                    "budget_details": {
                        "type": "object",
                        "description": "A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.",
                        "properties": {
                            "type": "object"
                        }
                    },
                    "approval_authority": {
                        "type": "string",
                        "description": "The name of the person or body who has the authority to approve the budget."
                    }
                },
                "required": [
                    "budget_details",
                    "approval_authority"
                ]
            },
            "returns": {
                "type": "object",
                "properties": {
                    "type": "object"
                }
            }
        }
    },
    "completion-content": "{\n    \"function_description\": {\n        \"name\": \"create_and_approve_budgets\",\n        \"description\": \"Creates and approves budgets for different departments or projects.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"budget_details\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.\",\n                    \"properties\": {\n                        \"type\": \"object\"\n                    }\n                },\n                \"approval_authority\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the person or body who has the authority to approve the budget.\"\n                }\n            },\n            \"required\": [\"budget_details\", \"approval_authority\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"object\"\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you help me create and approve budgets for different departments?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can assist you with that. Please provide me with the budget details and the approval authority.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here are the budget details: {'Department A': (100000, 'Budget for department A'), 'Department B': (150000, 'Budget for department B')}. The approval authority is 'John Doe'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the budget details and approval authority. I will now create and approve the budgets.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"create_and_approve_budgets\",\n        \"parameters\": {\n            \"budget_details\": {\n                \"Department A\": (100000, \"Budget for department A\"),\n                \"Department B\": (150000, \"Budget for department B\")\n            },\n            \"approval_authority\": \"John Doe\"\n        }\n    }\n}",
    "data": "{\n    \"function_description\": {\n        \"name\": \"create_and_approve_budgets\",\n        \"description\": \"Creates and approves budgets for different departments or projects.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"budget_details\": {\n                    \"type\": \"object\",\n                    \"description\": \"A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.\",\n                    \"properties\": {\n                        \"type\": \"object\"\n                    }\n                },\n                \"approval_authority\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the person or body who has the authority to approve the budget.\"\n                }\n            },\n            \"required\": [\"budget_details\", \"approval_authority\"]\n        },\n        \"returns\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": \"object\"\n            }\n        }\n    },\n    \"conversation\": [\n        {\n            \"role\": \"user\",\n            \"text\": \"Can you help me create and approve budgets for different departments?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Sure, I can assist you with that. Please provide me with the budget details and the approval authority.\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Here are the budget details: {'Department A': (100000, 'Budget for department A'), 'Department B': (150000, 'Budget for department B')}. The approval authority is 'John Doe'.\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"text\": \"Thank you for providing the budget details and approval authority. I will now create and approve the budgets.\"\n        }\n    ],\n    \"function_call\": {\n        \"function_name\": \"create_and_approve_budgets\",\n        \"parameters\": {\n            \"budget_details\": {\n                \"Department A\": (100000, \"Budget for department A\"),\n                \"Department B\": (150000, \"Budget for department B\")\n            },\n            \"approval_authority\": \"John Doe\"\n        }\n    }\n}",
    "metadata": {
        "TEMPLATE": "\nBelow is the description of a function:\n    \"function_description\":\n    {FUNCTION_DESCRIPTION}\n\n\nA user is asking an assisstant a request that would eventually call the function, can you write that conversation for me.\nReturn the output as this example:\n    {{\n        \"function_description\":\n        {FUNCTION_EXAMPLE},\n        \"conversation\": {PROMPT_EXAMPLE},\n        \"function_call\": {CALL_EXAMPLE}\n    }}\n",
        "FUNCTION_DESCRIPTION": "{'function_snippet': 'def create_and_approve_budgets(\\n    budget_details: Dict[str, Union[float, str]],\\n    approval_authority: str,\\n) -> Dict[str, str]:\\n    \"\"\"\\n    Creates and approves budgets for different departments or projects.\\n\\n    Parameters:\\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\\n                                                       Each key is the name of a department or project,\\n                                                       and the value is a tuple where the first item is the\\n                                                       proposed budget amount and the second item is a brief\\n                                                       description of the budget.\\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\\n\\n    Returns:\\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\\n                        a string indicating whether the budget was approved (\\'Approved\\') or not (\\'Not Approved\\').\\n    \"\"\"\\n', 'function_description': {'name': 'create_and_approve_budgets', 'description': 'Creates and approves budgets for different departments or projects.', 'parameters': {'type': 'object', 'properties': {'budget_details': {'type': 'object', 'description': 'A dictionary containing budget details. Each key is the name of a department or project, and the value is a tuple where the first item is the proposed budget amount and the second item is a brief description of the budget.', 'properties': {'type': 'object'}}, 'approval_authority': {'type': 'string', 'description': 'The name of the person or body who has the authority to approve the budget.'}}, 'required': ['budget_details', 'approval_authority']}, 'returns': {'type': 'object', 'properties': {'type': 'object'}}}}",
        "PROMPT_EXAMPLE": "\n[\n    {\n        \"role\": \"user\",\n        \"text\": \"Hey, can you show me my Twitter timeline?\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Sure, I can do that. May I know your Twitter user ID?\"\n    },\n    {\n        \"role\": \"user\",\n        \"text\": \"Yes, my Twitter user ID is '13579'.\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"text\": \"Great, I'm retrieving your Twitter timeline now.\"\n    }\n]\n",
        "FUNCTION_EXAMPLE": "\n\"function_description\": {\n    \"name\": \"example_function\",\n    \"description\": \"Retrieves a user's timeline, including tweets, retweets, and replies.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"user_id\": {\n                \"type\": \"string\",\n                \"description\": \"The ID of the user.\"\n            }\n        },\n        \"required\": [\"user_id\"]\n    },\n    \"returns\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tweet_id\": {\"type\": \"string\"},\n            \"text\": {\"type\": \"string\"},\n            \"author\": {\"type\": \"string\"},\n            \"date\": {\"type\": \"string\"}\n        }\n    }\n}\n",
        "CALL_EXAMPLE": "\n{\n    \"function_name\": \"example_function\",\n    \"parameters\": {\n        \"user_id\": \"13579\"\n    }\n}\n"
    }
}

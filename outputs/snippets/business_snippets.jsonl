{
    "function_id": "business-1",
    "task": "schedule a meeting",
    "completion-content": "def schedule_meeting(\n    meeting_date: str,\n    meeting_time: str,\n    attendees: List[str],\n    meeting_agenda: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        attendees (List[str]): A list of email addresses of the attendees.\n        meeting_agenda (str): A brief description of the meeting agenda.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\n    \"\"\"",
    "snippet": "def schedule_meeting(\n    meeting_date: str,\n    meeting_time: str,\n    attendees: List[str],\n    meeting_agenda: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedules a meeting and returns the meeting details.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        meeting_time (str): The time of the meeting in HH:MM format.\n        attendees (List[str]): A list of email addresses of the attendees.\n        meeting_agenda (str): A brief description of the meeting agenda.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'meeting_id', 'meeting_link' and 'confirmation_status' as keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "schedule a meeting"
    }
}
{
    "function_id": "business-2",
    "task": "generate a sales report",
    "completion-content": "def generate_sales_report(\n    start_date: str,\n    end_date: str,\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report for a given date range.\n\n    Parameters:\n        start_date (str): The start date of the report in YYYY-MM-DD format.\n        end_date (str): The end date of the report in YYYY-MM-DD format.\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"",
    "snippet": "def generate_sales_report(\n    start_date: str,\n    end_date: str,\n    sales_data: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Generates a sales report for a given date range.\n\n    Parameters:\n        start_date (str): The start date of the report in YYYY-MM-DD format.\n        end_date (str): The end date of the report in YYYY-MM-DD format.\n        sales_data (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing sales details.\n                                                              Each dictionary should have 'product', 'quantity' and 'price' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_sales' as a key and the total sales as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate a sales report"
    }
}
{
    "function_id": "business-3",
    "task": "perform an employee evaluation",
    "completion-content": "def perform_employee_evaluation(\n    employee_id: str,\n    performance_metrics: Dict[str, Union[int, float]]\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\n\n    Parameters:\n        employee_id (str): The unique identifier of the employee to be evaluated.\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\n                                                            Each key represents a metric, and the value is the score.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\n    \"\"\"",
    "snippet": "def perform_employee_evaluation(\n    employee_id: str,\n    performance_metrics: Dict[str, Union[int, float]]\n) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Performs an employee evaluation based on given performance metrics and returns the evaluation results.\n\n    Parameters:\n        employee_id (str): The unique identifier of the employee to be evaluated.\n        performance_metrics (Dict[str, Union[int, float]]): A dictionary containing performance metrics.\n                                                            Each key represents a metric, and the value is the score.\n\n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing the evaluation results.\n                                            It includes 'employee_id', 'average_score', and 'evaluation_status' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "perform an employee evaluation"
    }
}
{
    "function_id": "business-4",
    "task": "create an account for a new customer",
    "completion-content": "def create_new_customer_account(\n    customer_name: str,\n    customer_email: str,\n    customer_password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the customer's account details.\n\n    Parameters:\n        customer_name (str): The name of the customer.\n        customer_email (str): The email address of the customer.\n        customer_password (str): The password for the new customer's account.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the customer's account details.\n                        The dictionary has 'customer_name', 'customer_email', \n                        and 'customer_id' as keys.\n    \"\"\"\n    pass",
    "snippet": "def create_new_customer_account(\n    customer_name: str,\n    customer_email: str,\n    customer_password: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates an account for a new customer and returns the customer's account details.\n\n    Parameters:\n        customer_name (str): The name of the customer.\n        customer_email (str): The email address of the customer.\n        customer_password (str): The password for the new customer's account.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the customer's account details.\n                        The dictionary has 'customer_name', 'customer_email', \n                        and 'customer_id' as keys.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "create an account for a new customer"
    }
}
{
    "function_id": "business-5",
    "task": "calculate payroll for someone",
    "completion-content": "def calculate_payroll(\n    hours_worked: float,\n    hourly_rate: float,\n    overtime_rate: float = 1.5,\n    standard_hours: float = 40.0,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for an employee based on the hours they worked,\n    their hourly rate, and the overtime rate.\n\n    Parameters:\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The employee's pay rate per hour.\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\n    \"\"\"\n    pass",
    "snippet": "def calculate_payroll(\n    hours_worked: float,\n    hourly_rate: float,\n    overtime_rate: float = 1.5,\n    standard_hours: float = 40.0,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates the payroll for an employee based on the hours they worked,\n    their hourly rate, and the overtime rate.\n\n    Parameters:\n        hours_worked (float): The number of hours the employee worked.\n        hourly_rate (float): The employee's pay rate per hour.\n        overtime_rate (float): The rate for overtime pay. Defaults to 1.5.\n        standard_hours (float): The number of standard hours in a work week. Overtime is calculated for hours above this. Defaults to 40.0.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'regular_pay' and 'overtime_pay' as keys and the corresponding amounts as values.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate payroll for someone"
    }
}
{
    "function_id": "business-6",
    "task": "calculate payroll for a team",
    "completion-content": "def calculate_payroll(\n    team_members: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates payroll for a team and returns the total payroll.\n\n    Parameters:\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\n    \"\"\"",
    "snippet": "def calculate_payroll(\n    team_members: List[Dict[str, Union[str, int, float]]]\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates payroll for a team and returns the total payroll.\n\n    Parameters:\n        team_members (List[Dict[str, Union[str, int, float]]]): A list of dictionaries containing team member details.\n                                                                Each dictionary should have 'name', 'hours_worked' and 'hourly_rate' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with each team member's name as a key and their total pay as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate payroll for a team"
    }
}
{
    "function_id": "business-7",
    "task": "update inventory stock data",
    "completion-content": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates inventory stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        quantity (int): The quantity to update the inventory with.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the updated inventory data.\n    \"\"\"\n    pass",
    "snippet": "def update_inventory_stock_data(\n    product_id: str,\n    quantity: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Updates inventory stock data for a specific product.\n\n    Parameters:\n        product_id (str): The ID of the product.\n        quantity (int): The quantity to update the inventory with.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the updated inventory data.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "update inventory stock data"
    }
}
{
    "function_id": "business-8",
    "task": "track the status of a shipment",
    "completion-content": "def track_shipment_status(\n    tracking_number: str,\n    shipping_company: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment and returns the current status and location.\n\n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        shipping_company (str): The name of the shipping company.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\n    \"\"\"\n    pass",
    "snippet": "def track_shipment_status(\n    tracking_number: str,\n    shipping_company: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Tracks the status of a shipment and returns the current status and location.\n\n    Parameters:\n        tracking_number (str): The tracking number of the shipment.\n        shipping_company (str): The name of the shipping company.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' and 'location' as keys and the current status and location as values.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "track the status of a shipment"
    }
}
{
    "function_id": "business-9",
    "task": "assign a customer support ticket to an agent",
    "completion-content": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Assigns a customer support ticket to a specified agent.\n\n    Parameters:\n        ticket_id (int): The id of the ticket that needs to be assigned.\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\n\n    Returns:\n        Dict[str, Any]: A dictionary with details of the assignment process. \n                        This can include keys like 'status' and 'message'.\n    \"\"\"",
    "snippet": "def assign_ticket_to_agent(\n    ticket_id: int,\n    agent_id: int,\n) -> Dict[str, Any]:\n    \"\"\"\n    Assigns a customer support ticket to a specified agent.\n\n    Parameters:\n        ticket_id (int): The id of the ticket that needs to be assigned.\n        agent_id (int): The id of the agent to whom the ticket will be assigned.\n\n    Returns:\n        Dict[str, Any]: A dictionary with details of the assignment process. \n                        This can include keys like 'status' and 'message'.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "assign a customer support ticket to an agent"
    }
}
{
    "function_id": "business-10",
    "task": "generate a unique discount code for a customer for maketing promotions",
    "completion-content": "def generate_discount_code(customer_id: str) -> str:\n    \"\"\"\n    Generate a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (str): The unique id of the customer.\n\n    Returns:\n        str: The generated unique discount code.\n    \"\"\"\n    pass",
    "snippet": "def generate_discount_code(customer_id: str) -> str:\n    \"\"\"\n    Generate a unique discount code for a customer for marketing promotions.\n\n    Parameters:\n        customer_id (str): The unique id of the customer.\n\n    Returns:\n        str: The generated unique discount code.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate a unique discount code for a customer for maketing promotions"
    }
}
{
    "function_id": "business-11",
    "task": "enable a customer's subscription to various services",
    "completion-content": "def enable_subscription(\n    customer_id: str,\n    services: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\n\n    Parameters:\n        customer_id (str): The unique identifier of the customer.\n        services (List[str]): A list of services to which the customer wants to subscribe.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \n        True indicates the subscription was successful, False indicates it was not.\n    \"\"\"",
    "snippet": "def enable_subscription(\n    customer_id: str,\n    services: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Enables a customer's subscription to various services and returns a dictionary indicating the status of each service.\n\n    Parameters:\n        customer_id (str): The unique identifier of the customer.\n        services (List[str]): A list of services to which the customer wants to subscribe.\n\n    Returns:\n        Dict[str, bool]: A dictionary with services as keys and a boolean value indicating the status of the subscription. \n        True indicates the subscription was successful, False indicates it was not.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "enable a customer's subscription to various services"
    }
}
{
    "function_id": "business-12",
    "task": "disable a customer's subscription to various services",
    "completion-content": "def disable_customer_subscription(\n    customer_id: str,\n    service_ids: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The id of the customer.\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\n\n    Returns:\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\n    \"\"\"",
    "snippet": "def disable_customer_subscription(\n    customer_id: str,\n    service_ids: List[str],\n) -> Dict[str, bool]:\n    \"\"\"\n    Disables a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The id of the customer.\n        service_ids (List[str]): A list of ids of the services to be unsubscribed.\n\n    Returns:\n        Dict[str, bool]: A dictionary with service id as a key and a boolean as a value indicating whether the unsubscription was successful.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "disable a customer's subscription to various services"
    }
}
{
    "function_id": "business-13",
    "task": "modify a customer's subscription to various services",
    "completion-content": "def modify_customer_subscription(\n    customer_id: str,\n    new_subscription: Dict[str, bool]\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\n                                            Each key is a service name and its corresponding value is a boolean \n                                            indicating whether the customer is subscribed to that service.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\n    \"\"\"\n    pass",
    "snippet": "def modify_customer_subscription(\n    customer_id: str,\n    new_subscription: Dict[str, bool]\n) -> Dict[str, str]:\n    \"\"\"\n    Modifies a customer's subscription to various services.\n\n    Parameters:\n        customer_id (str): The ID of the customer whose subscription needs to be modified.\n        new_subscription (Dict[str, bool]): A dictionary containing the new subscription status for various services.\n                                            Each key is a service name and its corresponding value is a boolean \n                                            indicating whether the customer is subscribed to that service.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'message' as a key and the status of the update operation as a value.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "modify a customer's subscription to various services"
    }
}
{
    "function_id": "business-14",
    "task": "renew contracts for services and subscriptions that are expiring",
    "completion-content": "def renew_contracts(\n    contracts: List[Dict[str, Union[str, datetime.date]]]\n) -> List[Dict[str, Union[str, datetime.date]]]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n\n    Parameters:\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \n                                                                Each dictionary should have 'contract_id', 'service', \n                                                                and 'expiration_date' keys.\n\n    Returns:\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \n                                                    Each dictionary will have 'contract_id', 'service', \n                                                    and 'new_expiration_date' keys.\n    \"\"\"\n    pass",
    "snippet": "def renew_contracts(\n    contracts: List[Dict[str, Union[str, datetime.date]]]\n) -> List[Dict[str, Union[str, datetime.date]]]:\n    \"\"\"\n    Renews contracts for services and subscriptions that are expiring.\n\n    Parameters:\n        contracts (List[Dict[str, Union[str, datetime.date]]]): A list of dictionaries containing contract details. \n                                                                Each dictionary should have 'contract_id', 'service', \n                                                                and 'expiration_date' keys.\n\n    Returns:\n        List[Dict[str, Union[str, datetime.date]]]: A list of dictionaries containing the renewed contract details. \n                                                    Each dictionary will have 'contract_id', 'service', \n                                                    and 'new_expiration_date' keys.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "renew contracts for services and subscriptions that are expiring"
    }
}
{
    "function_id": "business-15",
    "task": "perform a backup process of important business data",
    "completion-content": "def backup_business_data(\n    data: str,\n    backup_location: str,\n    backup_frequency: str,\n) -> bool:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data (str): The data to be backed up.\n        backup_location (str): The location where the backup data should be stored.\n        backup_frequency (str): The frequency at which the backup process should be performed.\n\n    Returns:\n        bool: Returns True if the backup process is successful, False otherwise.\n    \"\"\"\n    pass",
    "snippet": "def backup_business_data(\n    data: str,\n    backup_location: str,\n    backup_frequency: str,\n) -> bool:\n    \"\"\"\n    Performs a backup process of important business data.\n\n    Parameters:\n        data (str): The data to be backed up.\n        backup_location (str): The location where the backup data should be stored.\n        backup_frequency (str): The frequency at which the backup process should be performed.\n\n    Returns:\n        bool: Returns True if the backup process is successful, False otherwise.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "perform a backup process of important business data"
    }
}
{
    "function_id": "business-16",
    "task": "check the validity of a software license for a given product",
    "completion-content": "def check_software_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_id (str): The id of the product.\n        license_key (str): The license key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n    pass",
    "snippet": "def check_software_license_validity(\n    product_id: str,\n    license_key: str,\n) -> bool:\n    \"\"\"\n    Checks the validity of a software license for a given product.\n\n    Parameters:\n        product_id (str): The id of the product.\n        license_key (str): The license key to check.\n\n    Returns:\n        bool: True if the license is valid, False otherwise.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "check the validity of a software license for a given product"
    }
}
{
    "function_id": "business-17",
    "task": "onboard a new employee and do things like generate a new id, new email account, etc.",
    "completion-content": "def onboard_new_employee(\n    employee_name: str,\n    start_date: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee by generating a new id, new email account, etc.\n\n    Parameters:\n        employee_name (str): The full name of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\n    \"\"\"",
    "snippet": "def onboard_new_employee(\n    employee_name: str,\n    start_date: str\n) -> Dict[str, str]:\n    \"\"\"\n    Onboards a new employee by generating a new id, new email account, etc.\n\n    Parameters:\n        employee_name (str): The full name of the new employee.\n        start_date (str): The start date of the new employee in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary containing the new employee's details such as 'employee_id' and 'employee_email'.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "onboard a new employee and do things like generate a new id, new email account, etc."
    }
}
{
    "function_id": "business-18",
    "task": "allocate resources like meeting rooms, equipment, and personnel for a project or task force",
    "completion-content": "def allocate_resources(\n    meeting_rooms: List[str],\n    equipment: List[str],\n    personnel: List[str],\n    project: str,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.\n\n    Parameters:\n        meeting_rooms (List[str]): The list of available meeting rooms.\n        equipment (List[str]): The list of available equipment.\n        personnel (List[str]): The list of available personnel.\n        project (str): The name of the project.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'allocated_meeting_rooms', 'allocated_equipment' and 'allocated_personnel' as keys and \n                              their allocated resources as values.\n    \"\"\"",
    "snippet": "def allocate_resources(\n    meeting_rooms: List[str],\n    equipment: List[str],\n    personnel: List[str],\n    project: str,\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Allocates resources such as meeting rooms, equipment and personnel for a project or task force and returns a dictionary.\n\n    Parameters:\n        meeting_rooms (List[str]): The list of available meeting rooms.\n        equipment (List[str]): The list of available equipment.\n        personnel (List[str]): The list of available personnel.\n        project (str): The name of the project.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'allocated_meeting_rooms', 'allocated_equipment' and 'allocated_personnel' as keys and \n                              their allocated resources as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "allocate resources like meeting rooms, equipment, and personnel for a project or task force"
    }
}
{
    "function_id": "business-19",
    "task": "submit timesheets for employees, either for approval or archival",
    "completion-content": "def submit_timesheets(\n    employee_ids: List[int],\n    timesheet_data: Dict[int, Dict[str, Union[str, float]]],\n    action: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n    \n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \n                                                                  'hours_worked' and optionally 'overtime_hours'.\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\n\n    Returns:\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\n    \"\"\"",
    "snippet": "def submit_timesheets(\n    employee_ids: List[int],\n    timesheet_data: Dict[int, Dict[str, Union[str, float]]],\n    action: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Submits timesheets for employees, either for approval or archival.\n    \n    Parameters:\n        employee_ids (List[int]): A list of employee IDs.\n        timesheet_data (Dict[int, Dict[str, Union[str, float]]]): A dictionary mapping employee IDs to their timesheet data. \n                                                                  Each timesheet is a dictionary containing 'date' (YYYY-MM-DD format), \n                                                                  'hours_worked' and optionally 'overtime_hours'.\n        action (str): The action to be taken. It should be either 'approval' or 'archival'.\n\n    Returns:\n        Dict[str, str]: A dictionary with employee IDs as keys and the status of their timesheet submission as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "submit timesheets for employees, either for approval or archival"
    }
}
{
    "function_id": "business-20",
    "task": "calculate and distribute performance-based incentives or bonuses to employees",
    "completion-content": "def distribute_performance_incentives(\n    employee_performance: Dict[str, float],\n    bonus_pool: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\n    \"\"\"",
    "snippet": "def distribute_performance_incentives(\n    employee_performance: Dict[str, float],\n    bonus_pool: float,\n) -> Dict[str, float]:\n    \"\"\"\n    Calculates and distributes performance-based incentives or bonuses to employees.\n\n    Parameters:\n        employee_performance (Dict[str, float]): A dictionary with employee IDs as keys and their performance scores as values.\n        bonus_pool (float): The total amount of money available for distribution as bonuses.\n\n    Returns:\n        Dict[str, float]: A dictionary with employee IDs as keys and the bonus amount each employee receives as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "calculate and distribute performance-based incentives or bonuses to employees"
    }
}
{
    "function_id": "business-21",
    "task": "generate employee shift schedules based on availability and workload",
    "completion-content": "def generate_employee_shift_schedules(\n    employee_availability: Dict[str, List[str]],\n    workload: Dict[str, int]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate employee shift schedules based on their availability and the workload.\n\n    Parameters:\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\n                                                      and the value is a list of days the employee is available.\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \n                                   and the value is the number of employees needed for that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \n                              and the value is a list of days the employee is scheduled to work.\n    \"\"\"\n    pass",
    "snippet": "def generate_employee_shift_schedules(\n    employee_availability: Dict[str, List[str]],\n    workload: Dict[str, int]\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate employee shift schedules based on their availability and the workload.\n\n    Parameters:\n        employee_availability (Dict[str, List[str]]): A dictionary where each key is an employee name,\n                                                      and the value is a list of days the employee is available.\n        workload (Dict[str, int]): A dictionary where each key is a day of the week, \n                                   and the value is the number of employees needed for that day.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is an employee name, \n                              and the value is a list of days the employee is scheduled to work.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "generate employee shift schedules based on availability and workload"
    }
}
{
    "function_id": "business-22",
    "task": "create and approve budgets for different departments or projects",
    "completion-content": "def create_and_approve_budgets(\n    budget_details: Dict[str, Union[float, str]],\n    approval_authority: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\n                                                       Each key is the name of a department or project,\n                                                       and the value is a tuple where the first item is the\n                                                       proposed budget amount and the second item is a brief\n                                                       description of the budget.\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\n\n    Returns:\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\n    \"\"\"",
    "snippet": "def create_and_approve_budgets(\n    budget_details: Dict[str, Union[float, str]],\n    approval_authority: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Creates and approves budgets for different departments or projects.\n\n    Parameters:\n        budget_details (Dict[str, Union[float, str]]): A dictionary containing budget details.\n                                                       Each key is the name of a department or project,\n                                                       and the value is a tuple where the first item is the\n                                                       proposed budget amount and the second item is a brief\n                                                       description of the budget.\n        approval_authority (str): The name of the person or body who has the authority to approve the budget.\n\n    Returns:\n        Dict[str, str]: A dictionary where each key is the name of a department or project, and the value is\n                        a string indicating whether the budget was approved ('Approved') or not ('Not Approved').\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "create and approve budgets for different departments or projects"
    }
}

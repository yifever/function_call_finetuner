{
    "function_id": "business-travel-1",
    "task": "Book a flight ticket to a specific destination.",
    "completion-content": "def book_flight_ticket(\n    destination: str,\n) -> None:\n    \"\"\"\n    Books a flight ticket to a specific destination.\n\n    Parameters:\n        destination (str): The destination city.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def book_flight_ticket(\n    destination: str,\n) -> None:\n    \"\"\"\n    Books a flight ticket to a specific destination.\n\n    Parameters:\n        destination (str): The destination city.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Book a flight ticket to a specific destination."
    }
}
{
    "function_id": "business-travel-2",
    "task": "Cancel or modify an existing flight reservation.",
    "completion-content": "def cancel_or_modify_flight_reservation(\n    reservation_id: str,\n    new_departure_date: str,\n    new_passengers: List[Dict[str, str]] = None,\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing flight reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the reservation to cancel or modify.\n        new_departure_date (str): The new departure date in YYYY-MM-DD format.\n        new_passengers (List[Dict[str, str]]): Optional. A list of dictionaries containing updated passenger details.\n                                               Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        bool: True if the reservation was successfully canceled or modified, False otherwise.\n    \"\"\"",
    "snippet": "def cancel_or_modify_flight_reservation(\n    reservation_id: str,\n    new_departure_date: str,\n    new_passengers: List[Dict[str, str]] = None,\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing flight reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the reservation to cancel or modify.\n        new_departure_date (str): The new departure date in YYYY-MM-DD format.\n        new_passengers (List[Dict[str, str]]): Optional. A list of dictionaries containing updated passenger details.\n                                               Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        bool: True if the reservation was successfully canceled or modified, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Cancel or modify an existing flight reservation."
    }
}
{
    "function_id": "business-travel-3",
    "task": "Book accommodations at a hotel.",
    "completion-content": "def book_accommodations(\n    num_rooms: int,\n    hotel_name: str,\n    check_in_date: str,\n    check_out_date: str,\n    guests: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Books accommodations at a hotel and returns the total price.\n\n    Parameters:\n        num_rooms (int): The number of rooms to book.\n        hotel_name (str): The name of the hotel.\n        check_in_date (str): The check-in date in YYYY-MM-DD format.\n        check_out_date (str): The check-out date in YYYY-MM-DD format.\n        guests (List[Dict[str, str]]): A list of dictionaries containing guest details.\n                                       Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"",
    "snippet": "def book_accommodations(\n    num_rooms: int,\n    hotel_name: str,\n    check_in_date: str,\n    check_out_date: str,\n    guests: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Books accommodations at a hotel and returns the total price.\n\n    Parameters:\n        num_rooms (int): The number of rooms to book.\n        hotel_name (str): The name of the hotel.\n        check_in_date (str): The check-in date in YYYY-MM-DD format.\n        check_out_date (str): The check-out date in YYYY-MM-DD format.\n        guests (List[Dict[str, str]]): A list of dictionaries containing guest details.\n                                       Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Book accommodations at a hotel."
    }
}
{
    "function_id": "business-travel-4",
    "task": "Cancel or modify an existing hotel reservation.",
    "completion-content": "def cancel_modify_hotel_reservation(\n    reservation_id: str,\n    new_check_in_date: str,\n    new_check_out_date: str,\n    new_guests: List[Dict[str, str]],\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing hotel reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the reservation to be canceled or modified.\n        new_check_in_date (str): The new check-in date in YYYY-MM-DD format.\n        new_check_out_date (str): The new check-out date in YYYY-MM-DD format.\n        new_guests (List[Dict[str, str]]): A list of dictionaries containing new guest details.\n                                           Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        bool: True if the reservation was successfully canceled or modified, False otherwise.\n    \"\"\"",
    "snippet": "def cancel_modify_hotel_reservation(\n    reservation_id: str,\n    new_check_in_date: str,\n    new_check_out_date: str,\n    new_guests: List[Dict[str, str]],\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing hotel reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the reservation to be canceled or modified.\n        new_check_in_date (str): The new check-in date in YYYY-MM-DD format.\n        new_check_out_date (str): The new check-out date in YYYY-MM-DD format.\n        new_guests (List[Dict[str, str]]): A list of dictionaries containing new guest details.\n                                           Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        bool: True if the reservation was successfully canceled or modified, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Cancel or modify an existing hotel reservation."
    }
}
{
    "function_id": "business-travel-5",
    "task": "Rent a car at the destination.",
    "completion-content": "def rent_car_at_destination(\n    destination: str,\n    start_date: str,\n    end_date: str,\n) -> str:\n    \"\"\"\n    Rent a car at the destination.\n\n    Parameters:\n        destination (str): The destination city.\n        start_date (str): The start date of the rental period in YYYY-MM-DD format.\n        end_date (str): The end date of the rental period in YYYY-MM-DD format.\n\n    Returns:\n        str: A string indicating the success of the car rental.\n    \"\"\"",
    "snippet": "def rent_car_at_destination(\n    destination: str,\n    start_date: str,\n    end_date: str,\n) -> str:\n    \"\"\"\n    Rent a car at the destination.\n\n    Parameters:\n        destination (str): The destination city.\n        start_date (str): The start date of the rental period in YYYY-MM-DD format.\n        end_date (str): The end date of the rental period in YYYY-MM-DD format.\n\n    Returns:\n        str: A string indicating the success of the car rental.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Rent a car at the destination."
    }
}
{
    "function_id": "business-travel-6",
    "task": "Cancel or modify an existing car rental.",
    "completion-content": "def cancel_or_modify_car_rental(\n    reservation_id: str,\n    modifications: Dict[str, Any]\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing car rental reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the car rental reservation to cancel or modify.\n        modifications (Dict[str, Any]): A dictionary containing the modifications to be made.\n                                        The keys should represent the fields to be modified and the values\n                                        should represent the new values for those fields.\n\n    Returns:\n        bool: True if the cancellation or modification was successful, False otherwise.\n    \"\"\"",
    "snippet": "def cancel_or_modify_car_rental(\n    reservation_id: str,\n    modifications: Dict[str, Any]\n) -> bool:\n    \"\"\"\n    Cancels or modifies an existing car rental reservation.\n\n    Parameters:\n        reservation_id (str): The ID of the car rental reservation to cancel or modify.\n        modifications (Dict[str, Any]): A dictionary containing the modifications to be made.\n                                        The keys should represent the fields to be modified and the values\n                                        should represent the new values for those fields.\n\n    Returns:\n        bool: True if the cancellation or modification was successful, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Cancel or modify an existing car rental."
    }
}
{
    "function_id": "business-travel-7",
    "task": "Schedule airport transfers.",
    "completion-content": "def schedule_airport_transfers(\n    num_passengers: int,\n    pickup_location: str,\n    dropoff_location: str,\n    pickup_date: str,\n    pickup_time: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedule airport transfers and return the confirmation details.\n\n    Parameters:\n        num_passengers (int): The number of passengers requiring airport transfers.\n        pickup_location (str): The location where the passengers will be picked up.\n        dropoff_location (str): The destination location where the passengers will be dropped off.\n        pickup_date (str): The date of the airport transfer in YYYY-MM-DD format.\n        pickup_time (str): The time of the airport transfer in HH:MM format.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'confirmation_number' and 'pickup_details' as keys,\n                        and the respective values as strings.\n    \"\"\"",
    "snippet": "def schedule_airport_transfers(\n    num_passengers: int,\n    pickup_location: str,\n    dropoff_location: str,\n    pickup_date: str,\n    pickup_time: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Schedule airport transfers and return the confirmation details.\n\n    Parameters:\n        num_passengers (int): The number of passengers requiring airport transfers.\n        pickup_location (str): The location where the passengers will be picked up.\n        dropoff_location (str): The destination location where the passengers will be dropped off.\n        pickup_date (str): The date of the airport transfer in YYYY-MM-DD format.\n        pickup_time (str): The time of the airport transfer in HH:MM format.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'confirmation_number' and 'pickup_details' as keys,\n                        and the respective values as strings.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule airport transfers."
    }
}
{
    "function_id": "business-travel-8",
    "task": "Track flight status, including delays and cancellations.",
    "completion-content": "def track_flight_status(flight_number: str) -> Dict[str, str]:\n    \"\"\"\n    Track the status of a flight, including delays and cancellations.\n\n    Parameters:\n        flight_number (str): The flight number.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the flight status as a value.\n    \"\"\"",
    "snippet": "def track_flight_status(flight_number: str) -> Dict[str, str]:\n    \"\"\"\n    Track the status of a flight, including delays and cancellations.\n\n    Parameters:\n        flight_number (str): The flight number.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the flight status as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track flight status, including delays and cancellations."
    }
}
{
    "function_id": "business-travel-9",
    "task": "Check in for a flight online.",
    "completion-content": "def check_in_online(\n    flight_number: str,\n    passenger_name: str,\n    seat_number: str,\n) -> str:\n    \"\"\"\n    Checks in a passenger for a flight online and returns a confirmation message.\n\n    Parameters:\n        flight_number (str): The flight number.\n        passenger_name (str): The name of the passenger.\n        seat_number (str): The seat number of the passenger.\n\n    Returns:\n        str: A confirmation message for the online check-in.\n    \"\"\"\n    pass",
    "snippet": "def check_in_online(\n    flight_number: str,\n    passenger_name: str,\n    seat_number: str,\n) -> str:\n    \"\"\"\n    Checks in a passenger for a flight online and returns a confirmation message.\n\n    Parameters:\n        flight_number (str): The flight number.\n        passenger_name (str): The name of the passenger.\n        seat_number (str): The seat number of the passenger.\n\n    Returns:\n        str: A confirmation message for the online check-in.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Check in for a flight online."
    }
}
{
    "function_id": "business-travel-10",
    "task": "Retrieve and manage digital boarding passes.",
    "completion-content": "def retrieve_and_manage_digital_boarding_passes(\n    airline: str,\n    flight_number: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> List[str]:\n    \"\"\"\n    Retrieves and manages digital boarding passes for a given flight.\n\n    Parameters:\n        airline (str): The airline name.\n        flight_number (str): The flight number.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'ticket_number' keys.\n\n    Returns:\n        List[str]: A list of digital boarding passes.\n    \"\"\"",
    "snippet": "def retrieve_and_manage_digital_boarding_passes(\n    airline: str,\n    flight_number: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> List[str]:\n    \"\"\"\n    Retrieves and manages digital boarding passes for a given flight.\n\n    Parameters:\n        airline (str): The airline name.\n        flight_number (str): The flight number.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'ticket_number' keys.\n\n    Returns:\n        List[str]: A list of digital boarding passes.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve and manage digital boarding passes."
    }
}
{
    "function_id": "business-travel-11",
    "task": "Track and manage travel expenses.",
    "completion-content": "def track_and_manage_travel_expenses(\n    expenses: List[Dict[str, Union[str, float]]],\n    currency: str,\n) -> Dict[str, Union[float, Dict[str, float]]]:\n    \"\"\"\n    Track and manage travel expenses.\n\n    Parameters:\n        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.\n                                                      Each dictionary should have 'description' and 'amount' keys.\n        currency (str): The currency used for the expenses.\n\n    Returns:\n        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'total_expenses' as a key and the total expenses as a value,\n                                                   and 'expenses_breakdown' as a key and a dictionary with expense categories as keys\n                                                   and the total amount spent in each category as values.\n    \"\"\"",
    "snippet": "def track_and_manage_travel_expenses(\n    expenses: List[Dict[str, Union[str, float]]],\n    currency: str,\n) -> Dict[str, Union[float, Dict[str, float]]]:\n    \"\"\"\n    Track and manage travel expenses.\n\n    Parameters:\n        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.\n                                                      Each dictionary should have 'description' and 'amount' keys.\n        currency (str): The currency used for the expenses.\n\n    Returns:\n        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'total_expenses' as a key and the total expenses as a value,\n                                                   and 'expenses_breakdown' as a key and a dictionary with expense categories as keys\n                                                   and the total amount spent in each category as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track and manage travel expenses."
    }
}
{
    "function_id": "business-travel-12",
    "task": "Submit travel expenses for reimbursement.",
    "completion-content": "def submit_travel_expenses(\n    expenses: List[Dict[str, Union[str, float]]],\n    reimbursement_form: str,\n) -> bool:\n    \"\"\"\n    Submits travel expenses for reimbursement.\n\n    Parameters:\n        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.\n                                                      Each dictionary should have 'category' and 'amount' keys.\n        reimbursement_form (str): The path to the reimbursement form.\n\n    Returns:\n        bool: True if the travel expenses are successfully submitted, False otherwise.\n    \"\"\"\n    pass",
    "snippet": "def submit_travel_expenses(\n    expenses: List[Dict[str, Union[str, float]]],\n    reimbursement_form: str,\n) -> bool:\n    \"\"\"\n    Submits travel expenses for reimbursement.\n\n    Parameters:\n        expenses (List[Dict[str, Union[str, float]]]): A list of dictionaries containing expense details.\n                                                      Each dictionary should have 'category' and 'amount' keys.\n        reimbursement_form (str): The path to the reimbursement form.\n\n    Returns:\n        bool: True if the travel expenses are successfully submitted, False otherwise.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Submit travel expenses for reimbursement."
    }
}
{
    "function_id": "business-travel-13",
    "task": "Generate and share a travel itinerary.",
    "completion-content": "def generate_travel_itinerary(\n    destination: str,\n    start_date: str,\n    end_date: str,\n    activities: List[str],\n    accommodations: List[str],\n    transportation: str,\n) -> str:\n    \"\"\"\n    Generates a travel itinerary and returns it as a string.\n\n    Parameters:\n        destination (str): The destination city.\n        start_date (str): The start date of the trip in YYYY-MM-DD format.\n        end_date (str): The end date of the trip in YYYY-MM-DD format.\n        activities (List[str]): A list of activities planned for the trip.\n        accommodations (List[str]): A list of accommodations planned for the trip.\n        transportation (str): The mode of transportation for the trip.\n\n    Returns:\n        str: The generated travel itinerary as a string.\n    \"\"\"",
    "snippet": "def generate_travel_itinerary(\n    destination: str,\n    start_date: str,\n    end_date: str,\n    activities: List[str],\n    accommodations: List[str],\n    transportation: str,\n) -> str:\n    \"\"\"\n    Generates a travel itinerary and returns it as a string.\n\n    Parameters:\n        destination (str): The destination city.\n        start_date (str): The start date of the trip in YYYY-MM-DD format.\n        end_date (str): The end date of the trip in YYYY-MM-DD format.\n        activities (List[str]): A list of activities planned for the trip.\n        accommodations (List[str]): A list of accommodations planned for the trip.\n        transportation (str): The mode of transportation for the trip.\n\n    Returns:\n        str: The generated travel itinerary as a string.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate and share a travel itinerary."
    }
}
{
    "function_id": "business-travel-14",
    "task": "Find nearby dining options based on location.",
    "completion-content": "def find_nearby_dining_options(\n    location: str\n) -> List[str]:\n    \"\"\"\n    Finds nearby dining options based on location.\n\n    Parameters:\n        location (str): The location to search for nearby dining options.\n\n    Returns:\n        List[str]: A list of nearby dining options.\n    \"\"\"\n    # Code implementation to find nearby dining options based on location",
    "snippet": "def find_nearby_dining_options(\n    location: str\n) -> List[str]:\n    \"\"\"\n    Finds nearby dining options based on location.\n\n    Parameters:\n        location (str): The location to search for nearby dining options.\n\n    Returns:\n        List[str]: A list of nearby dining options.\n    \"\"\"\n    # Code implementation to find nearby dining options based on location",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Find nearby dining options based on location."
    }
}
{
    "function_id": "business-travel-15",
    "task": "Schedule and manage meetings during the trip.",
    "completion-content": "def schedule_meetings(\n    start_time: str,\n    end_time: str,\n    meeting_duration: int,\n    attendees: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Schedule and manage meetings during the trip.\n\n    Parameters:\n        start_time (str): The start time of the meetings in HH:MM format.\n        end_time (str): The end time of the meetings in HH:MM format.\n        meeting_duration (int): The duration of each meeting in minutes.\n        attendees (List[str]): A list of attendees for the meetings.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'meeting_schedule' as a key and a list of scheduled meetings as a value.\n    \"\"\"",
    "snippet": "def schedule_meetings(\n    start_time: str,\n    end_time: str,\n    meeting_duration: int,\n    attendees: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Schedule and manage meetings during the trip.\n\n    Parameters:\n        start_time (str): The start time of the meetings in HH:MM format.\n        end_time (str): The end time of the meetings in HH:MM format.\n        meeting_duration (int): The duration of each meeting in minutes.\n        attendees (List[str]): A list of attendees for the meetings.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'meeting_schedule' as a key and a list of scheduled meetings as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule and manage meetings during the trip."
    }
}
{
    "function_id": "business-travel-16",
    "task": "Book and manage meeting rooms or conference spaces.",
    "completion-content": "def book_and_manage_meeting_rooms_or_conference_spaces(\n    room_type: str,\n    start_time: str,\n    end_time: str,\n    attendees: List[str],\n) -> str:\n    \"\"\"\n    Book and manage meeting rooms or conference spaces.\n\n    Parameters:\n        room_type (str): The type of room to book.\n        start_time (str): The start time of the meeting in HH:MM format.\n        end_time (str): The end time of the meeting in HH:MM format.\n        attendees (List[str]): A list of attendees' names.\n\n    Returns:\n        str: A confirmation message indicating the booking status.\n    \"\"\"",
    "snippet": "def book_and_manage_meeting_rooms_or_conference_spaces(\n    room_type: str,\n    start_time: str,\n    end_time: str,\n    attendees: List[str],\n) -> str:\n    \"\"\"\n    Book and manage meeting rooms or conference spaces.\n\n    Parameters:\n        room_type (str): The type of room to book.\n        start_time (str): The start time of the meeting in HH:MM format.\n        end_time (str): The end time of the meeting in HH:MM format.\n        attendees (List[str]): A list of attendees' names.\n\n    Returns:\n        str: A confirmation message indicating the booking status.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Book and manage meeting rooms or conference spaces."
    }
}
{
    "function_id": "business-travel-17",
    "task": "Order supplies or equipment for the meeting.",
    "completion-content": "def order_supplies_or_equipment(\n    meeting_date: str,\n    supplies_needed: List[str],\n    equipment_needed: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Orders supplies or equipment for the meeting.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        supplies_needed (List[str]): A list of supplies needed for the meeting.\n        equipment_needed (List[str]): A list of equipment needed for the meeting.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'supplies_ordered' and 'equipment_ordered' as keys.\n                             The values are lists containing the ordered supplies and equipment, respectively.\n    \"\"\"",
    "snippet": "def order_supplies_or_equipment(\n    meeting_date: str,\n    supplies_needed: List[str],\n    equipment_needed: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Orders supplies or equipment for the meeting.\n\n    Parameters:\n        meeting_date (str): The date of the meeting in YYYY-MM-DD format.\n        supplies_needed (List[str]): A list of supplies needed for the meeting.\n        equipment_needed (List[str]): A list of equipment needed for the meeting.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with 'supplies_ordered' and 'equipment_ordered' as keys.\n                             The values are lists containing the ordered supplies and equipment, respectively.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Order supplies or equipment for the meeting."
    }
}
{
    "function_id": "business-travel-18",
    "task": "Find and use co-working spaces.",
    "completion-content": "def find_and_use_coworking_spaces(\n    location: str,\n    date: str,\n    num_people: int,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Finds and uses co-working spaces at a given location and date.\n\n    Parameters:\n        location (str): The location where co-working spaces are to be found.\n        date (str): The date when co-working spaces are to be used in YYYY-MM-DD format.\n        num_people (int): The number of people using the co-working space.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing the details of each co-working space.\n                              Each dictionary should have 'name', 'address', and 'price' keys.\n    \"\"\"",
    "snippet": "def find_and_use_coworking_spaces(\n    location: str,\n    date: str,\n    num_people: int,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Finds and uses co-working spaces at a given location and date.\n\n    Parameters:\n        location (str): The location where co-working spaces are to be found.\n        date (str): The date when co-working spaces are to be used in YYYY-MM-DD format.\n        num_people (int): The number of people using the co-working space.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing the details of each co-working space.\n                              Each dictionary should have 'name', 'address', and 'price' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Find and use co-working spaces."
    }
}
{
    "function_id": "business-travel-19",
    "task": "Arrange for local transportation like taxis or rideshares.",
    "completion-content": "def arrange_local_transportation(\n    location: str,\n    num_passengers: int,\n    pickup_time: str,\n    dropoff_time: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Arranges for local transportation like taxis or rideshares.\n\n    Parameters:\n        location (str): The location where transportation is needed.\n        num_passengers (int): The number of passengers.\n        pickup_time (str): The desired pickup time.\n        dropoff_time (str): The desired dropoff time.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'confirmation_number' as a key and the confirmation number as a value.\n    \"\"\"",
    "snippet": "def arrange_local_transportation(\n    location: str,\n    num_passengers: int,\n    pickup_time: str,\n    dropoff_time: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Arranges for local transportation like taxis or rideshares.\n\n    Parameters:\n        location (str): The location where transportation is needed.\n        num_passengers (int): The number of passengers.\n        pickup_time (str): The desired pickup time.\n        dropoff_time (str): The desired dropoff time.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'confirmation_number' as a key and the confirmation number as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Arrange for local transportation like taxis or rideshares."
    }
}
{
    "function_id": "business-travel-20",
    "task": "Exchange currency based on current exchange rates.",
    "completion-content": "def exchange_currency(amount: float, base_currency: str, target_currency: str) -> float:\n    \"\"\"\n    Exchange currency based on current exchange rates.\n\n    Parameters:\n        amount (float): The amount of currency to exchange.\n        base_currency (str): The currency to convert from.\n        target_currency (str): The currency to convert to.\n\n    Returns:\n        float: The exchanged amount in the target currency.\n    \"\"\"",
    "snippet": "def exchange_currency(amount: float, base_currency: str, target_currency: str) -> float:\n    \"\"\"\n    Exchange currency based on current exchange rates.\n\n    Parameters:\n        amount (float): The amount of currency to exchange.\n        base_currency (str): The currency to convert from.\n        target_currency (str): The currency to convert to.\n\n    Returns:\n        float: The exchanged amount in the target currency.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Exchange currency based on current exchange rates."
    }
}
{
    "function_id": "business-travel-21",
    "task": "Find and navigate to points of interest or necessary locations, like embassies or hospitals.",
    "completion-content": "def find_points_of_interest(\n    location: str,\n    categories: List[str],\n    radius: float,\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Find and navigate to points of interest or necessary locations.\n\n    Parameters:\n        location (str): The location to search for points of interest.\n        categories (List[str]): A list of categories to filter the points of interest.\n        radius (float): The radius in meters to search for points of interest.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing the details of the points of interest.\n                             Each dictionary should have 'name', 'latitude', 'longitude', and 'address' keys.\n    \"\"\"",
    "snippet": "def find_points_of_interest(\n    location: str,\n    categories: List[str],\n    radius: float,\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Find and navigate to points of interest or necessary locations.\n\n    Parameters:\n        location (str): The location to search for points of interest.\n        categories (List[str]): A list of categories to filter the points of interest.\n        radius (float): The radius in meters to search for points of interest.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing the details of the points of interest.\n                             Each dictionary should have 'name', 'latitude', 'longitude', and 'address' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Find and navigate to points of interest or necessary locations, like embassies or hospitals."
    }
}
{
    "function_id": "business-travel-22",
    "task": "Translate text or spoken language.",
    "completion-content": "def translate_text_or_spoken_language(\n    text: str,\n    source_language: str,\n    target_language: str,\n) -> str:\n    \"\"\"\n    Translates the given text or spoken language from the source language to the target language.\n\n    Parameters:\n        text (str): The text or spoken language to be translated.\n        source_language (str): The language of the text or spoken language.\n        target_language (str): The desired language for translation.\n\n    Returns:\n        str: The translated text or spoken language.\n    \"\"\"",
    "snippet": "def translate_text_or_spoken_language(\n    text: str,\n    source_language: str,\n    target_language: str,\n) -> str:\n    \"\"\"\n    Translates the given text or spoken language from the source language to the target language.\n\n    Parameters:\n        text (str): The text or spoken language to be translated.\n        source_language (str): The language of the text or spoken language.\n        target_language (str): The desired language for translation.\n\n    Returns:\n        str: The translated text or spoken language.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Translate text or spoken language."
    }
}
{
    "function_id": "business-travel-23",
    "task": "Receive safety alerts or travel advisories.",
    "completion-content": "def receive_safety_alerts_or_travel_advisories() -> None:\n    \"\"\"\n    Receives safety alerts or travel advisories.\n\n    Returns:\n        None\n    \"\"\"\n    # Code implementation goes here",
    "snippet": "def receive_safety_alerts_or_travel_advisories() -> None:\n    \"\"\"\n    Receives safety alerts or travel advisories.\n\n    Returns:\n        None\n    \"\"\"\n    # Code implementation goes here",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Receive safety alerts or travel advisories."
    }
}
{
    "function_id": "business-travel-24",
    "task": "Access and manage digital copies of important travel documents.",
    "completion-content": "def access_manage_travel_documents(\n    document_type: str,\n    document_number: str,\n    expiration_date: str,\n    document_owner: str,\n    document_file: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Accesses and manages digital copies of important travel documents.\n\n    Parameters:\n        document_type (str): The type of the travel document.\n        document_number (str): The document number.\n        expiration_date (str): The expiration date of the document.\n        document_owner (str): The owner of the document.\n        document_file (str): The file path of the digital copy.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'document_type', 'document_number', 'expiration_date', 'document_owner',\n                        and 'document_file' keys and their respective values.\n    \"\"\"",
    "snippet": "def access_manage_travel_documents(\n    document_type: str,\n    document_number: str,\n    expiration_date: str,\n    document_owner: str,\n    document_file: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Accesses and manages digital copies of important travel documents.\n\n    Parameters:\n        document_type (str): The type of the travel document.\n        document_number (str): The document number.\n        expiration_date (str): The expiration date of the document.\n        document_owner (str): The owner of the document.\n        document_file (str): The file path of the digital copy.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'document_type', 'document_number', 'expiration_date', 'document_owner',\n                        and 'document_file' keys and their respective values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Access and manage digital copies of important travel documents."
    }
}
{
    "function_id": "business-travel-25",
    "task": "Check visa requirements and application status.",
    "completion-content": "def check_visa_requirements_and_application_status(\n    passport_number: str,\n    destination_country: str,\n    departure_date: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Checks visa requirements and application status for a given passport number, destination country,\n    and departure date.\n\n    Parameters:\n        passport_number (str): The passport number of the traveler.\n        destination_country (str): The country the traveler intends to visit.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'requirements' and 'status' as keys and their respective values.\n    \"\"\"",
    "snippet": "def check_visa_requirements_and_application_status(\n    passport_number: str,\n    destination_country: str,\n    departure_date: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Checks visa requirements and application status for a given passport number, destination country,\n    and departure date.\n\n    Parameters:\n        passport_number (str): The passport number of the traveler.\n        destination_country (str): The country the traveler intends to visit.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'requirements' and 'status' as keys and their respective values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Check visa requirements and application status."
    }
}

{
    "function_id": "personal_assistant-1",
    "task": "Schedule an appointment or meeting in the calendar.",
    "completion-content": "def schedule_appointment(\n    date: str,\n    time: str,\n    participants: List[str],\n    location: str,\n    description: str,\n) -> str:\n    \"\"\"\n    Schedule an appointment or meeting in the calendar.\n\n    Parameters:\n        date (str): The date of the appointment in YYYY-MM-DD format.\n        time (str): The time of the appointment in HH:MM format.\n        participants (List[str]): A list of participants' names.\n        location (str): The location of the appointment.\n        description (str): A brief description of the appointment.\n\n    Returns:\n        str: A confirmation message indicating the appointment has been scheduled.\n    \"\"\"",
    "snippet": "def schedule_appointment(\n    date: str,\n    time: str,\n    participants: List[str],\n    location: str,\n    description: str,\n) -> str:\n    \"\"\"\n    Schedule an appointment or meeting in the calendar.\n\n    Parameters:\n        date (str): The date of the appointment in YYYY-MM-DD format.\n        time (str): The time of the appointment in HH:MM format.\n        participants (List[str]): A list of participants' names.\n        location (str): The location of the appointment.\n        description (str): A brief description of the appointment.\n\n    Returns:\n        str: A confirmation message indicating the appointment has been scheduled.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule an appointment or meeting in the calendar."
    }
}
{
    "function_id": "personal_assistant-2",
    "task": "Send a reminder for upcoming events or deadlines.",
    "completion-content": "def send_reminder(events: List[Dict[str, Union[str, datetime.datetime]]]) -> None:\n    \"\"\"\n    Sends a reminder for upcoming events or deadlines.\n\n    Parameters:\n        events (List[Dict[str, Union[str, datetime.datetime]]]): A list of dictionaries containing event details.\n                                                               Each dictionary should have 'name' and 'date' keys.\n                                                               The 'date' key should have a value of type datetime.datetime.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def send_reminder(events: List[Dict[str, Union[str, datetime.datetime]]]) -> None:\n    \"\"\"\n    Sends a reminder for upcoming events or deadlines.\n\n    Parameters:\n        events (List[Dict[str, Union[str, datetime.datetime]]]): A list of dictionaries containing event details.\n                                                               Each dictionary should have 'name' and 'date' keys.\n                                                               The 'date' key should have a value of type datetime.datetime.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a reminder for upcoming events or deadlines."
    }
}
{
    "function_id": "personal_assistant-3",
    "task": "Send an email to a specific contact.",
    "completion-content": "def send_email(\n    contact: str,\n    subject: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends an email to a specific contact.\n\n    Parameters:\n        contact (str): The email address of the recipient.\n        subject (str): The subject of the email.\n        message (str): The content of the email.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def send_email(\n    contact: str,\n    subject: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends an email to a specific contact.\n\n    Parameters:\n        contact (str): The email address of the recipient.\n        subject (str): The subject of the email.\n        message (str): The content of the email.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send an email to a specific contact."
    }
}
{
    "function_id": "personal_assistant-4",
    "task": "Perform a web search to find information.",
    "completion-content": "def perform_web_search(query: str) -> str:\n    \"\"\"\n    Performs a web search and returns the search results.\n\n    Parameters:\n        query (str): The search query.\n\n    Returns:\n        str: The search results.\n    \"\"\"",
    "snippet": "def perform_web_search(query: str) -> str:\n    \"\"\"\n    Performs a web search and returns the search results.\n\n    Parameters:\n        query (str): The search query.\n\n    Returns:\n        str: The search results.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Perform a web search to find information."
    }
}
{
    "function_id": "personal_assistant-5",
    "task": "Place an online order for groceries or other items.",
    "completion-content": "def place_online_order(\n    items: List[str],\n    quantity: List[int],\n    delivery_address: str,\n    payment_method: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Places an online order for groceries or other items.\n\n    Parameters:\n        items (List[str]): A list of items to order.\n        quantity (List[int]): A list of quantities corresponding to each item.\n        delivery_address (str): The address where the items should be delivered.\n        payment_method (str): The payment method to be used.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'order_id' as a key and the order ID as a value.\n    \"\"\"",
    "snippet": "def place_online_order(\n    items: List[str],\n    quantity: List[int],\n    delivery_address: str,\n    payment_method: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Places an online order for groceries or other items.\n\n    Parameters:\n        items (List[str]): A list of items to order.\n        quantity (List[int]): A list of quantities corresponding to each item.\n        delivery_address (str): The address where the items should be delivered.\n        payment_method (str): The payment method to be used.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'order_id' as a key and the order ID as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Place an online order for groceries or other items."
    }
}
{
    "function_id": "personal_assistant-6",
    "task": "Provide weather forecasts for a specific location.",
    "completion-content": "def get_weather_forecast(location: str) -> Dict[str, Any]:\n    \"\"\"\n    Retrieves the weather forecast for a specific location.\n\n    Parameters:\n        location (str): The location for which to retrieve the weather forecast.\n\n    Returns:\n        Dict[str, Any]: A dictionary with the weather forecast details.\n    \"\"\"",
    "snippet": "def get_weather_forecast(location: str) -> Dict[str, Any]:\n    \"\"\"\n    Retrieves the weather forecast for a specific location.\n\n    Parameters:\n        location (str): The location for which to retrieve the weather forecast.\n\n    Returns:\n        Dict[str, Any]: A dictionary with the weather forecast details.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide weather forecasts for a specific location."
    }
}
{
    "function_id": "personal_assistant-7",
    "task": "Manage and play a music playlist.",
    "completion-content": "def manage_music_playlist(\n    playlist_name: str,\n    songs: List[str],\n    current_song: str,\n    play_count: Dict[str, int],\n) -> None:\n    \"\"\"\n    Manages and plays a music playlist.\n\n    Parameters:\n        playlist_name (str): The name of the playlist.\n        songs (List[str]): A list of songs in the playlist.\n        current_song (str): The currently playing song.\n        play_count (Dict[str, int]): A dictionary with song names as keys and play counts as values.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def manage_music_playlist(\n    playlist_name: str,\n    songs: List[str],\n    current_song: str,\n    play_count: Dict[str, int],\n) -> None:\n    \"\"\"\n    Manages and plays a music playlist.\n\n    Parameters:\n        playlist_name (str): The name of the playlist.\n        songs (List[str]): A list of songs in the playlist.\n        current_song (str): The currently playing song.\n        play_count (Dict[str, int]): A dictionary with song names as keys and play counts as values.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and play a music playlist."
    }
}
{
    "function_id": "personal_assistant-8",
    "task": "Turn smart home devices on or off (e.g., lights, thermostat).",
    "completion-content": "def control_smart_home_devices(\n    devices: List[str],\n    action: str\n) -> None:\n    \"\"\"\n    Turns smart home devices on or off.\n\n    Parameters:\n        devices (List[str]): A list of smart home devices to control.\n        action (str): The action to perform on the devices ('on' or 'off').\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "snippet": "def control_smart_home_devices(\n    devices: List[str],\n    action: str\n) -> None:\n    \"\"\"\n    Turns smart home devices on or off.\n\n    Parameters:\n        devices (List[str]): A list of smart home devices to control.\n        action (str): The action to perform on the devices ('on' or 'off').\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Turn smart home devices on or off (e.g., lights, thermostat)."
    }
}
{
    "function_id": "personal_assistant-9",
    "task": "Make a phone call to a specific contact.",
    "completion-content": "def make_phone_call(\n    contact_name: str,\n    phone_number: str,\n) -> None:\n    \"\"\"\n    Makes a phone call to a specific contact.\n\n    Parameters:\n        contact_name (str): The name of the contact to call.\n        phone_number (str): The phone number of the contact.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def make_phone_call(\n    contact_name: str,\n    phone_number: str,\n) -> None:\n    \"\"\"\n    Makes a phone call to a specific contact.\n\n    Parameters:\n        contact_name (str): The name of the contact to call.\n        phone_number (str): The phone number of the contact.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Make a phone call to a specific contact."
    }
}
{
    "function_id": "personal_assistant-10",
    "task": "Send a text message to a specific contact.",
    "completion-content": "def send_text_message(\n    contact: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends a text message to a specific contact.\n\n    Parameters:\n        contact (str): The contact to send the message to.\n        message (str): The text message to send.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def send_text_message(\n    contact: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends a text message to a specific contact.\n\n    Parameters:\n        contact (str): The contact to send the message to.\n        message (str): The text message to send.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a text message to a specific contact."
    }
}
{
    "function_id": "personal_assistant-11",
    "task": "Provide directions to a destination.",
    "completion-content": "def provide_directions_to_destination(\n    destination: str,\n) -> str:\n    \"\"\"\n    Provides directions to a given destination.\n\n    Parameters:\n        destination (str): The destination city or address.\n\n    Returns:\n        str: A string containing the directions to the destination.\n    \"\"\"",
    "snippet": "def provide_directions_to_destination(\n    destination: str,\n) -> str:\n    \"\"\"\n    Provides directions to a given destination.\n\n    Parameters:\n        destination (str): The destination city or address.\n\n    Returns:\n        str: A string containing the directions to the destination.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide directions to a destination."
    }
}
{
    "function_id": "personal_assistant-12",
    "task": "Book a ride-sharing service.",
    "completion-content": "def book_ride_sharing_service(\n    pickup_location: str,\n    dropoff_location: str,\n    pickup_time: str,\n    num_passengers: int,\n) -> str:\n    \"\"\"\n    Books a ride-sharing service.\n\n    Parameters:\n        pickup_location (str): The pickup location.\n        dropoff_location (str): The dropoff location.\n        pickup_time (str): The pickup time in HH:MM AM/PM format.\n        num_passengers (int): The number of passengers.\n\n    Returns:\n        str: A confirmation message for the booked ride-sharing service.\n    \"\"\"",
    "snippet": "def book_ride_sharing_service(\n    pickup_location: str,\n    dropoff_location: str,\n    pickup_time: str,\n    num_passengers: int,\n) -> str:\n    \"\"\"\n    Books a ride-sharing service.\n\n    Parameters:\n        pickup_location (str): The pickup location.\n        dropoff_location (str): The dropoff location.\n        pickup_time (str): The pickup time in HH:MM AM/PM format.\n        num_passengers (int): The number of passengers.\n\n    Returns:\n        str: A confirmation message for the booked ride-sharing service.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Book a ride-sharing service."
    }
}
{
    "function_id": "personal_assistant-13",
    "task": "Translate text from one language to another.",
    "completion-content": "def translate_text(\n    text: str,\n    source_language: str,\n    target_language: str,\n) -> str:\n    \"\"\"\n    Translates text from one language to another.\n\n    Parameters:\n        text (str): The text to be translated.\n        source_language (str): The language of the text.\n        target_language (str): The language to translate the text into.\n\n    Returns:\n        str: The translated text.\n    \"\"\"",
    "snippet": "def translate_text(\n    text: str,\n    source_language: str,\n    target_language: str,\n) -> str:\n    \"\"\"\n    Translates text from one language to another.\n\n    Parameters:\n        text (str): The text to be translated.\n        source_language (str): The language of the text.\n        target_language (str): The language to translate the text into.\n\n    Returns:\n        str: The translated text.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Translate text from one language to another."
    }
}
{
    "function_id": "personal_assistant-14",
    "task": "Convert currency, measurements, or other units.",
    "completion-content": "def convert_units(\n    value: float,\n    unit_from: str,\n    unit_to: str,\n) -> float:\n    \"\"\"\n    Converts units from one measurement to another.\n\n    Parameters:\n        value (float): The value to be converted.\n        unit_from (str): The unit to convert from.\n        unit_to (str): The unit to convert to.\n\n    Returns:\n        float: The converted value.\n    \"\"\"",
    "snippet": "def convert_units(\n    value: float,\n    unit_from: str,\n    unit_to: str,\n) -> float:\n    \"\"\"\n    Converts units from one measurement to another.\n\n    Parameters:\n        value (float): The value to be converted.\n        unit_from (str): The unit to convert from.\n        unit_to (str): The unit to convert to.\n\n    Returns:\n        float: The converted value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Convert currency, measurements, or other units."
    }
}
{
    "function_id": "personal_assistant-15",
    "task": "Provide news headlines or updates.",
    "completion-content": "def get_news_headlines() -> List[str]:\n    \"\"\"\n    Retrieves and returns a list of news headlines or updates.\n\n    Returns:\n        List[str]: A list of strings representing news headlines or updates.\n    \"\"\"\n    pass",
    "snippet": "def get_news_headlines() -> List[str]:\n    \"\"\"\n    Retrieves and returns a list of news headlines or updates.\n\n    Returns:\n        List[str]: A list of strings representing news headlines or updates.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide news headlines or updates."
    }
}
{
    "function_id": "personal_assistant-16",
    "task": "Manage to-do lists or tasks.",
    "completion-content": "def manage_to_do_lists(tasks: List[str]) -> None:\n    \"\"\"\n    Manages to-do lists or tasks.\n\n    Parameters:\n        tasks (List[str]): A list of tasks to manage.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "snippet": "def manage_to_do_lists(tasks: List[str]) -> None:\n    \"\"\"\n    Manages to-do lists or tasks.\n\n    Parameters:\n        tasks (List[str]): A list of tasks to manage.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage to-do lists or tasks."
    }
}
{
    "function_id": "personal_assistant-17",
    "task": "Stream a video from a specified service.",
    "completion-content": "def stream_video(service: str, video_id: str) -> None:\n    \"\"\"\n    Streams a video from a specified service.\n\n    Parameters:\n        service (str): The name of the video streaming service.\n        video_id (str): The ID of the video to stream.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def stream_video(service: str, video_id: str) -> None:\n    \"\"\"\n    Streams a video from a specified service.\n\n    Parameters:\n        service (str): The name of the video streaming service.\n        video_id (str): The ID of the video to stream.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Stream a video from a specified service."
    }
}
{
    "function_id": "personal_assistant-18",
    "task": "Take notes or transcribe spoken content.",
    "completion-content": "def take_notes_or_transcribe_spoken_content() -> str:\n    \"\"\"\n    Takes notes or transcribes spoken content and returns the transcribed text.\n\n    Returns:\n        str: The transcribed text.\n    \"\"\"\n    pass",
    "snippet": "def take_notes_or_transcribe_spoken_content() -> str:\n    \"\"\"\n    Takes notes or transcribes spoken content and returns the transcribed text.\n\n    Returns:\n        str: The transcribed text.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Take notes or transcribe spoken content."
    }
}
{
    "function_id": "personal_assistant-19",
    "task": "Read aloud text from an article, book, or webpage.",
    "completion-content": "def read_aloud_text(source: str) -> None:\n    \"\"\"\n    Reads aloud text from an article, book, or webpage.\n\n    Parameters:\n        source (str): The source of the text to be read aloud.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def read_aloud_text(source: str) -> None:\n    \"\"\"\n    Reads aloud text from an article, book, or webpage.\n\n    Parameters:\n        source (str): The source of the text to be read aloud.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Read aloud text from an article, book, or webpage."
    }
}
{
    "function_id": "personal_assistant-20",
    "task": "Provide recommendations for restaurants or entertainment.",
    "completion-content": "def provide_recommendations(\n    location: str,\n    preferences: Dict[str, str]\n) -> List[str]:\n    \"\"\"\n    Provides recommendations for restaurants or entertainment based on the location and preferences.\n\n    Parameters:\n        location (str): The location for which recommendations are needed.\n        preferences (Dict[str, str]): A dictionary containing user preferences.\n                                      Possible keys: 'cuisine', 'price_range', 'activity_type'.\n\n    Returns:\n        List[str]: A list of recommendations for restaurants or entertainment.\n    \"\"\"",
    "snippet": "def provide_recommendations(\n    location: str,\n    preferences: Dict[str, str]\n) -> List[str]:\n    \"\"\"\n    Provides recommendations for restaurants or entertainment based on the location and preferences.\n\n    Parameters:\n        location (str): The location for which recommendations are needed.\n        preferences (Dict[str, str]): A dictionary containing user preferences.\n                                      Possible keys: 'cuisine', 'price_range', 'activity_type'.\n\n    Returns:\n        List[str]: A list of recommendations for restaurants or entertainment.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide recommendations for restaurants or entertainment."
    }
}
{
    "function_id": "personal_assistant-21",
    "task": "Manage and set alarms or timers.",
    "completion-content": "def manage_alarms_timers():\n    \"\"\"\n    Manage and set alarms or timers.\n    \"\"\"",
    "snippet": "def manage_alarms_timers():\n    \"\"\"\n    Manage and set alarms or timers.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Manage and set alarms or timers."
    }
}
{
    "function_id": "personal_assistant-22",
    "task": "Track physical exercise and provide workout suggestions.",
    "completion-content": "def track_exercise(\n    exercise_type: str,\n    duration: int,\n    intensity: str,\n    user_id: int,\n) -> str:\n    \"\"\"\n    Tracks physical exercise and provides workout suggestions.\n\n    Parameters:\n        exercise_type (str): The type of exercise performed.\n        duration (int): The duration of the exercise in minutes.\n        intensity (str): The intensity level of the exercise.\n        user_id (int): The ID of the user performing the exercise.\n\n    Returns:\n        str: A string with workout suggestions based on the exercise type, duration, intensity, and user ID.\n    \"\"\"",
    "snippet": "def track_exercise(\n    exercise_type: str,\n    duration: int,\n    intensity: str,\n    user_id: int,\n) -> str:\n    \"\"\"\n    Tracks physical exercise and provides workout suggestions.\n\n    Parameters:\n        exercise_type (str): The type of exercise performed.\n        duration (int): The duration of the exercise in minutes.\n        intensity (str): The intensity level of the exercise.\n        user_id (int): The ID of the user performing the exercise.\n\n    Returns:\n        str: A string with workout suggestions based on the exercise type, duration, intensity, and user ID.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Track physical exercise and provide workout suggestions."
    }
}
{
    "function_id": "personal_assistant-23",
    "task": "Monitor health metrics like heart rate or sleep quality.",
    "completion-content": "def monitor_health_metrics(\n    user_id: str,\n    metric_type: str,\n    start_date: str,\n    end_date: str,\n) -> List[Dict[str, Union[str, int, float]]]:\n    \"\"\"\n    Retrieves health metrics data for a given user and metric type within a specified date range.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        metric_type (str): The type of health metric to monitor (e.g., 'heart rate', 'sleep quality').\n        start_date (str): The start date of the monitoring period in YYYY-MM-DD format.\n        end_date (str): The end date of the monitoring period in YYYY-MM-DD format.\n\n    Returns:\n        List[Dict[str, Union[str, int, float]]]: A list of dictionaries containing the health metrics data.\n                                                Each dictionary should have 'timestamp', 'user_id', 'metric_type',\n                                                and the specific metric value as keys.\n    \"\"\"",
    "snippet": "def monitor_health_metrics(\n    user_id: str,\n    metric_type: str,\n    start_date: str,\n    end_date: str,\n) -> List[Dict[str, Union[str, int, float]]]:\n    \"\"\"\n    Retrieves health metrics data for a given user and metric type within a specified date range.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        metric_type (str): The type of health metric to monitor (e.g., 'heart rate', 'sleep quality').\n        start_date (str): The start date of the monitoring period in YYYY-MM-DD format.\n        end_date (str): The end date of the monitoring period in YYYY-MM-DD format.\n\n    Returns:\n        List[Dict[str, Union[str, int, float]]]: A list of dictionaries containing the health metrics data.\n                                                Each dictionary should have 'timestamp', 'user_id', 'metric_type',\n                                                and the specific metric value as keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Monitor health metrics like heart rate or sleep quality."
    }
}
{
    "function_id": "personal_assistant-24",
    "task": "Answer trivia questions or play interactive games.",
    "completion-content": "def trivia_game() -> str:\n    \"\"\"\n    Answer trivia questions or play interactive games.\n\n    Returns:\n        str: A message indicating the trivia question or game being played.\n    \"\"\"\n    # Trivia question or game implementation goes here.",
    "snippet": "def trivia_game() -> str:\n    \"\"\"\n    Answer trivia questions or play interactive games.\n\n    Returns:\n        str: A message indicating the trivia question or game being played.\n    \"\"\"\n    # Trivia question or game implementation goes here.",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Answer trivia questions or play interactive games."
    }
}
{
    "function_id": "personal_assistant-25",
    "task": "Provide cooking recipes or instructions.",
    "completion-content": "def provide_cooking_recipes_or_instructions() -> List[str]:\n    \"\"\"\n    Provides cooking recipes or instructions.\n\n    Returns:\n        List[str]: A list of strings containing cooking recipes or instructions.\n    \"\"\"\n    pass",
    "snippet": "def provide_cooking_recipes_or_instructions() -> List[str]:\n    \"\"\"\n    Provides cooking recipes or instructions.\n\n    Returns:\n        List[str]: A list of strings containing cooking recipes or instructions.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Provide cooking recipes or instructions."
    }
}

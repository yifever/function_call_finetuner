{
    "function_id": "twitter-1",
    "task": "Post a tweet to a user's timeline.",
    "completion-content": "def post_tweet(user_id: str, tweet: str) -> bool:\n    \"\"\"\n    Posts a tweet to a user's timeline.\n\n    Parameters:\n        user_id (str): The user's ID.\n        tweet (str): The content of the tweet.\n\n    Returns:\n        bool: True if the tweet was successfully posted, False otherwise.\n    \"\"\"",
    "snippet": "def post_tweet(user_id: str, tweet: str) -> bool:\n    \"\"\"\n    Posts a tweet to a user's timeline.\n\n    Parameters:\n        user_id (str): The user's ID.\n        tweet (str): The content of the tweet.\n\n    Returns:\n        bool: True if the tweet was successfully posted, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Post a tweet to a user's timeline."
    }
}
{
    "function_id": "twitter-2",
    "task": "Delete a specific tweet from a user's timeline.",
    "completion-content": "def delete_tweet(user_id: str, tweet_id: str) -> None:\n    \"\"\"\n    Deletes a specific tweet from a user's timeline.\n\n    Parameters:\n        user_id (str): The ID of the user whose tweet to delete.\n        tweet_id (str): The ID of the tweet to delete.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def delete_tweet(user_id: str, tweet_id: str) -> None:\n    \"\"\"\n    Deletes a specific tweet from a user's timeline.\n\n    Parameters:\n        user_id (str): The ID of the user whose tweet to delete.\n        tweet_id (str): The ID of the tweet to delete.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a specific tweet from a user's timeline."
    }
}
{
    "function_id": "twitter-3",
    "task": "Retrieve a user's timeline, including tweets, retweets, and replies.",
    "completion-content": "def retrieve_user_timeline(user_id: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a user's timeline, including tweets, retweets, and replies.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries representing each tweet\n                              in the user's timeline. Each dictionary should have\n                              'tweet_id', 'text', 'author', and 'date' keys.\n    \"\"\"",
    "snippet": "def retrieve_user_timeline(user_id: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a user's timeline, including tweets, retweets, and replies.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries representing each tweet\n                              in the user's timeline. Each dictionary should have\n                              'tweet_id', 'text', 'author', and 'date' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a user's timeline, including tweets, retweets, and replies."
    }
}
{
    "function_id": "twitter-4",
    "task": "Retrieve information about a specific user based on their username.",
    "completion-content": "def retrieve_user_info(username: str) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve information about a specific user based on their username.\n\n    Parameters:\n        username (str): The username of the user.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing information about the user.\n    \"\"\"",
    "snippet": "def retrieve_user_info(username: str) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve information about a specific user based on their username.\n\n    Parameters:\n        username (str): The username of the user.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing information about the user.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve information about a specific user based on their username."
    }
}
{
    "function_id": "twitter-5",
    "task": "Follow a specific user.",
    "completion-content": "def follow_user(username: str) -> bool:\n    \"\"\"\n    Follows a specific user.\n\n    Parameters:\n        username (str): The username of the user to follow.\n\n    Returns:\n        bool: True if the user was successfully followed, False otherwise.\n    \"\"\"",
    "snippet": "def follow_user(username: str) -> bool:\n    \"\"\"\n    Follows a specific user.\n\n    Parameters:\n        username (str): The username of the user to follow.\n\n    Returns:\n        bool: True if the user was successfully followed, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Follow a specific user."
    }
}
{
    "function_id": "twitter-6",
    "task": "Unfollow a specific user.",
    "completion-content": "def unfollow_user(username: str) -> None:\n    \"\"\"\n    Unfollows a specific user.\n\n    Parameters:\n        username (str): The username of the user to unfollow.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def unfollow_user(username: str) -> None:\n    \"\"\"\n    Unfollows a specific user.\n\n    Parameters:\n        username (str): The username of the user to unfollow.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unfollow a specific user."
    }
}
{
    "function_id": "twitter-7",
    "task": "Like a specific tweet.",
    "completion-content": "def like_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Likes a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to like.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def like_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Likes a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to like.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Like a specific tweet."
    }
}
{
    "function_id": "twitter-8",
    "task": "Unlike a specific tweet.",
    "completion-content": "def unlike_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Unlike a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to unlike.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def unlike_tweet(tweet_id: str) -> None:\n    \"\"\"\n    Unlike a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to unlike.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unlike a specific tweet."
    }
}
{
    "function_id": "twitter-9",
    "task": "Retweet a specific tweet.",
    "completion-content": "def retweet_tweet(\n    tweet_id: str,\n) -> bool:\n    \"\"\"\n    Retweets a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to retweet.\n\n    Returns:\n        bool: True if the tweet was successfully retweeted, False otherwise.\n    \"\"\"",
    "snippet": "def retweet_tweet(\n    tweet_id: str,\n) -> bool:\n    \"\"\"\n    Retweets a specific tweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to retweet.\n\n    Returns:\n        bool: True if the tweet was successfully retweeted, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retweet a specific tweet."
    }
}
{
    "function_id": "twitter-10",
    "task": "Undo a retweet.",
    "completion-content": "def undo_retweet(tweet_id: str) -> None:\n    \"\"\"\n    Undo a retweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to undo the retweet.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def undo_retweet(tweet_id: str) -> None:\n    \"\"\"\n    Undo a retweet.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to undo the retweet.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Undo a retweet."
    }
}
{
    "function_id": "twitter-11",
    "task": "Send a direct message to a specific user.",
    "completion-content": "def send_direct_message(\n    recipient: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends a direct message to a specific user.\n\n    Parameters:\n        recipient (str): The username or ID of the recipient.\n        message (str): The content of the message.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def send_direct_message(\n    recipient: str,\n    message: str,\n) -> None:\n    \"\"\"\n    Sends a direct message to a specific user.\n\n    Parameters:\n        recipient (str): The username or ID of the recipient.\n        message (str): The content of the message.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a direct message to a specific user."
    }
}
{
    "function_id": "twitter-12",
    "task": "Delete a sent direct message.",
    "completion-content": "def delete_direct_message(\n    message_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a sent direct message.\n\n    Parameters:\n        message_id (str): The ID of the direct message to delete.\n\n    Returns:\n        bool: True if the direct message was successfully deleted, False otherwise.\n    \"\"\"",
    "snippet": "def delete_direct_message(\n    message_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a sent direct message.\n\n    Parameters:\n        message_id (str): The ID of the direct message to delete.\n\n    Returns:\n        bool: True if the direct message was successfully deleted, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a sent direct message."
    }
}
{
    "function_id": "twitter-13",
    "task": "Retrieve a list of direct messages sent and received.",
    "completion-content": "def retrieve_direct_messages(\n    user_id: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a list of direct messages sent and received by a user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing direct message details.\n                              Each dictionary should have 'sender' and 'message' keys.\n    \"\"\"",
    "snippet": "def retrieve_direct_messages(\n    user_id: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Retrieves a list of direct messages sent and received by a user.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing direct message details.\n                              Each dictionary should have 'sender' and 'message' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a list of direct messages sent and received."
    }
}
{
    "function_id": "twitter-14",
    "task": "Retrieve trending topics for a specific location.",
    "completion-content": "def retrieve_trending_topics(location: str) -> List[str]:\n    \"\"\"\n    Retrieves trending topics for a specific location.\n\n    Parameters:\n        location (str): The specific location to retrieve trending topics for.\n\n    Returns:\n        List[str]: A list of trending topics for the specified location.\n    \"\"\"",
    "snippet": "def retrieve_trending_topics(location: str) -> List[str]:\n    \"\"\"\n    Retrieves trending topics for a specific location.\n\n    Parameters:\n        location (str): The specific location to retrieve trending topics for.\n\n    Returns:\n        List[str]: A list of trending topics for the specified location.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve trending topics for a specific location."
    }
}
{
    "function_id": "twitter-15",
    "task": "Retrieve a list of followers for a specific user.",
    "completion-content": "def get_followers(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of followers for a specific user.\n\n    Parameters:\n        user_id (int): The ID of the user.\n\n    Returns:\n        List[str]: A list of usernames of the followers.\n    \"\"\"",
    "snippet": "def get_followers(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of followers for a specific user.\n\n    Parameters:\n        user_id (int): The ID of the user.\n\n    Returns:\n        List[str]: A list of usernames of the followers.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a list of followers for a specific user."
    }
}
{
    "function_id": "twitter-16",
    "task": "Retrieve a list of accounts a specific user is following.",
    "completion-content": "def get_following_accounts(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of accounts that a specific user is following.\n\n    Parameters:\n        user_id (int): The ID of the user whose following accounts are to be retrieved.\n\n    Returns:\n        List[str]: A list of account names that the user is following.\n    \"\"\"\n    pass",
    "snippet": "def get_following_accounts(user_id: int) -> List[str]:\n    \"\"\"\n    Retrieves a list of accounts that a specific user is following.\n\n    Parameters:\n        user_id (int): The ID of the user whose following accounts are to be retrieved.\n\n    Returns:\n        List[str]: A list of account names that the user is following.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a list of accounts a specific user is following."
    }
}
{
    "function_id": "twitter-17",
    "task": "Search for tweets containing specific keywords, hashtags, or mentioning specific users.",
    "completion-content": "def search_tweets(\n    keywords: List[str],\n    hashtags: List[str],\n    users: List[str],\n) -> List[str]:\n    \"\"\"\n    Searches for tweets containing specific keywords, hashtags, or mentioning specific users.\n\n    Parameters:\n        keywords (List[str]): A list of keywords to search for in tweets.\n        hashtags (List[str]): A list of hashtags to search for in tweets.\n        users (List[str]): A list of usernames to search for in tweets.\n\n    Returns:\n        List[str]: A list of tweets matching the specified criteria.\n    \"\"\"",
    "snippet": "def search_tweets(\n    keywords: List[str],\n    hashtags: List[str],\n    users: List[str],\n) -> List[str]:\n    \"\"\"\n    Searches for tweets containing specific keywords, hashtags, or mentioning specific users.\n\n    Parameters:\n        keywords (List[str]): A list of keywords to search for in tweets.\n        hashtags (List[str]): A list of hashtags to search for in tweets.\n        users (List[str]): A list of usernames to search for in tweets.\n\n    Returns:\n        List[str]: A list of tweets matching the specified criteria.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Search for tweets containing specific keywords, hashtags, or mentioning specific users."
    }
}
{
    "function_id": "twitter-18",
    "task": "Update the profile details such as description, location, and profile image.",
    "completion-content": "def update_profile_details(\n    description: str,\n    location: str,\n    profile_image: str,\n) -> None:\n    \"\"\"\n    Updates the profile details such as description, location, and profile image.\n\n    Parameters:\n        description (str): The new description for the profile.\n        location (str): The new location for the profile.\n        profile_image (str): The new profile image for the profile.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def update_profile_details(\n    description: str,\n    location: str,\n    profile_image: str,\n) -> None:\n    \"\"\"\n    Updates the profile details such as description, location, and profile image.\n\n    Parameters:\n        description (str): The new description for the profile.\n        location (str): The new location for the profile.\n        profile_image (str): The new profile image for the profile.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update the profile details such as description, location, and profile image."
    }
}
{
    "function_id": "twitter-19",
    "task": "Retrieve user engagement metrics like likes, retweets, and impressions for specific tweets.",
    "completion-content": "def retrieve_user_engagement_metrics(\n    tweet_ids: List[str]\n) -> Dict[str, Dict[str, int]]:\n    \"\"\"\n    Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\n\n    Parameters:\n        tweet_ids (List[str]): A list of tweet IDs for which to retrieve metrics.\n\n    Returns:\n        Dict[str, Dict[str, int]]: A dictionary with tweet IDs as keys and a dictionary of engagement metrics as values.\n                                   The engagement metrics dictionary should have 'likes', 'retweets', and 'impressions' as keys.\n    \"\"\"",
    "snippet": "def retrieve_user_engagement_metrics(\n    tweet_ids: List[str]\n) -> Dict[str, Dict[str, int]]:\n    \"\"\"\n    Retrieves user engagement metrics like likes, retweets, and impressions for specific tweets.\n\n    Parameters:\n        tweet_ids (List[str]): A list of tweet IDs for which to retrieve metrics.\n\n    Returns:\n        Dict[str, Dict[str, int]]: A dictionary with tweet IDs as keys and a dictionary of engagement metrics as values.\n                                   The engagement metrics dictionary should have 'likes', 'retweets', and 'impressions' as keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve user engagement metrics like likes, retweets, and impressions for specific tweets."
    }
}
{
    "function_id": "twitter-20",
    "task": "Pin a tweet to the top of a user's timeline.",
    "completion-content": "def pin_tweet(tweet_id: str) -> bool:\n    \"\"\"\n    Pins a tweet to the top of a user's timeline.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to be pinned.\n\n    Returns:\n        bool: Returns True if the tweet was successfully pinned, False otherwise.\n    \"\"\"",
    "snippet": "def pin_tweet(tweet_id: str) -> bool:\n    \"\"\"\n    Pins a tweet to the top of a user's timeline.\n\n    Parameters:\n        tweet_id (str): The ID of the tweet to be pinned.\n\n    Returns:\n        bool: Returns True if the tweet was successfully pinned, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Pin a tweet to the top of a user's timeline."
    }
}
{
    "function_id": "twitter-21",
    "task": "Unpin a tweet from the top of a user's timeline.",
    "completion-content": "def unpin_tweet():\n    \"\"\"\n    Unpins a tweet from the top of a user's timeline.\n    \"\"\"",
    "snippet": "def unpin_tweet():\n    \"\"\"\n    Unpins a tweet from the top of a user's timeline.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unpin a tweet from the top of a user's timeline."
    }
}
{
    "function_id": "twitter-22",
    "task": "Retrieve lists that a user is a member of.",
    "completion-content": "def get_member_lists(user_id: str) -> List[str]:\n    \"\"\"\n    Retrieves the lists that a user is a member of.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[str]: A list of the names of the lists that the user is a member of.\n    \"\"\"\n    # Implementation goes here",
    "snippet": "def get_member_lists(user_id: str) -> List[str]:\n    \"\"\"\n    Retrieves the lists that a user is a member of.\n\n    Parameters:\n        user_id (str): The ID of the user.\n\n    Returns:\n        List[str]: A list of the names of the lists that the user is a member of.\n    \"\"\"\n    # Implementation goes here",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve lists that a user is a member of."
    }
}
{
    "function_id": "twitter-23",
    "task": "Create a new list.",
    "completion-content": "def create_new_list() -> List:\n    \"\"\"\n    Creates a new empty list.\n\n    Returns:\n        List: An empty list.\n    \"\"\"\n    return []",
    "snippet": "def create_new_list() -> List:\n    \"\"\"\n    Creates a new empty list.\n\n    Returns:\n        List: An empty list.\n    \"\"\"\n    return []",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Create a new list."
    }
}
{
    "function_id": "twitter-24",
    "task": "Add users to an existing list.",
    "completion-content": "def add_users_to_list(users: List[str], new_users: List[str]) -> List[str]:\n    \"\"\"\n    Adds new users to an existing list of users.\n\n    Parameters:\n        users (List[str]): The existing list of users.\n        new_users (List[str]): The list of new users to add.\n\n    Returns:\n        List[str]: The updated list of users.\n    \"\"\"",
    "snippet": "def add_users_to_list(users: List[str], new_users: List[str]) -> List[str]:\n    \"\"\"\n    Adds new users to an existing list of users.\n\n    Parameters:\n        users (List[str]): The existing list of users.\n        new_users (List[str]): The list of new users to add.\n\n    Returns:\n        List[str]: The updated list of users.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Add users to an existing list."
    }
}
{
    "function_id": "twitter-25",
    "task": "Remove users from an existing list.",
    "completion-content": "def remove_users(existing_list: List[str], users_to_remove: List[str]) -> List[str]:\n    \"\"\"\n    Removes users from an existing list.\n\n    Parameters:\n        existing_list (List[str]): The original list of users.\n        users_to_remove (List[str]): The list of users to remove.\n\n    Returns:\n        List[str]: The updated list with the specified users removed.\n    \"\"\"",
    "snippet": "def remove_users(existing_list: List[str], users_to_remove: List[str]) -> List[str]:\n    \"\"\"\n    Removes users from an existing list.\n\n    Parameters:\n        existing_list (List[str]): The original list of users.\n        users_to_remove (List[str]): The list of users to remove.\n\n    Returns:\n        List[str]: The updated list with the specified users removed.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove users from an existing list."
    }
}
{
    "function_id": "twitter-26",
    "task": "Delete an existing list.",
    "completion-content": "def delete_list(existing_list: List) -> None:\n    \"\"\"\n    Deletes an existing list.\n\n    Parameters:\n        existing_list (List): The list to be deleted.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def delete_list(existing_list: List) -> None:\n    \"\"\"\n    Deletes an existing list.\n\n    Parameters:\n        existing_list (List): The list to be deleted.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete an existing list."
    }
}
{
    "function_id": "twitter-27",
    "task": "Check if a user is following another user.",
    "completion-content": "def check_follow(user: str, followed_user: str) -> bool:\n    \"\"\"\n    Checks if a user is following another user.\n\n    Parameters:\n        user (str): The username of the user.\n        followed_user (str): The username of the user being followed.\n\n    Returns:\n        bool: True if the user is following the followed_user, False otherwise.\n    \"\"\"\n    # Implementation code to check if user is following followed_user\n    return result",
    "snippet": "def check_follow(user: str, followed_user: str) -> bool:\n    \"\"\"\n    Checks if a user is following another user.\n\n    Parameters:\n        user (str): The username of the user.\n        followed_user (str): The username of the user being followed.\n\n    Returns:\n        bool: True if the user is following the followed_user, False otherwise.\n    \"\"\"\n    # Implementation code to check if user is following followed_user\n    return result",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Check if a user is following another user."
    }
}
{
    "function_id": "twitter-28",
    "task": "Block a specific user.",
    "completion-content": "def block_user(username: str) -> None:\n    \"\"\"\n    Blocks a specific user.\n\n    Parameters:\n        username (str): The username of the user to be blocked.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def block_user(username: str) -> None:\n    \"\"\"\n    Blocks a specific user.\n\n    Parameters:\n        username (str): The username of the user to be blocked.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Block a specific user."
    }
}
{
    "function_id": "twitter-29",
    "task": "Unblock a specific user.",
    "completion-content": "def unblock_user(user_id: str) -> None:\n    \"\"\"\n    Unblock a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user to unblock.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def unblock_user(user_id: str) -> None:\n    \"\"\"\n    Unblock a specific user.\n\n    Parameters:\n        user_id (str): The ID of the user to unblock.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Unblock a specific user."
    }
}

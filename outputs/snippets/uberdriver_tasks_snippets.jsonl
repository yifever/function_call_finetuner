{
    "function_id": "uber-driver-1",
    "task": "Accept a new ride request.",
    "completion-content": "def accept_ride_request(\n    ride_id: int,\n    passenger_name: str,\n    pickup_location: str,\n    dropoff_location: str,\n    pickup_time: str,\n    fare: float,\n) -> None:\n    \"\"\"\n    Accepts a new ride request.\n\n    Parameters:\n        ride_id (int): The ID of the ride request.\n        passenger_name (str): The name of the passenger.\n        pickup_location (str): The pickup location.\n        dropoff_location (str): The dropoff location.\n        pickup_time (str): The pickup time in HH:MM format.\n        fare (float): The fare for the ride.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def accept_ride_request(\n    ride_id: int,\n    passenger_name: str,\n    pickup_location: str,\n    dropoff_location: str,\n    pickup_time: str,\n    fare: float,\n) -> None:\n    \"\"\"\n    Accepts a new ride request.\n\n    Parameters:\n        ride_id (int): The ID of the ride request.\n        passenger_name (str): The name of the passenger.\n        pickup_location (str): The pickup location.\n        dropoff_location (str): The dropoff location.\n        pickup_time (str): The pickup time in HH:MM format.\n        fare (float): The fare for the ride.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Accept a new ride request."
    }
}
{
    "function_id": "uber-driver-2",
    "task": "Decline a new ride request.",
    "completion-content": "def decline_ride_request(\n    ride_id: str\n) -> None:\n    \"\"\"\n    Declines a new ride request.\n\n    Parameters:\n        ride_id (str): The ID of the ride to decline.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def decline_ride_request(\n    ride_id: str\n) -> None:\n    \"\"\"\n    Declines a new ride request.\n\n    Parameters:\n        ride_id (str): The ID of the ride to decline.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Decline a new ride request."
    }
}
{
    "function_id": "uber-driver-3",
    "task": "Start navigation to the pickup location.",
    "completion-content": "def start_navigation_to_pickup_location():\n    \"\"\"\n    Starts navigation to the pickup location.\n    \"\"\"\n    return",
    "snippet": "def start_navigation_to_pickup_location():\n    \"\"\"\n    Starts navigation to the pickup location.\n    \"\"\"\n    return",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Start navigation to the pickup location."
    }
}
{
    "function_id": "uber-driver-4",
    "task": "Notify passenger upon arrival at the pickup location.",
    "completion-content": "def notify_passenger_upon_arrival(pickup_location: str, passenger_name: str) -> None:\n    \"\"\"\n    Notifies a passenger upon arrival at the pickup location.\n\n    Parameters:\n        pickup_location (str): The pickup location.\n        passenger_name (str): The name of the passenger.\n\n    Returns:\n        None\n    \"\"\"\n    # implementation code here",
    "snippet": "def notify_passenger_upon_arrival(pickup_location: str, passenger_name: str) -> None:\n    \"\"\"\n    Notifies a passenger upon arrival at the pickup location.\n\n    Parameters:\n        pickup_location (str): The pickup location.\n        passenger_name (str): The name of the passenger.\n\n    Returns:\n        None\n    \"\"\"\n    # implementation code here",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Notify passenger upon arrival at the pickup location."
    }
}
{
    "function_id": "uber-driver-5",
    "task": "Start the ride after picking up the passenger.",
    "completion-content": "def start_ride():\n    \"\"\"\n    Starts the ride after picking up the passenger.\n    \"\"\"",
    "snippet": "def start_ride():\n    \"\"\"\n    Starts the ride after picking up the passenger.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Start the ride after picking up the passenger."
    }
}
{
    "function_id": "uber-driver-6",
    "task": "End the ride upon arrival at the destination.",
    "completion-content": "def end_ride(destination: str) -> None:\n    \"\"\"\n    Ends the ride upon arrival at the destination.\n\n    Parameters:\n        destination (str): The destination city.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def end_ride(destination: str) -> None:\n    \"\"\"\n    Ends the ride upon arrival at the destination.\n\n    Parameters:\n        destination (str): The destination city.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "End the ride upon arrival at the destination."
    }
}
{
    "function_id": "uber-driver-7",
    "task": "Rate the passenger.",
    "completion-content": "def rate_passenger(\n    passenger: Dict[str, str]\n) -> float:\n    \"\"\"\n    Rates the passenger based on certain criteria.\n\n    Parameters:\n        passenger (Dict[str, str]): A dictionary containing passenger details.\n                                    The dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        float: The rating of the passenger.\n    \"\"\"\n    pass",
    "snippet": "def rate_passenger(\n    passenger: Dict[str, str]\n) -> float:\n    \"\"\"\n    Rates the passenger based on certain criteria.\n\n    Parameters:\n        passenger (Dict[str, str]): A dictionary containing passenger details.\n                                    The dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        float: The rating of the passenger.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Rate the passenger."
    }
}
{
    "function_id": "uber-driver-8",
    "task": "Retrieve estimated earnings for the day or week.",
    "completion-content": "def retrieve_estimated_earnings(day_or_week: str) -> float:\n    \"\"\"\n    Retrieves estimated earnings for the day or week.\n\n    Parameters:\n        day_or_week (str): The time period to retrieve earnings for. Can be 'day' or 'week'.\n\n    Returns:\n        float: The estimated earnings for the specified time period.\n    \"\"\"",
    "snippet": "def retrieve_estimated_earnings(day_or_week: str) -> float:\n    \"\"\"\n    Retrieves estimated earnings for the day or week.\n\n    Parameters:\n        day_or_week (str): The time period to retrieve earnings for. Can be 'day' or 'week'.\n\n    Returns:\n        float: The estimated earnings for the specified time period.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve estimated earnings for the day or week."
    }
}
{
    "function_id": "uber-driver-9",
    "task": "View the ride history for the day.",
    "completion-content": "def view_ride_history(day: str) -> List[Dict[str, str]]:\n    \"\"\"\n    View the ride history for the specified day.\n\n    Parameters:\n        day (str): The day for which to view the ride history in YYYY-MM-DD format.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing ride details.\n                              Each dictionary should have 'ride_id', 'start_time', 'end_time',\n                              'distance', and 'fare' keys.\n    \"\"\"",
    "snippet": "def view_ride_history(day: str) -> List[Dict[str, str]]:\n    \"\"\"\n    View the ride history for the specified day.\n\n    Parameters:\n        day (str): The day for which to view the ride history in YYYY-MM-DD format.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing ride details.\n                              Each dictionary should have 'ride_id', 'start_time', 'end_time',\n                              'distance', and 'fare' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "View the ride history for the day."
    }
}
{
    "function_id": "uber-driver-10",
    "task": "Send a message or call the passenger through the app.",
    "completion-content": "def send_message_or_call_passenger(passenger_id: int, message: str) -> None:\n    \"\"\"\n    Sends a message or call the passenger through the app.\n\n    Parameters:\n        passenger_id (int): The ID of the passenger to contact.\n        message (str): The message to send or the call to make.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def send_message_or_call_passenger(passenger_id: int, message: str) -> None:\n    \"\"\"\n    Sends a message or call the passenger through the app.\n\n    Parameters:\n        passenger_id (int): The ID of the passenger to contact.\n        message (str): The message to send or the call to make.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Send a message or call the passenger through the app."
    }
}
{
    "function_id": "uber-driver-11",
    "task": "Update driver profile details, such as photo or vehicle information.",
    "completion-content": "def update_driver_profile(\n    photo: str,\n    vehicle_info: Dict[str, str]\n) -> None:\n    \"\"\"\n    Update driver profile details, such as photo or vehicle information.\n\n    Parameters:\n        photo (str): The path or URL to the new driver photo.\n        vehicle_info (Dict[str, str]): A dictionary containing the updated vehicle information.\n                                        The dictionary should have 'make', 'model', and 'year' keys.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def update_driver_profile(\n    photo: str,\n    vehicle_info: Dict[str, str]\n) -> None:\n    \"\"\"\n    Update driver profile details, such as photo or vehicle information.\n\n    Parameters:\n        photo (str): The path or URL to the new driver photo.\n        vehicle_info (Dict[str, str]): A dictionary containing the updated vehicle information.\n                                        The dictionary should have 'make', 'model', and 'year' keys.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Update driver profile details, such as photo or vehicle information."
    }
}
{
    "function_id": "uber-driver-12",
    "task": "Switch to or from 'Delivery Mode' for Uber Eats.",
    "completion-content": "def switch_delivery_mode(restaurant_id: str, mode: str) -> bool:\n    \"\"\"\n    Switches the delivery mode for Uber Eats.\n\n    Parameters:\n        restaurant_id (str): The ID of the restaurant.\n        mode (str): The mode to switch to or from. Can be 'delivery' or 'pickup'.\n\n    Returns:\n        bool: True if the mode was successfully switched, False otherwise.\n    \"\"\"",
    "snippet": "def switch_delivery_mode(restaurant_id: str, mode: str) -> bool:\n    \"\"\"\n    Switches the delivery mode for Uber Eats.\n\n    Parameters:\n        restaurant_id (str): The ID of the restaurant.\n        mode (str): The mode to switch to or from. Can be 'delivery' or 'pickup'.\n\n    Returns:\n        bool: True if the mode was successfully switched, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Switch to or from 'Delivery Mode' for Uber Eats."
    }
}
{
    "function_id": "uber-driver-13",
    "task": "Withdraw earnings to a linked bank account.",
    "completion-content": "def withdraw_earnings(\n    amount: float,\n    bank_account: str,\n) -> bool:\n    \"\"\"\n    Withdraws earnings to a linked bank account.\n\n    Parameters:\n        amount (float): The amount of earnings to withdraw.\n        bank_account (str): The linked bank account to withdraw to.\n\n    Returns:\n        bool: True if the withdrawal is successful, False otherwise.\n    \"\"\"",
    "snippet": "def withdraw_earnings(\n    amount: float,\n    bank_account: str,\n) -> bool:\n    \"\"\"\n    Withdraws earnings to a linked bank account.\n\n    Parameters:\n        amount (float): The amount of earnings to withdraw.\n        bank_account (str): The linked bank account to withdraw to.\n\n    Returns:\n        bool: True if the withdrawal is successful, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Withdraw earnings to a linked bank account."
    }
}
{
    "function_id": "uber-driver-14",
    "task": "Review and dispute fare adjustments.",
    "completion-content": "def review_and_dispute_fare_adjustments(\n    fare_adjustments: List[Dict[str, Union[str, float]]]\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Reviews and disputes fare adjustments.\n\n    Parameters:\n        fare_adjustments (List[Dict[str, Union[str, float]]]): A list of dictionaries containing fare adjustment details.\n                                                              Each dictionary should have 'ticket_number', 'adjustment_reason',\n                                                              and 'adjusted_amount' keys.\n\n    Returns:\n        Dict[str, Union[str, float]]: A dictionary with 'disputed_amount' as a key and the disputed amount as a value.\n    \"\"\"",
    "snippet": "def review_and_dispute_fare_adjustments(\n    fare_adjustments: List[Dict[str, Union[str, float]]]\n) -> Dict[str, Union[str, float]]:\n    \"\"\"\n    Reviews and disputes fare adjustments.\n\n    Parameters:\n        fare_adjustments (List[Dict[str, Union[str, float]]]): A list of dictionaries containing fare adjustment details.\n                                                              Each dictionary should have 'ticket_number', 'adjustment_reason',\n                                                              and 'adjusted_amount' keys.\n\n    Returns:\n        Dict[str, Union[str, float]]: A dictionary with 'disputed_amount' as a key and the disputed amount as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review and dispute fare adjustments."
    }
}
{
    "function_id": "uber-driver-15",
    "task": "Enable or disable notifications for new ride requests.",
    "completion-content": "def enable_disable_notifications(enable: bool) -> None:\n    \"\"\"\n    Enable or disable notifications for new ride requests.\n\n    Parameters:\n        enable (bool): True to enable notifications, False to disable notifications.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def enable_disable_notifications(enable: bool) -> None:\n    \"\"\"\n    Enable or disable notifications for new ride requests.\n\n    Parameters:\n        enable (bool): True to enable notifications, False to disable notifications.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Enable or disable notifications for new ride requests."
    }
}
{
    "function_id": "uber-driver-16",
    "task": "Report an issue or incident related to a ride.",
    "completion-content": "def report_issue_or_incident(\n    ride_id: str,\n    issue_description: str,\n    incident_date: str,\n    incident_location: str,\n    contact_info: str,\n) -> None:\n    \"\"\"\n    Reports an issue or incident related to a ride.\n\n    Parameters:\n        ride_id (str): The ID of the ride.\n        issue_description (str): A description of the issue or incident.\n        incident_date (str): The date of the incident in YYYY-MM-DD format.\n        incident_location (str): The location of the incident.\n        contact_info (str): Contact information of the person reporting the issue.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def report_issue_or_incident(\n    ride_id: str,\n    issue_description: str,\n    incident_date: str,\n    incident_location: str,\n    contact_info: str,\n) -> None:\n    \"\"\"\n    Reports an issue or incident related to a ride.\n\n    Parameters:\n        ride_id (str): The ID of the ride.\n        issue_description (str): A description of the issue or incident.\n        incident_date (str): The date of the incident in YYYY-MM-DD format.\n        incident_location (str): The location of the incident.\n        contact_info (str): Contact information of the person reporting the issue.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Report an issue or incident related to a ride."
    }
}
{
    "function_id": "uber-driver-17",
    "task": "Review driver ratings and feedback received.",
    "completion-content": "def review_driver_ratings_and_feedback() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Retrieves and returns the driver ratings and feedback received.\n\n    Returns:\n        Dict[str, List[Dict[str, Any]]]: A dictionary with 'ratings' as a key and a list of dictionaries as the value.\n                                         Each dictionary should have 'driver_name', 'rating', and 'feedback' keys.\n    \"\"\"",
    "snippet": "def review_driver_ratings_and_feedback() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Retrieves and returns the driver ratings and feedback received.\n\n    Returns:\n        Dict[str, List[Dict[str, Any]]]: A dictionary with 'ratings' as a key and a list of dictionaries as the value.\n                                         Each dictionary should have 'driver_name', 'rating', and 'feedback' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Review driver ratings and feedback received."
    }
}
{
    "function_id": "uber-driver-18",
    "task": "Check the status of a background check or document verification.",
    "completion-content": "def check_background_status(\n    applicant_id: str,\n    document_type: str,\n) -> str:\n    \"\"\"\n    Checks the status of a background check or document verification.\n\n    Parameters:\n        applicant_id (str): The ID of the applicant.\n        document_type (str): The type of document to be verified.\n\n    Returns:\n        str: The status of the background check or document verification.\n    \"\"\"",
    "snippet": "def check_background_status(\n    applicant_id: str,\n    document_type: str,\n) -> str:\n    \"\"\"\n    Checks the status of a background check or document verification.\n\n    Parameters:\n        applicant_id (str): The ID of the applicant.\n        document_type (str): The type of document to be verified.\n\n    Returns:\n        str: The status of the background check or document verification.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Check the status of a background check or document verification."
    }
}
{
    "function_id": "uber-driver-19",
    "task": "Schedule or modify a vehicle inspection appointment.",
    "completion-content": "def schedule_or_modify_vehicle_inspection(\n    vehicle_id: str,\n    appointment_date: str,\n    appointment_time: str,\n) -> str:\n    \"\"\"\n    Schedules or modifies a vehicle inspection appointment.\n\n    Parameters:\n        vehicle_id (str): The unique identifier of the vehicle.\n        appointment_date (str): The desired appointment date in YYYY-MM-DD format.\n        appointment_time (str): The desired appointment time in HH:MM format.\n\n    Returns:\n        str: A confirmation message indicating that the appointment has been scheduled or modified.\n    \"\"\"",
    "snippet": "def schedule_or_modify_vehicle_inspection(\n    vehicle_id: str,\n    appointment_date: str,\n    appointment_time: str,\n) -> str:\n    \"\"\"\n    Schedules or modifies a vehicle inspection appointment.\n\n    Parameters:\n        vehicle_id (str): The unique identifier of the vehicle.\n        appointment_date (str): The desired appointment date in YYYY-MM-DD format.\n        appointment_time (str): The desired appointment time in HH:MM format.\n\n    Returns:\n        str: A confirmation message indicating that the appointment has been scheduled or modified.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Schedule or modify a vehicle inspection appointment."
    }
}
{
    "function_id": "uber-driver-20",
    "task": "Enable or disable receiving ride requests in specific categories (e.g., UberXL, UberPool).",
    "completion-content": "def enable_disable_ride_requests(categories: List[str], enable: bool) -> None:\n    \"\"\"\n    Enable or disable receiving ride requests in specific categories.\n\n    Parameters:\n        categories (List[str]): A list of categories to enable or disable.\n        enable (bool): True to enable the categories, False to disable them.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "snippet": "def enable_disable_ride_requests(categories: List[str], enable: bool) -> None:\n    \"\"\"\n    Enable or disable receiving ride requests in specific categories.\n\n    Parameters:\n        categories (List[str]): A list of categories to enable or disable.\n        enable (bool): True to enable the categories, False to disable them.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Enable or disable receiving ride requests in specific categories (e.g., UberXL, UberPool)."
    }
}

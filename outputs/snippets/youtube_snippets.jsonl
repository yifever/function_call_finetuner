{
    "function_id": "youtube-1",
    "task": "Upload a video file as a video to a YouTube channel.",
    "completion-content": "def upload_video_to_youtube(\n    video_file_path: str,\n    title: str,\n    description: str,\n    category: str,\n    tags: List[str],\n) -> str:\n    \"\"\"\n    Uploads a video file as a video to a YouTube channel.\n\n    Parameters:\n        video_file_path (str): The path to the video file.\n        title (str): The title of the video.\n        description (str): The description of the video.\n        category (str): The category of the video.\n        tags (List[str]): A list of tags for the video.\n\n    Returns:\n        str: The ID of the uploaded video.\n    \"\"\"\n    pass",
    "snippet": "def upload_video_to_youtube(\n    video_file_path: str,\n    title: str,\n    description: str,\n    category: str,\n    tags: List[str],\n) -> str:\n    \"\"\"\n    Uploads a video file as a video to a YouTube channel.\n\n    Parameters:\n        video_file_path (str): The path to the video file.\n        title (str): The title of the video.\n        description (str): The description of the video.\n        category (str): The category of the video.\n        tags (List[str]): A list of tags for the video.\n\n    Returns:\n        str: The ID of the uploaded video.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Upload a video file as a video to a YouTube channel."
    }
}
{
    "function_id": "youtube-2",
    "task": "Delete a specific video from a channel.",
    "completion-content": "def delete_video_from_channel(\n    channel_id: str,\n    video_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a specific video from a channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel from which the video should be deleted.\n        video_id (str): The ID of the video to be deleted.\n\n    Returns:\n        bool: True if the video was successfully deleted, False otherwise.\n    \"\"\"",
    "snippet": "def delete_video_from_channel(\n    channel_id: str,\n    video_id: str,\n) -> bool:\n    \"\"\"\n    Deletes a specific video from a channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel from which the video should be deleted.\n        video_id (str): The ID of the video to be deleted.\n\n    Returns:\n        bool: True if the video was successfully deleted, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a specific video from a channel."
    }
}
{
    "function_id": "youtube-3",
    "task": "Edit video details such as title, description, and tags.",
    "completion-content": "def edit_video_details(\n    video_id: str,\n    new_title: str,\n    new_description: str,\n    new_tags: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Edits the details of a video and returns the new details.\n\n    Parameters:\n        video_id (str): The ID of the video to edit.\n        new_title (str): The new title of the video.\n        new_description (str): The new description of the video.\n        new_tags (List[str]): A list of new tags for the video.\n\n    Returns:\n        Dict[str, str]: A dictionary with the new video details.\n    \"\"\"\n    pass",
    "snippet": "def edit_video_details(\n    video_id: str,\n    new_title: str,\n    new_description: str,\n    new_tags: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Edits the details of a video and returns the new details.\n\n    Parameters:\n        video_id (str): The ID of the video to edit.\n        new_title (str): The new title of the video.\n        new_description (str): The new description of the video.\n        new_tags (List[str]): A list of new tags for the video.\n\n    Returns:\n        Dict[str, str]: A dictionary with the new video details.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Edit video details such as title, description, and tags."
    }
}
{
    "function_id": "youtube-4",
    "task": "Set a specific time for a video to be made public.",
    "completion-content": "def set_video_public_time(\n    video_id: str,\n    schedule_time: str,\n) -> bool:\n    \"\"\"\n    Sets a specific time for a video to be made public.\n\n    Parameters:\n        video_id (str): The unique identifier of the video.\n        schedule_time (str): The time to make the video public in YYYY-MM-DD HH:MM:SS format.\n\n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\"\n    pass",
    "snippet": "def set_video_public_time(\n    video_id: str,\n    schedule_time: str,\n) -> bool:\n    \"\"\"\n    Sets a specific time for a video to be made public.\n\n    Parameters:\n        video_id (str): The unique identifier of the video.\n        schedule_time (str): The time to make the video public in YYYY-MM-DD HH:MM:SS format.\n\n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set a specific time for a video to be made public."
    }
}
{
    "function_id": "youtube-5",
    "task": "Generate new playlists for categorizing videos.",
    "completion-content": "def generate_playlists(\n    video_data: List[Dict[str, str]],\n    categories: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate new playlists for categorizing videos.\n\n    Parameters:\n        video_data (List[Dict[str, str]]): A list of dictionaries containing video details.\n                                           Each dictionary should have 'title' and 'category' keys.\n        categories (List[str]): A list of categories for which playlists will be created.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with categories as keys and list of video titles as values.\n    \"\"\"",
    "snippet": "def generate_playlists(\n    video_data: List[Dict[str, str]],\n    categories: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generate new playlists for categorizing videos.\n\n    Parameters:\n        video_data (List[Dict[str, str]]): A list of dictionaries containing video details.\n                                           Each dictionary should have 'title' and 'category' keys.\n        categories (List[str]): A list of categories for which playlists will be created.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary with categories as keys and list of video titles as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate new playlists for categorizing videos."
    }
}
{
    "function_id": "youtube-6",
    "task": "Insert specific videos into an existing playlist.",
    "completion-content": "def insert_videos_into_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> str:\n    \"\"\"\n    Inserts specific videos into an existing playlist.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist to which videos need to be added.\n        video_ids (List[str]): A list of IDs of the videos to be added to the playlist.\n\n    Returns:\n        str: A confirmation message stating successful addition of videos to the playlist.\n    \"\"\"",
    "snippet": "def insert_videos_into_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> str:\n    \"\"\"\n    Inserts specific videos into an existing playlist.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist to which videos need to be added.\n        video_ids (List[str]): A list of IDs of the videos to be added to the playlist.\n\n    Returns:\n        str: A confirmation message stating successful addition of videos to the playlist.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Insert specific videos into an existing playlist."
    }
}
{
    "function_id": "youtube-7",
    "task": "Delete videos from a playlist.",
    "completion-content": "def delete_videos_from_playlist(\n    playlist_id: str,\n    video_ids: List[str]\n) -> Dict[str, str]:\n    \"\"\"\n    Deletes videos from a playlist and returns a status message.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist.\n        video_ids (List[str]): A list of video IDs to be deleted from the playlist.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
    "snippet": "def delete_videos_from_playlist(\n    playlist_id: str,\n    video_ids: List[str]\n) -> Dict[str, str]:\n    \"\"\"\n    Deletes videos from a playlist and returns a status message.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist.\n        video_ids (List[str]): A list of video IDs to be deleted from the playlist.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the status message as a value.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete videos from a playlist."
    }
}
{
    "function_id": "youtube-8",
    "task": "Modify the channel description, profile picture, and other details.",
    "completion-content": "def modify_channel_details(\n    channel_id: str,\n    new_description: str,\n    new_profile_picture: str,\n    other_details: Dict[str, str]\n) -> None:\n    \"\"\"\n    Modifies the channel description, profile picture, and other details.\n\n    Parameters:\n        channel_id (str): The ID of the channel to modify.\n        new_description (str): The new description for the channel.\n        new_profile_picture (str): The new profile picture for the channel. This should be a URL or file path.\n        other_details (Dict[str, str]): A dictionary of other details to modify. The keys should be the detail names,\n                                         and the values should be the new values for those details.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def modify_channel_details(\n    channel_id: str,\n    new_description: str,\n    new_profile_picture: str,\n    other_details: Dict[str, str]\n) -> None:\n    \"\"\"\n    Modifies the channel description, profile picture, and other details.\n\n    Parameters:\n        channel_id (str): The ID of the channel to modify.\n        new_description (str): The new description for the channel.\n        new_profile_picture (str): The new profile picture for the channel. This should be a URL or file path.\n        other_details (Dict[str, str]): A dictionary of other details to modify. The keys should be the detail names,\n                                         and the values should be the new values for those details.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Modify the channel description, profile picture, and other details."
    }
}
{
    "function_id": "youtube-9",
    "task": "Access analytics such as views, watch time, and subscriber count for specific videos.",
    "completion-content": "def get_video_analytics(\n    video_id: str\n) -> Dict[str, Union[int, str]]:\n    \"\"\"\n    Gets analytics such as views, watch time, and subscriber count for a specific video.\n\n    Parameters:\n        video_id (str): The ID of the video.\n\n    Returns:\n        Dict[str, Union[int, str]]: A dictionary with 'views', 'watch_time' and 'subscriber_count' as keys, \n                                     and the corresponding values as values.\n    \"\"\"\n    pass",
    "snippet": "def get_video_analytics(\n    video_id: str\n) -> Dict[str, Union[int, str]]:\n    \"\"\"\n    Gets analytics such as views, watch time, and subscriber count for a specific video.\n\n    Parameters:\n        video_id (str): The ID of the video.\n\n    Returns:\n        Dict[str, Union[int, str]]: A dictionary with 'views', 'watch_time' and 'subscriber_count' as keys, \n                                     and the corresponding values as values.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Access analytics such as views, watch time, and subscriber count for specific videos."
    }
}
{
    "function_id": "youtube-10",
    "task": "Acquire broader analytics for the entire channel.",
    "completion-content": "def get_channel_analytics(channel_id: str) -> Dict[str, Any]:\n    \"\"\"\n    Acquire broader analytics for the entire channel.\n\n    Parameters:\n        channel_id (str): The unique identifier for the channel.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing various analytics data for the channel.\n    \"\"\"\n    pass",
    "snippet": "def get_channel_analytics(channel_id: str) -> Dict[str, Any]:\n    \"\"\"\n    Acquire broader analytics for the entire channel.\n\n    Parameters:\n        channel_id (str): The unique identifier for the channel.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing various analytics data for the channel.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Acquire broader analytics for the entire channel."
    }
}
{
    "function_id": "youtube-11",
    "task": "Understand user engagement by capturing data on likes, dislikes, and comments.",
    "completion-content": "def capture_user_engagement(\n    user_id: str,\n    post_id: str,\n    likes: int,\n    dislikes: int,\n    comments: List[str],\n) -> Dict[str, Union[int, List[str]]]:\n    \"\"\"\n    Captures user engagement data such as likes, dislikes, and comments.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        post_id (str): The ID of the post.\n        likes (int): The number of likes the post has.\n        dislikes (int): The number of dislikes the post has.\n        comments (List[str]): A list of comments on the post.\n\n    Returns:\n        Dict[str, Union[int, List[str]]]: A dictionary containing 'likes', 'dislikes', and 'comments' as keys,\n                                          and corresponding data as values.\n    \"\"\"",
    "snippet": "def capture_user_engagement(\n    user_id: str,\n    post_id: str,\n    likes: int,\n    dislikes: int,\n    comments: List[str],\n) -> Dict[str, Union[int, List[str]]]:\n    \"\"\"\n    Captures user engagement data such as likes, dislikes, and comments.\n\n    Parameters:\n        user_id (str): The ID of the user.\n        post_id (str): The ID of the post.\n        likes (int): The number of likes the post has.\n        dislikes (int): The number of dislikes the post has.\n        comments (List[str]): A list of comments on the post.\n\n    Returns:\n        Dict[str, Union[int, List[str]]]: A dictionary containing 'likes', 'dislikes', and 'comments' as keys,\n                                          and corresponding data as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Understand user engagement by capturing data on likes, dislikes, and comments."
    }
}
{
    "function_id": "youtube-12",
    "task": "Automatically post preset comments or updates in the comment section of a video.",
    "completion-content": "def post_video_comments(\n    video_id: str,\n    comments: List[str],\n    delay: int = 0,\n) -> None:\n    \"\"\"\n    Automatically posts preset comments or updates in the comment section of a video.\n\n    Parameters:\n        video_id (str): The identifier for the video.\n        comments (List[str]): A list of comments to be posted.\n        delay (int, optional): The delay between posting each comment in seconds. Defaults to 0.\n\n    Returns:\n        None\n    \"\"\"\n",
    "snippet": "def post_video_comments(\n    video_id: str,\n    comments: List[str],\n    delay: int = 0,\n) -> None:\n    \"\"\"\n    Automatically posts preset comments or updates in the comment section of a video.\n\n    Parameters:\n        video_id (str): The identifier for the video.\n        comments (List[str]): A list of comments to be posted.\n        delay (int, optional): The delay between posting each comment in seconds. Defaults to 0.\n\n    Returns:\n        None\n    \"\"\"\n",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically post preset comments or updates in the comment section of a video."
    }
}
{
    "function_id": "youtube-13",
    "task": "Remove specific comments that violate community guidelines.",
    "completion-content": "def remove_violating_comments(\n    comments: List[str],\n    guidelines: Dict[str, str]\n) -> List[str]:\n    \"\"\"\n    Removes comments that violate community guidelines.\n\n    Parameters:\n        comments (List[str]): A list of comments to be checked.\n        guidelines (Dict[str, str]): A dictionary with keys as violation categories and values as phrases or words \n                                     that violate community guidelines in corresponding category.\n\n    Returns:\n        List[str]: A list of comments that do not violate any community guidelines.\n    \"\"\"",
    "snippet": "def remove_violating_comments(\n    comments: List[str],\n    guidelines: Dict[str, str]\n) -> List[str]:\n    \"\"\"\n    Removes comments that violate community guidelines.\n\n    Parameters:\n        comments (List[str]): A list of comments to be checked.\n        guidelines (Dict[str, str]): A dictionary with keys as violation categories and values as phrases or words \n                                     that violate community guidelines in corresponding category.\n\n    Returns:\n        List[str]: A list of comments that do not violate any community guidelines.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove specific comments that violate community guidelines."
    }
}
{
    "function_id": "youtube-14",
    "task": "Generate automated replies to user comments.",
    "completion-content": "def generate_auto_reply(\n    user_comments: List[str],\n    reply_templates: Dict[str, str],\n) -> List[str]:\n    \"\"\"\n    Generate automated replies to user comments based on predefined reply templates.\n\n    Parameters:\n        user_comments (List[str]): List of user comments.\n        reply_templates (Dict[str, str]): Dictionary of reply templates. The keys represent \n                                          different categories of comments and the values \n                                          are the corresponding reply templates.\n    Returns:\n        List[str]: A list of automated replies to the user comments.\n    \"\"\"",
    "snippet": "def generate_auto_reply(\n    user_comments: List[str],\n    reply_templates: Dict[str, str],\n) -> List[str]:\n    \"\"\"\n    Generate automated replies to user comments based on predefined reply templates.\n\n    Parameters:\n        user_comments (List[str]): List of user comments.\n        reply_templates (Dict[str, str]): Dictionary of reply templates. The keys represent \n                                          different categories of comments and the values \n                                          are the corresponding reply templates.\n    Returns:\n        List[str]: A list of automated replies to the user comments.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate automated replies to user comments."
    }
}
{
    "function_id": "youtube-15",
    "task": "Control the ad settings for specific videos.",
    "completion-content": "def control_ad_settings(\n    video_id: str,\n    ad_settings: Dict[str, Any],\n) -> None:\n    \"\"\"\n    Controls the ad settings for a specific video.\n\n    Parameters:\n        video_id (str): The identifier of the video to adjust ad settings for.\n        ad_settings (Dict[str, Any]): A dictionary containing the ad settings to be updated.\n                                      The keys represent the setting names and the values are the setting values.\n    \"\"\"\n",
    "snippet": "def control_ad_settings(\n    video_id: str,\n    ad_settings: Dict[str, Any],\n) -> None:\n    \"\"\"\n    Controls the ad settings for a specific video.\n\n    Parameters:\n        video_id (str): The identifier of the video to adjust ad settings for.\n        ad_settings (Dict[str, Any]): A dictionary containing the ad settings to be updated.\n                                      The keys represent the setting names and the values are the setting values.\n    \"\"\"\n",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Control the ad settings for specific videos."
    }
}
{
    "function_id": "youtube-16",
    "task": "Fetch details about earnings, including estimated revenue and ad performance.",
    "completion-content": "def fetch_earnings_details(\n    account_id: str,\n    start_date: str,\n    end_date: str,\n) -> Dict[str, Union[float, Dict[str, float]]]:\n    \"\"\"\n    Fetches earnings details, including estimated revenue and ad performance.\n\n    Parameters:\n        account_id (str): The ID of the account to fetch earnings details for.\n        start_date (str): The start date to fetch earnings details from in YYYY-MM-DD format.\n        end_date (str): The end date to fetch earnings details until in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'estimated_revenue' as a key and the estimated \n        revenue as a value, and 'ad_performance' as a key and a dictionary with ad performance details as a value.\n    \"\"\"\n    pass",
    "snippet": "def fetch_earnings_details(\n    account_id: str,\n    start_date: str,\n    end_date: str,\n) -> Dict[str, Union[float, Dict[str, float]]]:\n    \"\"\"\n    Fetches earnings details, including estimated revenue and ad performance.\n\n    Parameters:\n        account_id (str): The ID of the account to fetch earnings details for.\n        start_date (str): The start date to fetch earnings details from in YYYY-MM-DD format.\n        end_date (str): The end date to fetch earnings details until in YYYY-MM-DD format.\n\n    Returns:\n        Dict[str, Union[float, Dict[str, float]]]: A dictionary with 'estimated_revenue' as a key and the estimated \n        revenue as a value, and 'ad_performance' as a key and a dictionary with ad performance details as a value.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Fetch details about earnings, including estimated revenue and ad performance."
    }
}
{
    "function_id": "youtube-17",
    "task": "Change the payment and billing information for the channel.",
    "completion-content": "def update_channel_billing_info(\n    channel_id: str,\n    payment_info: Dict[str, str],\n    billing_info: Dict[str, str],\n) -> bool:\n    \"\"\"\n    Updates the payment and billing information for a specific channel.\n\n    Parameters:\n        channel_id (str): The id of the channel to update.\n        payment_info (Dict[str, str]): A dictionary containing payment information. \n                                        It should have keys like 'card_number', 'expiry_date', 'cvv' etc.\n        billing_info (Dict[str, str]): A dictionary containing billing information. \n                                        It should have keys like 'billing_address', 'city', 'zip_code' etc.\n\n    Returns:\n        bool: Returns True if the update was successful, False otherwise.\n    \"\"\"",
    "snippet": "def update_channel_billing_info(\n    channel_id: str,\n    payment_info: Dict[str, str],\n    billing_info: Dict[str, str],\n) -> bool:\n    \"\"\"\n    Updates the payment and billing information for a specific channel.\n\n    Parameters:\n        channel_id (str): The id of the channel to update.\n        payment_info (Dict[str, str]): A dictionary containing payment information. \n                                        It should have keys like 'card_number', 'expiry_date', 'cvv' etc.\n        billing_info (Dict[str, str]): A dictionary containing billing information. \n                                        It should have keys like 'billing_address', 'city', 'zip_code' etc.\n\n    Returns:\n        bool: Returns True if the update was successful, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Change the payment and billing information for the channel."
    }
}
{
    "function_id": "youtube-18",
    "task": "Automatically upload caption files to videos.",
    "completion-content": "def upload_caption_files(\n    video_ids: List[str],\n    caption_files: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Uploads caption files to the corresponding videos and returns a status report.\n\n    Parameters:\n        video_ids (List[str]): The list of video IDs.\n        caption_files (List[str]): The list of paths to the caption files.\n\n    Returns:\n        Dict[str, str]: A dictionary with video IDs as keys and the upload status as values.\n                        The status could be 'success' or 'failure'.\n    \"\"\"\n    pass",
    "snippet": "def upload_caption_files(\n    video_ids: List[str],\n    caption_files: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Uploads caption files to the corresponding videos and returns a status report.\n\n    Parameters:\n        video_ids (List[str]): The list of video IDs.\n        caption_files (List[str]): The list of paths to the caption files.\n\n    Returns:\n        Dict[str, str]: A dictionary with video IDs as keys and the upload status as values.\n                        The status could be 'success' or 'failure'.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically upload caption files to videos."
    }
}
{
    "function_id": "youtube-19",
    "task": "Replace or update existing captions.",
    "completion-content": "def update_captions(\n    captions: Dict[str, str],\n    new_captions: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Replaces or updates existing captions.\n\n    Parameters:\n        captions (Dict[str, str]): A dictionary of existing captions. Each key is the caption identifier \n                                   and the value is the caption text.\n        new_captions (Dict[str, str]): A dictionary of new captions to be added or existing captions to be updated. \n                                        Each key is the caption identifier and the value is the new caption text.\n\n    Returns:\n        Dict[str, str]: A dictionary of updated captions.\n    \"\"\"\n    pass",
    "snippet": "def update_captions(\n    captions: Dict[str, str],\n    new_captions: Dict[str, str]\n) -> Dict[str, str]:\n    \"\"\"\n    Replaces or updates existing captions.\n\n    Parameters:\n        captions (Dict[str, str]): A dictionary of existing captions. Each key is the caption identifier \n                                   and the value is the caption text.\n        new_captions (Dict[str, str]): A dictionary of new captions to be added or existing captions to be updated. \n                                        Each key is the caption identifier and the value is the new caption text.\n\n    Returns:\n        Dict[str, str]: A dictionary of updated captions.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Replace or update existing captions."
    }
}
{
    "function_id": "youtube-20",
    "task": "Remove captions from a specific video.",
    "completion-content": "def remove_captions_from_video(\n    video_file: str,\n    output_file: str,\n) -> str:\n    \"\"\"\n    Removes captions from a specific video and saves the video without captions to a new file.\n\n    Parameters:\n        video_file (str): The path to the video file from which to remove captions.\n        output_file (str): The path to the file where the video without captions should be saved.\n\n    Returns:\n        str: A message indicating whether the operation was successful or not.\n    \"\"\"\n",
    "snippet": "def remove_captions_from_video(\n    video_file: str,\n    output_file: str,\n) -> str:\n    \"\"\"\n    Removes captions from a specific video and saves the video without captions to a new file.\n\n    Parameters:\n        video_file (str): The path to the video file from which to remove captions.\n        output_file (str): The path to the file where the video without captions should be saved.\n\n    Returns:\n        str: A message indicating whether the operation was successful or not.\n    \"\"\"\n",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove captions from a specific video."
    }
}
{
    "function_id": "youtube-21",
    "task": "Conduct a search for videos based on specific keywords or criteria.",
    "completion-content": "def search_videos(\n    keywords: List[str],\n    criteria: Dict[str, str],\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Conducts a search for videos based on specific keywords or criteria.\n\n    Parameters:\n        keywords (List[str]): The list of keywords to search for in the video titles and descriptions.\n        criteria (Dict[str, str]): A dictionary of specific criteria to narrow down the search.\n                                   The keys can be things like 'duration', 'upload_date', etc.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries where each dictionary represents a video that matches the search.\n                              Each dictionary should contain 'title', 'url', 'duration', 'upload_date', and 'views'.\n    \"\"\"\n    pass",
    "snippet": "def search_videos(\n    keywords: List[str],\n    criteria: Dict[str, str],\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Conducts a search for videos based on specific keywords or criteria.\n\n    Parameters:\n        keywords (List[str]): The list of keywords to search for in the video titles and descriptions.\n        criteria (Dict[str, str]): A dictionary of specific criteria to narrow down the search.\n                                   The keys can be things like 'duration', 'upload_date', etc.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries where each dictionary represents a video that matches the search.\n                              Each dictionary should contain 'title', 'url', 'duration', 'upload_date', and 'views'.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Conduct a search for videos based on specific keywords or criteria."
    }
}
{
    "function_id": "youtube-22",
    "task": "Retrieve a specific video using its unique ID.",
    "completion-content": "def retrieve_video_by_id(video_id: str) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Retrieves a specific video using its unique ID.\n    \n    Parameters:\n        video_id (str): The unique ID of the video.\n        \n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing video details such as 'title', \n                                            'duration', 'views', etc.\n    \"\"\"",
    "snippet": "def retrieve_video_by_id(video_id: str) -> Dict[str, Union[str, int, float]]:\n    \"\"\"\n    Retrieves a specific video using its unique ID.\n    \n    Parameters:\n        video_id (str): The unique ID of the video.\n        \n    Returns:\n        Dict[str, Union[str, int, float]]: A dictionary containing video details such as 'title', \n                                            'duration', 'views', etc.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a specific video using its unique ID."
    }
}
{
    "function_id": "youtube-23",
    "task": "Obtain a list of currently trending videos in a specific region or category.",
    "completion-content": "def fetch_trending_videos(\n    region: str,\n    category: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Fetches a list of currently trending videos in a specific region or category.\n\n    Parameters:\n        region (str): The region to fetch trending videos from.\n        category (str): The category of videos to fetch.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries, each representing a trending video. Each dictionary\n                              should have 'title', 'video_id', 'views', 'likes', 'dislikes', and 'comments' keys.\n    \"\"\"\n",
    "snippet": "def fetch_trending_videos(\n    region: str,\n    category: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Fetches a list of currently trending videos in a specific region or category.\n\n    Parameters:\n        region (str): The region to fetch trending videos from.\n        category (str): The category of videos to fetch.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries, each representing a trending video. Each dictionary\n                              should have 'title', 'video_id', 'views', 'likes', 'dislikes', and 'comments' keys.\n    \"\"\"\n",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Obtain a list of currently trending videos in a specific region or category."
    }
}
{
    "function_id": "youtube-24",
    "task": "Set up a future live stream event.",
    "completion-content": "def setup_live_stream_event(\n    event_title: str,\n    start_time: str,\n    end_time: str,\n    description: str,\n    location: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Sets up a future live stream event and returns the details.\n\n    Parameters:\n        event_title (str): The title of the event.\n        start_time (str): The start time of the event in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The end time of the event in YYYY-MM-DD HH:MM:SS format.\n        description (str): A short description about the event.\n        location (str): The location or platform where the event will be streamed.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'event_id' as a key and the unique event identifier as a value.\n    \"\"\"\n    pass",
    "snippet": "def setup_live_stream_event(\n    event_title: str,\n    start_time: str,\n    end_time: str,\n    description: str,\n    location: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Sets up a future live stream event and returns the details.\n\n    Parameters:\n        event_title (str): The title of the event.\n        start_time (str): The start time of the event in YYYY-MM-DD HH:MM:SS format.\n        end_time (str): The end time of the event in YYYY-MM-DD HH:MM:SS format.\n        description (str): A short description about the event.\n        location (str): The location or platform where the event will be streamed.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'event_id' as a key and the unique event identifier as a value.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set up a future live stream event."
    }
}
{
    "function_id": "youtube-25",
    "task": "Initiate or end a live stream.",
    "completion-content": "def control_live_stream(\n    stream_id: str,\n    action: str,\n) -> None:\n    \"\"\"\n    Initiate or end a live stream.\n\n    Parameters:\n        stream_id (str): The unique identifier of the stream.\n        action (str): The action to perform, either 'start' or 'stop'.\n    \"\"\"\n    pass",
    "snippet": "def control_live_stream(\n    stream_id: str,\n    action: str,\n) -> None:\n    \"\"\"\n    Initiate or end a live stream.\n\n    Parameters:\n        stream_id (str): The unique identifier of the stream.\n        action (str): The action to perform, either 'start' or 'stop'.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Initiate or end a live stream."
    }
}
{
    "function_id": "youtube-26",
    "task": "Automatically post messages, moderate comments, or collect metrics from a live chat during a live stream.",
    "completion-content": "def manage_live_stream_chat(\n    stream_id: str,\n    auto_post_messages: List[str],\n    moderation_rules: Dict[str, Any],\n    metric_collection: bool\n) -> Dict[str, Any]:\n    \"\"\"\n    Manages a live stream chat by automatically posting messages, moderating comments, and collecting metrics.\n\n    Parameters:\n        stream_id (str): The ID of the live stream.\n        auto_post_messages (List[str]): A list of messages to be automatically posted in the chat.\n        moderation_rules (Dict[str, Any]): A dictionary of rules for moderating comments. \n                                            The structure of this dictionary would depend on the specific \n                                            implementation and requirements.\n        metric_collection (bool): A flag indicating whether to collect metrics from the chat.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the results of the chat management. The structure of this \n                        dictionary would depend on the specific implementation and requirements.\n    \"\"\"\n    pass",
    "snippet": "def manage_live_stream_chat(\n    stream_id: str,\n    auto_post_messages: List[str],\n    moderation_rules: Dict[str, Any],\n    metric_collection: bool\n) -> Dict[str, Any]:\n    \"\"\"\n    Manages a live stream chat by automatically posting messages, moderating comments, and collecting metrics.\n\n    Parameters:\n        stream_id (str): The ID of the live stream.\n        auto_post_messages (List[str]): A list of messages to be automatically posted in the chat.\n        moderation_rules (Dict[str, Any]): A dictionary of rules for moderating comments. \n                                            The structure of this dictionary would depend on the specific \n                                            implementation and requirements.\n        metric_collection (bool): A flag indicating whether to collect metrics from the chat.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the results of the chat management. The structure of this \n                        dictionary would depend on the specific implementation and requirements.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically post messages, moderate comments, or collect metrics from a live chat during a live stream."
    }
}
{
    "function_id": "youtube-27",
    "task": "Automate the process of subscribing to other YouTube channels.",
    "completion-content": "def subscribe_to_youtube_channels(\n    channel_ids: List[str],\n    user_token: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Automates the process of subscribing to other YouTube channels.\n\n    Parameters:\n        channel_ids (List[str]): The list of channel IDs to subscribe to.\n        user_token (str): The user's authorization token.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the subscription status as a value.\n    \"\"\"\n    pass",
    "snippet": "def subscribe_to_youtube_channels(\n    channel_ids: List[str],\n    user_token: str,\n) -> Dict[str, str]:\n    \"\"\"\n    Automates the process of subscribing to other YouTube channels.\n\n    Parameters:\n        channel_ids (List[str]): The list of channel IDs to subscribe to.\n        user_token (str): The user's authorization token.\n\n    Returns:\n        Dict[str, str]: A dictionary with 'status' as a key and the subscription status as a value.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automate the process of subscribing to other YouTube channels."
    }
}
{
    "function_id": "youtube-28",
    "task": "Remove existing subscriptions.",
    "completion-content": "def remove_existing_subscriptions(\n    user_id: int,\n    subscriptions: List[str],\n) -> bool:\n    \"\"\"\n    Removes existing subscriptions for a specific user.\n\n    Parameters:\n        user_id (int): The id of the user.\n        subscriptions (List[str]): A list of subscriptions to be removed.\n\n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\"",
    "snippet": "def remove_existing_subscriptions(\n    user_id: int,\n    subscriptions: List[str],\n) -> bool:\n    \"\"\"\n    Removes existing subscriptions for a specific user.\n\n    Parameters:\n        user_id (int): The id of the user.\n        subscriptions (List[str]): A list of subscriptions to be removed.\n\n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove existing subscriptions."
    }
}
{
    "function_id": "youtube-29",
    "task": "Alert subscribers when new content is available or when a live stream is starting.",
    "completion-content": "def alert_subscribers(\n    new_content: bool,\n    live_stream_starting: bool,\n    subscribers: List[Dict[str, str]],\n) -> None:\n    \"\"\"\n    Alerts subscribers when new content is available or when a live stream is starting.\n\n    Parameters:\n        new_content (bool): A boolean indicating whether new content is available.\n        live_stream_starting (bool): A boolean indicating whether a live stream is starting.\n        subscribers (List[Dict[str, str]]): A list of dictionaries containing subscriber details.\n                                             Each dictionary should have 'email' and 'name' keys.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "snippet": "def alert_subscribers(\n    new_content: bool,\n    live_stream_starting: bool,\n    subscribers: List[Dict[str, str]],\n) -> None:\n    \"\"\"\n    Alerts subscribers when new content is available or when a live stream is starting.\n\n    Parameters:\n        new_content (bool): A boolean indicating whether new content is available.\n        live_stream_starting (bool): A boolean indicating whether a live stream is starting.\n        subscribers (List[Dict[str, str]]): A list of dictionaries containing subscriber details.\n                                             Each dictionary should have 'email' and 'name' keys.\n\n    Returns:\n        None\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Alert subscribers when new content is available or when a live stream is starting."
    }
}

{
    "function_id": "youtube-1",
    "task": "Upload a video file as a video to a YouTube channel.",
    "completion-content": "def upload_video_to_youtube(\n    video_file: str,\n    channel_id: str,\n    video_title: str,\n) -> str:\n    \"\"\"\n    Uploads a video file as a video to a YouTube channel.\n\n    Parameters:\n        video_file (str): The path to the video file.\n        channel_id (str): The ID of the YouTube channel.\n        video_title (str): The title of the video.\n\n    Returns:\n        str: The video ID of the uploaded video.\n    \"\"\"",
    "snippet": "def upload_video_to_youtube(\n    video_file: str,\n    channel_id: str,\n    video_title: str,\n) -> str:\n    \"\"\"\n    Uploads a video file as a video to a YouTube channel.\n\n    Parameters:\n        video_file (str): The path to the video file.\n        channel_id (str): The ID of the YouTube channel.\n        video_title (str): The title of the video.\n\n    Returns:\n        str: The video ID of the uploaded video.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Upload a video file as a video to a YouTube channel."
    }
}
{
    "function_id": "youtube-2",
    "task": "Delete a specific video from a channel.",
    "completion-content": "def delete_video(channel_id: str, video_id: str) -> None:\n    \"\"\"\n    Deletes a specific video from a channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel.\n        video_id (str): The ID of the video to be deleted.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def delete_video(channel_id: str, video_id: str) -> None:\n    \"\"\"\n    Deletes a specific video from a channel.\n\n    Parameters:\n        channel_id (str): The ID of the channel.\n        video_id (str): The ID of the video to be deleted.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete a specific video from a channel."
    }
}
{
    "function_id": "youtube-3",
    "task": "Edit video details such as title, description, and tags.",
    "completion-content": "def edit_video_details(\n    video_id: str,\n    title: str,\n    description: str,\n    tags: List[str],\n) -> bool:\n    \"\"\"\n    Edits the details of a video such as title, description, and tags.\n\n    Parameters:\n        video_id (str): The ID of the video to edit.\n        title (str): The new title of the video.\n        description (str): The new description of the video.\n        tags (List[str]): A list of new tags for the video.\n\n    Returns:\n        bool: True if the video details were successfully edited, False otherwise.\n    \"\"\"",
    "snippet": "def edit_video_details(\n    video_id: str,\n    title: str,\n    description: str,\n    tags: List[str],\n) -> bool:\n    \"\"\"\n    Edits the details of a video such as title, description, and tags.\n\n    Parameters:\n        video_id (str): The ID of the video to edit.\n        title (str): The new title of the video.\n        description (str): The new description of the video.\n        tags (List[str]): A list of new tags for the video.\n\n    Returns:\n        bool: True if the video details were successfully edited, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Edit video details such as title, description, and tags."
    }
}
{
    "function_id": "youtube-4",
    "task": "Set a specific time for a video to be made public.",
    "completion-content": "def set_video_public_time(\n    video_id: str,\n    public_time: str,\n) -> bool:\n    \"\"\"\n    Sets a specific time for a video to be made public.\n\n    Parameters:\n        video_id (str): The ID of the video.\n        public_time (str): The time at which the video should be made public in HH:MM:SS format.\n\n    Returns:\n        bool: True if the video's public time was successfully set, False otherwise.\n    \"\"\"",
    "snippet": "def set_video_public_time(\n    video_id: str,\n    public_time: str,\n) -> bool:\n    \"\"\"\n    Sets a specific time for a video to be made public.\n\n    Parameters:\n        video_id (str): The ID of the video.\n        public_time (str): The time at which the video should be made public in HH:MM:SS format.\n\n    Returns:\n        bool: True if the video's public time was successfully set, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set a specific time for a video to be made public."
    }
}
{
    "function_id": "youtube-5",
    "task": "Generate new playlists for categorizing videos.",
    "completion-content": "def generate_new_playlists(\n    videos: List[str],\n    categories: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates new playlists for categorizing videos.\n\n    Parameters:\n        videos (List[str]): A list of video titles.\n        categories (List[str]): A list of category names.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is a category name and the value is a list of videos in that category.\n    \"\"\"",
    "snippet": "def generate_new_playlists(\n    videos: List[str],\n    categories: List[str],\n) -> Dict[str, List[str]]:\n    \"\"\"\n    Generates new playlists for categorizing videos.\n\n    Parameters:\n        videos (List[str]): A list of video titles.\n        categories (List[str]): A list of category names.\n\n    Returns:\n        Dict[str, List[str]]: A dictionary where each key is a category name and the value is a list of videos in that category.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate new playlists for categorizing videos."
    }
}
{
    "function_id": "youtube-6",
    "task": "Insert specific videos into an existing playlist.",
    "completion-content": "def insert_videos_into_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> bool:\n    \"\"\"\n    Inserts specific videos into an existing playlist.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist to insert the videos into.\n        video_ids (List[str]): A list of video IDs to insert into the playlist.\n\n    Returns:\n        bool: True if the videos were successfully inserted into the playlist, False otherwise.\n    \"\"\"",
    "snippet": "def insert_videos_into_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> bool:\n    \"\"\"\n    Inserts specific videos into an existing playlist.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist to insert the videos into.\n        video_ids (List[str]): A list of video IDs to insert into the playlist.\n\n    Returns:\n        bool: True if the videos were successfully inserted into the playlist, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Insert specific videos into an existing playlist."
    }
}
{
    "function_id": "youtube-7",
    "task": "Delete videos from a playlist.",
    "completion-content": "def delete_videos_from_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> bool:\n    \"\"\"\n    Deletes videos from a playlist.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist.\n        video_ids (List[str]): A list of video IDs to be deleted from the playlist.\n\n    Returns:\n        bool: True if the videos were successfully deleted, False otherwise.\n    \"\"\"",
    "snippet": "def delete_videos_from_playlist(\n    playlist_id: str,\n    video_ids: List[str],\n) -> bool:\n    \"\"\"\n    Deletes videos from a playlist.\n\n    Parameters:\n        playlist_id (str): The ID of the playlist.\n        video_ids (List[str]): A list of video IDs to be deleted from the playlist.\n\n    Returns:\n        bool: True if the videos were successfully deleted, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Delete videos from a playlist."
    }
}
{
    "function_id": "youtube-8",
    "task": "Modify the channel description, profile picture, and other details.",
    "completion-content": "def modify_channel_details(\n    channel_id: str,\n    description: str,\n    profile_picture: str,\n    other_details: Dict[str, str],\n) -> None:\n    \"\"\"\n    Modifies the channel description, profile picture, and other details.\n\n    Parameters:\n        channel_id (str): The ID of the channel to modify.\n        description (str): The new description for the channel.\n        profile_picture (str): The file path or URL of the new profile picture.\n        other_details (Dict[str, str]): A dictionary containing other details to modify.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def modify_channel_details(\n    channel_id: str,\n    description: str,\n    profile_picture: str,\n    other_details: Dict[str, str],\n) -> None:\n    \"\"\"\n    Modifies the channel description, profile picture, and other details.\n\n    Parameters:\n        channel_id (str): The ID of the channel to modify.\n        description (str): The new description for the channel.\n        profile_picture (str): The file path or URL of the new profile picture.\n        other_details (Dict[str, str]): A dictionary containing other details to modify.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Modify the channel description, profile picture, and other details."
    }
}
{
    "function_id": "youtube-9",
    "task": "Access analytics such as views, watch time, and subscriber count for specific videos.",
    "completion-content": "def access_video_analytics(video_id: str) -> Dict[str, Union[int, float]]:\n    \"\"\"\n    Accesses analytics such as views, watch time, and subscriber count for a specific video.\n\n    Parameters:\n        video_id (str): The ID of the video to access analytics for.\n\n    Returns:\n        Dict[str, Union[int, float]]: A dictionary with 'views', 'watch_time', and 'subscriber_count' as keys\n                                      and their respective values as values.\n    \"\"\"",
    "snippet": "def access_video_analytics(video_id: str) -> Dict[str, Union[int, float]]:\n    \"\"\"\n    Accesses analytics such as views, watch time, and subscriber count for a specific video.\n\n    Parameters:\n        video_id (str): The ID of the video to access analytics for.\n\n    Returns:\n        Dict[str, Union[int, float]]: A dictionary with 'views', 'watch_time', and 'subscriber_count' as keys\n                                      and their respective values as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Access analytics such as views, watch time, and subscriber count for specific videos."
    }
}
{
    "function_id": "youtube-10",
    "task": "Acquire broader analytics for the entire channel.",
    "completion-content": "def acquire_broader_analytics(channel: str) -> Dict[str, Any]:\n    \"\"\"\n    Acquires broader analytics for the entire channel.\n\n    Parameters:\n        channel (str): The name of the channel.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the broader analytics for the channel.\n    \"\"\"\n    # Implementation code to acquire broader analytics for the entire channel\n\n    return broader_analytics",
    "snippet": "def acquire_broader_analytics(channel: str) -> Dict[str, Any]:\n    \"\"\"\n    Acquires broader analytics for the entire channel.\n\n    Parameters:\n        channel (str): The name of the channel.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the broader analytics for the channel.\n    \"\"\"\n    # Implementation code to acquire broader analytics for the entire channel\n\n    return broader_analytics",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Acquire broader analytics for the entire channel."
    }
}
{
    "function_id": "youtube-11",
    "task": "Understand user engagement by capturing data on likes, dislikes, and comments.",
    "completion-content": "def capture_user_engagement_data(\n    likes: int,\n    dislikes: int,\n    comments: List[str],\n) -> Dict[str, Union[int, List[str]]]:\n    \"\"\"\n    Captures user engagement data including likes, dislikes, and comments.\n\n    Parameters:\n        likes (int): The number of likes.\n        dislikes (int): The number of dislikes.\n        comments (List[str]): A list of comments.\n\n    Returns:\n        Dict[str, Union[int, List[str]]]: A dictionary with 'likes' and 'dislikes' as keys,\n                                          and the corresponding values as integers,\n                                          and 'comments' as a key with a list of strings as values.\n    \"\"\"",
    "snippet": "def capture_user_engagement_data(\n    likes: int,\n    dislikes: int,\n    comments: List[str],\n) -> Dict[str, Union[int, List[str]]]:\n    \"\"\"\n    Captures user engagement data including likes, dislikes, and comments.\n\n    Parameters:\n        likes (int): The number of likes.\n        dislikes (int): The number of dislikes.\n        comments (List[str]): A list of comments.\n\n    Returns:\n        Dict[str, Union[int, List[str]]]: A dictionary with 'likes' and 'dislikes' as keys,\n                                          and the corresponding values as integers,\n                                          and 'comments' as a key with a list of strings as values.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Understand user engagement by capturing data on likes, dislikes, and comments."
    }
}
{
    "function_id": "youtube-12",
    "task": "Automatically post preset comments or updates in the comment section of a video.",
    "completion-content": "def post_preset_comments(video_id: str, comments: List[str]) -> bool:\n    \"\"\"\n    Automatically posts preset comments in the comment section of a video.\n\n    Parameters:\n        video_id (str): The ID of the video to post comments on.\n        comments (List[str]): A list of preset comments to post.\n\n    Returns:\n        bool: True if the comments were successfully posted, False otherwise.\n    \"\"\"",
    "snippet": "def post_preset_comments(video_id: str, comments: List[str]) -> bool:\n    \"\"\"\n    Automatically posts preset comments in the comment section of a video.\n\n    Parameters:\n        video_id (str): The ID of the video to post comments on.\n        comments (List[str]): A list of preset comments to post.\n\n    Returns:\n        bool: True if the comments were successfully posted, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically post preset comments or updates in the comment section of a video."
    }
}
{
    "function_id": "youtube-13",
    "task": "Remove specific comments that violate community guidelines.",
    "completion-content": "def remove_violating_comments(comments: List[str]) -> List[str]:\n    \"\"\"\n    Removes specific comments that violate community guidelines.\n\n    Parameters:\n        comments (List[str]): A list of comments to be checked.\n\n    Returns:\n        List[str]: A list of comments with the violating comments removed.\n    \"\"\"\n    pass",
    "snippet": "def remove_violating_comments(comments: List[str]) -> List[str]:\n    \"\"\"\n    Removes specific comments that violate community guidelines.\n\n    Parameters:\n        comments (List[str]): A list of comments to be checked.\n\n    Returns:\n        List[str]: A list of comments with the violating comments removed.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove specific comments that violate community guidelines."
    }
}
{
    "function_id": "youtube-14",
    "task": "Generate automated replies to user comments.",
    "completion-content": "def generate_automated_replies(user_comments: List[str]) -> List[str]:\n    \"\"\"\n    Generate automated replies to user comments.\n\n    Parameters:\n        user_comments (List[str]): A list of user comments.\n\n    Returns:\n        List[str]: A list of automated replies to the user comments.\n    \"\"\"",
    "snippet": "def generate_automated_replies(user_comments: List[str]) -> List[str]:\n    \"\"\"\n    Generate automated replies to user comments.\n\n    Parameters:\n        user_comments (List[str]): A list of user comments.\n\n    Returns:\n        List[str]: A list of automated replies to the user comments.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Generate automated replies to user comments."
    }
}
{
    "function_id": "youtube-15",
    "task": "Control the ad settings for specific videos.",
    "completion-content": "def control_ad_settings_for_specific_videos(\n    video_ids: List[str],\n    ad_type: str,\n    ad_length: int,\n    ad_frequency: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Controls the ad settings for specific videos.\n\n    Parameters:\n        video_ids (List[str]): A list of video IDs for which the ad settings need to be controlled.\n        ad_type (str): The type of ad to be shown for the videos.\n        ad_length (int): The length of the ad in seconds.\n        ad_frequency (int): The frequency of the ad in minutes.\n\n    Returns:\n        Dict[str, bool]: A dictionary with 'success' as a key and a boolean value indicating whether the ad settings were successfully controlled.\n    \"\"\"",
    "snippet": "def control_ad_settings_for_specific_videos(\n    video_ids: List[str],\n    ad_type: str,\n    ad_length: int,\n    ad_frequency: int,\n) -> Dict[str, bool]:\n    \"\"\"\n    Controls the ad settings for specific videos.\n\n    Parameters:\n        video_ids (List[str]): A list of video IDs for which the ad settings need to be controlled.\n        ad_type (str): The type of ad to be shown for the videos.\n        ad_length (int): The length of the ad in seconds.\n        ad_frequency (int): The frequency of the ad in minutes.\n\n    Returns:\n        Dict[str, bool]: A dictionary with 'success' as a key and a boolean value indicating whether the ad settings were successfully controlled.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Control the ad settings for specific videos."
    }
}
{
    "function_id": "youtube-16",
    "task": "Fetch details about earnings, including estimated revenue and ad performance.",
    "completion-content": "def fetch_earnings_details() -> Dict[str, float]:\n    \"\"\"\n    Fetches details about earnings, including estimated revenue and ad performance.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'estimated_revenue' and 'ad_performance' as keys,\n                          and their respective values as float.\n    \"\"\"",
    "snippet": "def fetch_earnings_details() -> Dict[str, float]:\n    \"\"\"\n    Fetches details about earnings, including estimated revenue and ad performance.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'estimated_revenue' and 'ad_performance' as keys,\n                          and their respective values as float.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Fetch details about earnings, including estimated revenue and ad performance."
    }
}
{
    "function_id": "youtube-17",
    "task": "Change the payment and billing information for the channel.",
    "completion-content": "def change_payment_billing_info(\n    channel: str,\n    new_payment_info: Dict[str, str],\n    new_billing_info: Dict[str, str],\n) -> bool:\n    \"\"\"\n    Changes the payment and billing information for the channel.\n\n    Parameters:\n        channel (str): The channel to update the payment and billing information for.\n        new_payment_info (Dict[str, str]): A dictionary containing the new payment information.\n                                            The dictionary should have 'card_number', 'expiration_date',\n                                            and 'cvv' keys.\n        new_billing_info (Dict[str, str]): A dictionary containing the new billing information.\n                                            The dictionary should have 'name', 'address', 'city',\n                                            'state', 'zip_code', and 'country' keys.\n\n    Returns:\n        bool: True if the payment and billing information was successfully changed, False otherwise.\n    \"\"\"",
    "snippet": "def change_payment_billing_info(\n    channel: str,\n    new_payment_info: Dict[str, str],\n    new_billing_info: Dict[str, str],\n) -> bool:\n    \"\"\"\n    Changes the payment and billing information for the channel.\n\n    Parameters:\n        channel (str): The channel to update the payment and billing information for.\n        new_payment_info (Dict[str, str]): A dictionary containing the new payment information.\n                                            The dictionary should have 'card_number', 'expiration_date',\n                                            and 'cvv' keys.\n        new_billing_info (Dict[str, str]): A dictionary containing the new billing information.\n                                            The dictionary should have 'name', 'address', 'city',\n                                            'state', 'zip_code', and 'country' keys.\n\n    Returns:\n        bool: True if the payment and billing information was successfully changed, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Change the payment and billing information for the channel."
    }
}
{
    "function_id": "youtube-18",
    "task": "Automatically upload caption files to videos.",
    "completion-content": "def upload_captions_to_videos(\n    captions_folder: str,\n    videos_folder: str,\n) -> bool:\n    \"\"\"\n    Automatically uploads caption files to videos.\n\n    Parameters:\n        captions_folder (str): The folder containing the caption files.\n        videos_folder (str): The folder containing the videos.\n\n    Returns:\n        bool: True if the caption files are successfully uploaded to the videos, False otherwise.\n    \"\"\"",
    "snippet": "def upload_captions_to_videos(\n    captions_folder: str,\n    videos_folder: str,\n) -> bool:\n    \"\"\"\n    Automatically uploads caption files to videos.\n\n    Parameters:\n        captions_folder (str): The folder containing the caption files.\n        videos_folder (str): The folder containing the videos.\n\n    Returns:\n        bool: True if the caption files are successfully uploaded to the videos, False otherwise.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically upload caption files to videos."
    }
}
{
    "function_id": "youtube-19",
    "task": "Replace or update existing captions.",
    "completion-content": "def replace_or_update_captions(\n    captions: List[str],\n    new_captions: List[str]\n) -> List[str]:\n    \"\"\"\n    Replaces or updates existing captions with new captions.\n\n    Parameters:\n        captions (List[str]): A list of current captions.\n        new_captions (List[str]): A list of new captions.\n\n    Returns:\n        List[str]: A list of captions with replaced or updated captions.\n    \"\"\"",
    "snippet": "def replace_or_update_captions(\n    captions: List[str],\n    new_captions: List[str]\n) -> List[str]:\n    \"\"\"\n    Replaces or updates existing captions with new captions.\n\n    Parameters:\n        captions (List[str]): A list of current captions.\n        new_captions (List[str]): A list of new captions.\n\n    Returns:\n        List[str]: A list of captions with replaced or updated captions.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Replace or update existing captions."
    }
}
{
    "function_id": "youtube-20",
    "task": "Remove captions from a specific video.",
    "completion-content": "def remove_captions(video_id: str) -> None:\n    \"\"\"\n    Removes captions from a specific video.\n\n    Parameters:\n        video_id (str): The ID of the video to remove captions from.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def remove_captions(video_id: str) -> None:\n    \"\"\"\n    Removes captions from a specific video.\n\n    Parameters:\n        video_id (str): The ID of the video to remove captions from.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove captions from a specific video."
    }
}
{
    "function_id": "youtube-21",
    "task": "Conduct a search for videos based on specific keywords or criteria.",
    "completion-content": "def search_videos(\n    keywords: str,\n    criteria: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Conducts a search for videos based on specific keywords or criteria.\n\n    Parameters:\n        keywords (str): The keywords or search terms to use.\n        criteria (str): The criteria to filter the search results.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing video details.\n                              Each dictionary should have 'title', 'duration', and 'views' keys.\n    \"\"\"",
    "snippet": "def search_videos(\n    keywords: str,\n    criteria: str,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Conducts a search for videos based on specific keywords or criteria.\n\n    Parameters:\n        keywords (str): The keywords or search terms to use.\n        criteria (str): The criteria to filter the search results.\n\n    Returns:\n        List[Dict[str, str]]: A list of dictionaries containing video details.\n                              Each dictionary should have 'title', 'duration', and 'views' keys.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Conduct a search for videos based on specific keywords or criteria."
    }
}
{
    "function_id": "youtube-22",
    "task": "Retrieve a specific video using its unique ID.",
    "completion-content": "def retrieve_video(video_id: str) -> dict:\n    \"\"\"\n    Retrieve a specific video using its unique ID.\n\n    Parameters:\n        video_id (str): The unique ID of the video.\n\n    Returns:\n        dict: A dictionary containing the details of the video.\n    \"\"\"\n    pass",
    "snippet": "def retrieve_video(video_id: str) -> dict:\n    \"\"\"\n    Retrieve a specific video using its unique ID.\n\n    Parameters:\n        video_id (str): The unique ID of the video.\n\n    Returns:\n        dict: A dictionary containing the details of the video.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Retrieve a specific video using its unique ID."
    }
}
{
    "function_id": "youtube-23",
    "task": "Obtain a list of currently trending videos in a specific region or category.",
    "completion-content": "def get_trending_videos(region: str, category: str) -> List[str]:\n    \"\"\"\n    Obtain a list of currently trending videos in a specific region or category.\n\n    Parameters:\n        region (str): The specific region to get trending videos from.\n        category (str): The specific category to get trending videos from.\n\n    Returns:\n        List[str]: A list of video titles that are currently trending in the specified region or category.\n    \"\"\"\n    pass",
    "snippet": "def get_trending_videos(region: str, category: str) -> List[str]:\n    \"\"\"\n    Obtain a list of currently trending videos in a specific region or category.\n\n    Parameters:\n        region (str): The specific region to get trending videos from.\n        category (str): The specific category to get trending videos from.\n\n    Returns:\n        List[str]: A list of video titles that are currently trending in the specified region or category.\n    \"\"\"\n    pass",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Obtain a list of currently trending videos in a specific region or category."
    }
}
{
    "function_id": "youtube-24",
    "task": "Set up a future live stream event.",
    "completion-content": "def set_up_live_stream_event(\n    event_name: str,\n    start_time: str,\n    end_time: str,\n    description: str,\n    host: str,\n    participants: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Sets up a future live stream event and returns the event details.\n\n    Parameters:\n        event_name (str): The name of the live stream event.\n        start_time (str): The start time of the event in HH:MM AM/PM format.\n        end_time (str): The end time of the event in HH:MM AM/PM format.\n        description (str): A description of the event.\n        host (str): The name of the host of the event.\n        participants (List[str]): A list of names of participants.\n\n    Returns:\n        Dict[str, str]: A dictionary with event details.\n        The dictionary should have the following keys:\n        - 'event_name': The name of the event.\n        - 'start_time': The start time of the event.\n        - 'end_time': The end time of the event.\n        - 'description': The description of the event.\n        - 'host': The name of the host.\n        - 'participants': A comma-separated string of participant names.\n    \"\"\"",
    "snippet": "def set_up_live_stream_event(\n    event_name: str,\n    start_time: str,\n    end_time: str,\n    description: str,\n    host: str,\n    participants: List[str],\n) -> Dict[str, str]:\n    \"\"\"\n    Sets up a future live stream event and returns the event details.\n\n    Parameters:\n        event_name (str): The name of the live stream event.\n        start_time (str): The start time of the event in HH:MM AM/PM format.\n        end_time (str): The end time of the event in HH:MM AM/PM format.\n        description (str): A description of the event.\n        host (str): The name of the host of the event.\n        participants (List[str]): A list of names of participants.\n\n    Returns:\n        Dict[str, str]: A dictionary with event details.\n        The dictionary should have the following keys:\n        - 'event_name': The name of the event.\n        - 'start_time': The start time of the event.\n        - 'end_time': The end time of the event.\n        - 'description': The description of the event.\n        - 'host': The name of the host.\n        - 'participants': A comma-separated string of participant names.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Set up a future live stream event."
    }
}
{
    "function_id": "youtube-25",
    "task": "Initiate or end a live stream.",
    "completion-content": "def live_stream(state: str) -> str:\n    \"\"\"\n    Initiates or ends a live stream.\n\n    Parameters:\n        state (str): The state of the live stream. Can be 'start' or 'end'.\n\n    Returns:\n        str: A string indicating the status of the live stream.\n    \"\"\"\n",
    "snippet": "def live_stream(state: str) -> str:\n    \"\"\"\n    Initiates or ends a live stream.\n\n    Parameters:\n        state (str): The state of the live stream. Can be 'start' or 'end'.\n\n    Returns:\n        str: A string indicating the status of the live stream.\n    \"\"\"\n",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Initiate or end a live stream."
    }
}
{
    "function_id": "youtube-26",
    "task": "Automatically post messages, moderate comments, or collect metrics from a live chat during a live stream.",
    "completion-content": "def live_chat_monitor(\n    stream_id: str,\n    bot_username: str,\n    chat_mods: List[str],\n    metrics: bool,\n) -> None:\n    \"\"\"\n    Monitors a live chat during a live stream.\n\n    Parameters:\n        stream_id (str): The ID of the live stream.\n        bot_username (str): The username of the chat bot.\n        chat_mods (List[str]): A list of usernames of chat moderators.\n        metrics (bool): Whether to collect metrics from the live chat.\n\n    Returns:\n        None\n    \"\"\"",
    "snippet": "def live_chat_monitor(\n    stream_id: str,\n    bot_username: str,\n    chat_mods: List[str],\n    metrics: bool,\n) -> None:\n    \"\"\"\n    Monitors a live chat during a live stream.\n\n    Parameters:\n        stream_id (str): The ID of the live stream.\n        bot_username (str): The username of the chat bot.\n        chat_mods (List[str]): A list of usernames of chat moderators.\n        metrics (bool): Whether to collect metrics from the live chat.\n\n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automatically post messages, moderate comments, or collect metrics from a live chat during a live stream."
    }
}
{
    "function_id": "youtube-27",
    "task": "Automate the process of subscribing to other YouTube channels.",
    "completion-content": "def automate_subscribe_to_channels(\n    channel_urls: List[str]\n) -> Dict[str, bool]:\n    \"\"\"\n    Automates the process of subscribing to other YouTube channels.\n\n    Parameters:\n        channel_urls (List[str]): A list of YouTube channel URLs to subscribe to.\n\n    Returns:\n        Dict[str, bool]: A dictionary with 'success' as a key and a boolean value indicating\n                        whether the subscription was successful or not.\n    \"\"\"",
    "snippet": "def automate_subscribe_to_channels(\n    channel_urls: List[str]\n) -> Dict[str, bool]:\n    \"\"\"\n    Automates the process of subscribing to other YouTube channels.\n\n    Parameters:\n        channel_urls (List[str]): A list of YouTube channel URLs to subscribe to.\n\n    Returns:\n        Dict[str, bool]: A dictionary with 'success' as a key and a boolean value indicating\n                        whether the subscription was successful or not.\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Automate the process of subscribing to other YouTube channels."
    }
}
{
    "function_id": "youtube-28",
    "task": "Remove existing subscriptions.",
    "completion-content": "def remove_existing_subscriptions() -> None:\n    \"\"\"\n    Removes existing subscriptions.\n    \"\"\"\n    # Code to remove existing subscriptions goes here",
    "snippet": "def remove_existing_subscriptions() -> None:\n    \"\"\"\n    Removes existing subscriptions.\n    \"\"\"\n    # Code to remove existing subscriptions goes here",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Remove existing subscriptions."
    }
}
{
    "function_id": "youtube-29",
    "task": "Alert subscribers when new content is available or when a live stream is starting.",
    "completion-content": "def alert_subscribers() -> None:\n    \"\"\"\n    Alerts subscribers when new content is available or when a live stream is starting.\n    \n    Returns:\n        None\n    \"\"\"",
    "snippet": "def alert_subscribers() -> None:\n    \"\"\"\n    Alerts subscribers when new content is available or when a live stream is starting.\n    \n    Returns:\n        None\n    \"\"\"",
    "metadata": {
        "TEMPLATE": "\nGenerate a snippet of a python function that accomplishes the task '{FUNCTION_TASK}'.\nDo not include an inputs or actual code implementation. Only return the snippet.\nAn example of a snippet is:\n\ndef order_airplane_tickets(\n    num_tickets: int,\n    destination: str,\n    departure_date: str,\n    passengers: List[Dict[str, str]],\n) -> Dict[str, float]:\n    \"\"\"\n    Orders airplane tickets and returns the total price.\n\n    Parameters:\n        num_tickets (int): The number of tickets to buy.\n        destination (str): The destination city.\n        departure_date (str): The departure date in YYYY-MM-DD format.\n        passengers (List[Dict[str, str]]): A list of dictionaries containing passenger details.\n                                          Each dictionary should have 'name' and 'age' keys.\n\n    Returns:\n        Dict[str, float]: A dictionary with 'total_price' as a key and the total price as a value.\n    \"\"\"\n",
        "FUNCTION_TASK": "Alert subscribers when new content is available or when a live stream is starting."
    }
}
